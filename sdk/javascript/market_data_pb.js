// source: market_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.market_data.AggMessage', null, global);
goog.exportSymbol('proto.market_data.AggMessage.InnerCase', null, global);
goog.exportSymbol('proto.market_data.ClientMessage', null, global);
goog.exportSymbol('proto.market_data.ClientMessage.InnerCase', null, global);
goog.exportSymbol('proto.market_data.Config', null, global);
goog.exportSymbol('proto.market_data.Heartbeat', null, global);
goog.exportSymbol('proto.market_data.Kline', null, global);
goog.exportSymbol('proto.market_data.KlineInterval', null, global);
goog.exportSymbol('proto.market_data.MarketByOrder', null, global);
goog.exportSymbol('proto.market_data.MarketByOrder.Order', null, global);
goog.exportSymbol('proto.market_data.MarketByOrderDiff', null, global);
goog.exportSymbol('proto.market_data.MarketByOrderDiff.Diff', null, global);
goog.exportSymbol('proto.market_data.MarketByOrderDiff.DiffOp', null, global);
goog.exportSymbol('proto.market_data.MarketByPrice', null, global);
goog.exportSymbol('proto.market_data.MarketByPrice.Level', null, global);
goog.exportSymbol('proto.market_data.MarketByPriceDiff', null, global);
goog.exportSymbol('proto.market_data.MarketByPriceDiff.Diff', null, global);
goog.exportSymbol('proto.market_data.MarketByPriceDiff.DiffOp', null, global);
goog.exportSymbol('proto.market_data.MdMessage', null, global);
goog.exportSymbol('proto.market_data.MdMessage.InnerCase', null, global);
goog.exportSymbol('proto.market_data.MdMessages', null, global);
goog.exportSymbol('proto.market_data.RateUpdate', null, global);
goog.exportSymbol('proto.market_data.RateUpdateSide', null, global);
goog.exportSymbol('proto.market_data.RateUpdates', null, global);
goog.exportSymbol('proto.market_data.Side', null, global);
goog.exportSymbol('proto.market_data.Summary', null, global);
goog.exportSymbol('proto.market_data.TopOfBook', null, global);
goog.exportSymbol('proto.market_data.TopOfBooks', null, global);
goog.exportSymbol('proto.market_data.Trades', null, global);
goog.exportSymbol('proto.market_data.Trades.Trade', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MdMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.market_data.MdMessage.oneofGroups_);
};
goog.inherits(proto.market_data.MdMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MdMessage.displayName = 'proto.market_data.MdMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MarketByPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.MarketByPrice.repeatedFields_, null);
};
goog.inherits(proto.market_data.MarketByPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MarketByPrice.displayName = 'proto.market_data.MarketByPrice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MarketByPrice.Level = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.MarketByPrice.Level, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MarketByPrice.Level.displayName = 'proto.market_data.MarketByPrice.Level';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MarketByPriceDiff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.MarketByPriceDiff.repeatedFields_, null);
};
goog.inherits(proto.market_data.MarketByPriceDiff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MarketByPriceDiff.displayName = 'proto.market_data.MarketByPriceDiff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MarketByPriceDiff.Diff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.MarketByPriceDiff.Diff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MarketByPriceDiff.Diff.displayName = 'proto.market_data.MarketByPriceDiff.Diff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MarketByOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.MarketByOrder.repeatedFields_, null);
};
goog.inherits(proto.market_data.MarketByOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MarketByOrder.displayName = 'proto.market_data.MarketByOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MarketByOrder.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.MarketByOrder.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MarketByOrder.Order.displayName = 'proto.market_data.MarketByOrder.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MarketByOrderDiff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.MarketByOrderDiff.repeatedFields_, null);
};
goog.inherits(proto.market_data.MarketByOrderDiff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MarketByOrderDiff.displayName = 'proto.market_data.MarketByOrderDiff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MarketByOrderDiff.Diff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.MarketByOrderDiff.Diff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MarketByOrderDiff.Diff.displayName = 'proto.market_data.MarketByOrderDiff.Diff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.Trades = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.Trades.repeatedFields_, null);
};
goog.inherits(proto.market_data.Trades, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.Trades.displayName = 'proto.market_data.Trades';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.Trades.Trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.Trades.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.Trades.Trade.displayName = 'proto.market_data.Trades.Trade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.Summary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.Summary.displayName = 'proto.market_data.Summary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.Kline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.Kline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.Kline.displayName = 'proto.market_data.Kline';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.Heartbeat.displayName = 'proto.market_data.Heartbeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.MdMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.MdMessages.repeatedFields_, null);
};
goog.inherits(proto.market_data.MdMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.MdMessages.displayName = 'proto.market_data.MdMessages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.AggMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.market_data.AggMessage.oneofGroups_);
};
goog.inherits(proto.market_data.AggMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.AggMessage.displayName = 'proto.market_data.AggMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.TopOfBook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.TopOfBook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.TopOfBook.displayName = 'proto.market_data.TopOfBook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.TopOfBooks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.TopOfBooks.repeatedFields_, null);
};
goog.inherits(proto.market_data.TopOfBooks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.TopOfBooks.displayName = 'proto.market_data.TopOfBooks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.RateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.market_data.RateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.RateUpdate.displayName = 'proto.market_data.RateUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.RateUpdates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.RateUpdates.repeatedFields_, null);
};
goog.inherits(proto.market_data.RateUpdates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.RateUpdates.displayName = 'proto.market_data.RateUpdates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.market_data.ClientMessage.oneofGroups_);
};
goog.inherits(proto.market_data.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.ClientMessage.displayName = 'proto.market_data.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.market_data.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.market_data.Config.repeatedFields_, null);
};
goog.inherits(proto.market_data.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.market_data.Config.displayName = 'proto.market_data.Config';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.market_data.MdMessage.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.market_data.MdMessage.InnerCase = {
  INNER_NOT_SET: 0,
  HEARTBEAT: 1,
  SUMMARY: 2,
  TRADES: 3,
  MBO_SNAPSHOT: 4,
  MBO_DIFF: 5,
  MBP_SNAPSHOT: 6,
  MBP_DIFF: 7,
  KLINE: 8
};

/**
 * @return {proto.market_data.MdMessage.InnerCase}
 */
proto.market_data.MdMessage.prototype.getInnerCase = function() {
  return /** @type {proto.market_data.MdMessage.InnerCase} */(jspb.Message.computeOneofCase(this, proto.market_data.MdMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MdMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MdMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MdMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MdMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto.market_data.Heartbeat.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.market_data.Summary.toObject(includeInstance, f),
    trades: (f = msg.getTrades()) && proto.market_data.Trades.toObject(includeInstance, f),
    mboSnapshot: (f = msg.getMboSnapshot()) && proto.market_data.MarketByOrder.toObject(includeInstance, f),
    mboDiff: (f = msg.getMboDiff()) && proto.market_data.MarketByOrderDiff.toObject(includeInstance, f),
    mbpSnapshot: (f = msg.getMbpSnapshot()) && proto.market_data.MarketByPrice.toObject(includeInstance, f),
    mbpDiff: (f = msg.getMbpDiff()) && proto.market_data.MarketByPriceDiff.toObject(includeInstance, f),
    kline: (f = msg.getKline()) && proto.market_data.Kline.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MdMessage}
 */
proto.market_data.MdMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MdMessage;
  return proto.market_data.MdMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MdMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MdMessage}
 */
proto.market_data.MdMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.Heartbeat;
      reader.readMessage(value,proto.market_data.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto.market_data.Summary;
      reader.readMessage(value,proto.market_data.Summary.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 3:
      var value = new proto.market_data.Trades;
      reader.readMessage(value,proto.market_data.Trades.deserializeBinaryFromReader);
      msg.setTrades(value);
      break;
    case 4:
      var value = new proto.market_data.MarketByOrder;
      reader.readMessage(value,proto.market_data.MarketByOrder.deserializeBinaryFromReader);
      msg.setMboSnapshot(value);
      break;
    case 5:
      var value = new proto.market_data.MarketByOrderDiff;
      reader.readMessage(value,proto.market_data.MarketByOrderDiff.deserializeBinaryFromReader);
      msg.setMboDiff(value);
      break;
    case 6:
      var value = new proto.market_data.MarketByPrice;
      reader.readMessage(value,proto.market_data.MarketByPrice.deserializeBinaryFromReader);
      msg.setMbpSnapshot(value);
      break;
    case 7:
      var value = new proto.market_data.MarketByPriceDiff;
      reader.readMessage(value,proto.market_data.MarketByPriceDiff.deserializeBinaryFromReader);
      msg.setMbpDiff(value);
      break;
    case 8:
      var value = new proto.market_data.Kline;
      reader.readMessage(value,proto.market_data.Kline.deserializeBinaryFromReader);
      msg.setKline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MdMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MdMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MdMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MdMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.market_data.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.market_data.Summary.serializeBinaryToWriter
    );
  }
  f = message.getTrades();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.market_data.Trades.serializeBinaryToWriter
    );
  }
  f = message.getMboSnapshot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.market_data.MarketByOrder.serializeBinaryToWriter
    );
  }
  f = message.getMboDiff();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.market_data.MarketByOrderDiff.serializeBinaryToWriter
    );
  }
  f = message.getMbpSnapshot();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.market_data.MarketByPrice.serializeBinaryToWriter
    );
  }
  f = message.getMbpDiff();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.market_data.MarketByPriceDiff.serializeBinaryToWriter
    );
  }
  f = message.getKline();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.market_data.Kline.serializeBinaryToWriter
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.market_data.Heartbeat}
 */
proto.market_data.MdMessage.prototype.getHeartbeat = function() {
  return /** @type{?proto.market_data.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.market_data.Heartbeat, 1));
};


/**
 * @param {?proto.market_data.Heartbeat|undefined} value
 * @return {!proto.market_data.MdMessage} returns this
*/
proto.market_data.MdMessage.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.market_data.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.MdMessage} returns this
 */
proto.market_data.MdMessage.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.MdMessage.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Summary summary = 2;
 * @return {?proto.market_data.Summary}
 */
proto.market_data.MdMessage.prototype.getSummary = function() {
  return /** @type{?proto.market_data.Summary} */ (
    jspb.Message.getWrapperField(this, proto.market_data.Summary, 2));
};


/**
 * @param {?proto.market_data.Summary|undefined} value
 * @return {!proto.market_data.MdMessage} returns this
*/
proto.market_data.MdMessage.prototype.setSummary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.market_data.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.MdMessage} returns this
 */
proto.market_data.MdMessage.prototype.clearSummary = function() {
  return this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.MdMessage.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Trades trades = 3;
 * @return {?proto.market_data.Trades}
 */
proto.market_data.MdMessage.prototype.getTrades = function() {
  return /** @type{?proto.market_data.Trades} */ (
    jspb.Message.getWrapperField(this, proto.market_data.Trades, 3));
};


/**
 * @param {?proto.market_data.Trades|undefined} value
 * @return {!proto.market_data.MdMessage} returns this
*/
proto.market_data.MdMessage.prototype.setTrades = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.market_data.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.MdMessage} returns this
 */
proto.market_data.MdMessage.prototype.clearTrades = function() {
  return this.setTrades(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.MdMessage.prototype.hasTrades = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MarketByOrder mbo_snapshot = 4;
 * @return {?proto.market_data.MarketByOrder}
 */
proto.market_data.MdMessage.prototype.getMboSnapshot = function() {
  return /** @type{?proto.market_data.MarketByOrder} */ (
    jspb.Message.getWrapperField(this, proto.market_data.MarketByOrder, 4));
};


/**
 * @param {?proto.market_data.MarketByOrder|undefined} value
 * @return {!proto.market_data.MdMessage} returns this
*/
proto.market_data.MdMessage.prototype.setMboSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.market_data.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.MdMessage} returns this
 */
proto.market_data.MdMessage.prototype.clearMboSnapshot = function() {
  return this.setMboSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.MdMessage.prototype.hasMboSnapshot = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MarketByOrderDiff mbo_diff = 5;
 * @return {?proto.market_data.MarketByOrderDiff}
 */
proto.market_data.MdMessage.prototype.getMboDiff = function() {
  return /** @type{?proto.market_data.MarketByOrderDiff} */ (
    jspb.Message.getWrapperField(this, proto.market_data.MarketByOrderDiff, 5));
};


/**
 * @param {?proto.market_data.MarketByOrderDiff|undefined} value
 * @return {!proto.market_data.MdMessage} returns this
*/
proto.market_data.MdMessage.prototype.setMboDiff = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.market_data.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.MdMessage} returns this
 */
proto.market_data.MdMessage.prototype.clearMboDiff = function() {
  return this.setMboDiff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.MdMessage.prototype.hasMboDiff = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MarketByPrice mbp_snapshot = 6;
 * @return {?proto.market_data.MarketByPrice}
 */
proto.market_data.MdMessage.prototype.getMbpSnapshot = function() {
  return /** @type{?proto.market_data.MarketByPrice} */ (
    jspb.Message.getWrapperField(this, proto.market_data.MarketByPrice, 6));
};


/**
 * @param {?proto.market_data.MarketByPrice|undefined} value
 * @return {!proto.market_data.MdMessage} returns this
*/
proto.market_data.MdMessage.prototype.setMbpSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.market_data.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.MdMessage} returns this
 */
proto.market_data.MdMessage.prototype.clearMbpSnapshot = function() {
  return this.setMbpSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.MdMessage.prototype.hasMbpSnapshot = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MarketByPriceDiff mbp_diff = 7;
 * @return {?proto.market_data.MarketByPriceDiff}
 */
proto.market_data.MdMessage.prototype.getMbpDiff = function() {
  return /** @type{?proto.market_data.MarketByPriceDiff} */ (
    jspb.Message.getWrapperField(this, proto.market_data.MarketByPriceDiff, 7));
};


/**
 * @param {?proto.market_data.MarketByPriceDiff|undefined} value
 * @return {!proto.market_data.MdMessage} returns this
*/
proto.market_data.MdMessage.prototype.setMbpDiff = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.market_data.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.MdMessage} returns this
 */
proto.market_data.MdMessage.prototype.clearMbpDiff = function() {
  return this.setMbpDiff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.MdMessage.prototype.hasMbpDiff = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Kline kline = 8;
 * @return {?proto.market_data.Kline}
 */
proto.market_data.MdMessage.prototype.getKline = function() {
  return /** @type{?proto.market_data.Kline} */ (
    jspb.Message.getWrapperField(this, proto.market_data.Kline, 8));
};


/**
 * @param {?proto.market_data.Kline|undefined} value
 * @return {!proto.market_data.MdMessage} returns this
*/
proto.market_data.MdMessage.prototype.setKline = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.market_data.MdMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.MdMessage} returns this
 */
proto.market_data.MdMessage.prototype.clearKline = function() {
  return this.setKline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.MdMessage.prototype.hasKline = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.MarketByPrice.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MarketByPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MarketByPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MarketByPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    levelsList: jspb.Message.toObjectList(msg.getLevelsList(),
    proto.market_data.MarketByPrice.Level.toObject, includeInstance),
    chunk: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numChunks: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MarketByPrice}
 */
proto.market_data.MarketByPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MarketByPrice;
  return proto.market_data.MarketByPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MarketByPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MarketByPrice}
 */
proto.market_data.MarketByPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.MarketByPrice.Level;
      reader.readMessage(value,proto.market_data.MarketByPrice.Level.deserializeBinaryFromReader);
      msg.addLevels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MarketByPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MarketByPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MarketByPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.market_data.MarketByPrice.Level.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNumChunks();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MarketByPrice.Level.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MarketByPrice.Level.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MarketByPrice.Level} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByPrice.Level.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    side: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MarketByPrice.Level}
 */
proto.market_data.MarketByPrice.Level.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MarketByPrice.Level;
  return proto.market_data.MarketByPrice.Level.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MarketByPrice.Level} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MarketByPrice.Level}
 */
proto.market_data.MarketByPrice.Level.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {!proto.market_data.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MarketByPrice.Level.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MarketByPrice.Level.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MarketByPrice.Level} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByPrice.Level.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.market_data.MarketByPrice.Level.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByPrice.Level} returns this
 */
proto.market_data.MarketByPrice.Level.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.market_data.MarketByPrice.Level.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByPrice.Level} returns this
 */
proto.market_data.MarketByPrice.Level.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Side side = 3;
 * @return {!proto.market_data.Side}
 */
proto.market_data.MarketByPrice.Level.prototype.getSide = function() {
  return /** @type {!proto.market_data.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.market_data.Side} value
 * @return {!proto.market_data.MarketByPrice.Level} returns this
 */
proto.market_data.MarketByPrice.Level.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Level levels = 1;
 * @return {!Array<!proto.market_data.MarketByPrice.Level>}
 */
proto.market_data.MarketByPrice.prototype.getLevelsList = function() {
  return /** @type{!Array<!proto.market_data.MarketByPrice.Level>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.market_data.MarketByPrice.Level, 1));
};


/**
 * @param {!Array<!proto.market_data.MarketByPrice.Level>} value
 * @return {!proto.market_data.MarketByPrice} returns this
*/
proto.market_data.MarketByPrice.prototype.setLevelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.market_data.MarketByPrice.Level=} opt_value
 * @param {number=} opt_index
 * @return {!proto.market_data.MarketByPrice.Level}
 */
proto.market_data.MarketByPrice.prototype.addLevels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.market_data.MarketByPrice.Level, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.MarketByPrice} returns this
 */
proto.market_data.MarketByPrice.prototype.clearLevelsList = function() {
  return this.setLevelsList([]);
};


/**
 * optional uint32 chunk = 2;
 * @return {number}
 */
proto.market_data.MarketByPrice.prototype.getChunk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByPrice} returns this
 */
proto.market_data.MarketByPrice.prototype.setChunk = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 num_chunks = 3;
 * @return {number}
 */
proto.market_data.MarketByPrice.prototype.getNumChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByPrice} returns this
 */
proto.market_data.MarketByPrice.prototype.setNumChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.MarketByPriceDiff.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MarketByPriceDiff.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MarketByPriceDiff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MarketByPriceDiff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByPriceDiff.toObject = function(includeInstance, msg) {
  var f, obj = {
    diffsList: jspb.Message.toObjectList(msg.getDiffsList(),
    proto.market_data.MarketByPriceDiff.Diff.toObject, includeInstance),
    totalBidLevels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalAskLevels: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MarketByPriceDiff}
 */
proto.market_data.MarketByPriceDiff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MarketByPriceDiff;
  return proto.market_data.MarketByPriceDiff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MarketByPriceDiff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MarketByPriceDiff}
 */
proto.market_data.MarketByPriceDiff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.MarketByPriceDiff.Diff;
      reader.readMessage(value,proto.market_data.MarketByPriceDiff.Diff.deserializeBinaryFromReader);
      msg.addDiffs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalBidLevels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalAskLevels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MarketByPriceDiff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MarketByPriceDiff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MarketByPriceDiff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByPriceDiff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiffsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.market_data.MarketByPriceDiff.Diff.serializeBinaryToWriter
    );
  }
  f = message.getTotalBidLevels();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTotalAskLevels();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.market_data.MarketByPriceDiff.DiffOp = {
  ADD: 0,
  REMOVE: 1,
  REPLACE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MarketByPriceDiff.Diff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MarketByPriceDiff.Diff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByPriceDiff.Diff.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    side: jspb.Message.getFieldWithDefault(msg, 3, 0),
    op: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MarketByPriceDiff.Diff}
 */
proto.market_data.MarketByPriceDiff.Diff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MarketByPriceDiff.Diff;
  return proto.market_data.MarketByPriceDiff.Diff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MarketByPriceDiff.Diff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MarketByPriceDiff.Diff}
 */
proto.market_data.MarketByPriceDiff.Diff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {!proto.market_data.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 4:
      var value = /** @type {!proto.market_data.MarketByPriceDiff.DiffOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MarketByPriceDiff.Diff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MarketByPriceDiff.Diff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByPriceDiff.Diff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByPriceDiff.Diff} returns this
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByPriceDiff.Diff} returns this
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Side side = 3;
 * @return {!proto.market_data.Side}
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.getSide = function() {
  return /** @type {!proto.market_data.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.market_data.Side} value
 * @return {!proto.market_data.MarketByPriceDiff.Diff} returns this
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional DiffOp op = 4;
 * @return {!proto.market_data.MarketByPriceDiff.DiffOp}
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.getOp = function() {
  return /** @type {!proto.market_data.MarketByPriceDiff.DiffOp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.market_data.MarketByPriceDiff.DiffOp} value
 * @return {!proto.market_data.MarketByPriceDiff.Diff} returns this
 */
proto.market_data.MarketByPriceDiff.Diff.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated Diff diffs = 1;
 * @return {!Array<!proto.market_data.MarketByPriceDiff.Diff>}
 */
proto.market_data.MarketByPriceDiff.prototype.getDiffsList = function() {
  return /** @type{!Array<!proto.market_data.MarketByPriceDiff.Diff>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.market_data.MarketByPriceDiff.Diff, 1));
};


/**
 * @param {!Array<!proto.market_data.MarketByPriceDiff.Diff>} value
 * @return {!proto.market_data.MarketByPriceDiff} returns this
*/
proto.market_data.MarketByPriceDiff.prototype.setDiffsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.market_data.MarketByPriceDiff.Diff=} opt_value
 * @param {number=} opt_index
 * @return {!proto.market_data.MarketByPriceDiff.Diff}
 */
proto.market_data.MarketByPriceDiff.prototype.addDiffs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.market_data.MarketByPriceDiff.Diff, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.MarketByPriceDiff} returns this
 */
proto.market_data.MarketByPriceDiff.prototype.clearDiffsList = function() {
  return this.setDiffsList([]);
};


/**
 * optional uint32 total_bid_levels = 2;
 * @return {number}
 */
proto.market_data.MarketByPriceDiff.prototype.getTotalBidLevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByPriceDiff} returns this
 */
proto.market_data.MarketByPriceDiff.prototype.setTotalBidLevels = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 total_ask_levels = 3;
 * @return {number}
 */
proto.market_data.MarketByPriceDiff.prototype.getTotalAskLevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByPriceDiff} returns this
 */
proto.market_data.MarketByPriceDiff.prototype.setTotalAskLevels = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.MarketByOrder.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MarketByOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MarketByOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MarketByOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.market_data.MarketByOrder.Order.toObject, includeInstance),
    chunk: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numChunks: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MarketByOrder}
 */
proto.market_data.MarketByOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MarketByOrder;
  return proto.market_data.MarketByOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MarketByOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MarketByOrder}
 */
proto.market_data.MarketByOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.MarketByOrder.Order;
      reader.readMessage(value,proto.market_data.MarketByOrder.Order.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MarketByOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MarketByOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MarketByOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.market_data.MarketByOrder.Order.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNumChunks();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MarketByOrder.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MarketByOrder.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MarketByOrder.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByOrder.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    exchangeOrderId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0),
    priority: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MarketByOrder.Order}
 */
proto.market_data.MarketByOrder.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MarketByOrder.Order;
  return proto.market_data.MarketByOrder.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MarketByOrder.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MarketByOrder.Order}
 */
proto.market_data.MarketByOrder.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeOrderId(value);
      break;
    case 4:
      var value = /** @type {!proto.market_data.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MarketByOrder.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MarketByOrder.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MarketByOrder.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByOrder.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExchangeOrderId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.market_data.MarketByOrder.Order.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrder.Order} returns this
 */
proto.market_data.MarketByOrder.Order.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.market_data.MarketByOrder.Order.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrder.Order} returns this
 */
proto.market_data.MarketByOrder.Order.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 exchange_order_id = 3;
 * @return {number}
 */
proto.market_data.MarketByOrder.Order.prototype.getExchangeOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrder.Order} returns this
 */
proto.market_data.MarketByOrder.Order.prototype.setExchangeOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Side side = 4;
 * @return {!proto.market_data.Side}
 */
proto.market_data.MarketByOrder.Order.prototype.getSide = function() {
  return /** @type {!proto.market_data.Side} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.market_data.Side} value
 * @return {!proto.market_data.MarketByOrder.Order} returns this
 */
proto.market_data.MarketByOrder.Order.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint64 priority = 5;
 * @return {number}
 */
proto.market_data.MarketByOrder.Order.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrder.Order} returns this
 */
proto.market_data.MarketByOrder.Order.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Order orders = 1;
 * @return {!Array<!proto.market_data.MarketByOrder.Order>}
 */
proto.market_data.MarketByOrder.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.market_data.MarketByOrder.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.market_data.MarketByOrder.Order, 1));
};


/**
 * @param {!Array<!proto.market_data.MarketByOrder.Order>} value
 * @return {!proto.market_data.MarketByOrder} returns this
*/
proto.market_data.MarketByOrder.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.market_data.MarketByOrder.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.market_data.MarketByOrder.Order}
 */
proto.market_data.MarketByOrder.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.market_data.MarketByOrder.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.MarketByOrder} returns this
 */
proto.market_data.MarketByOrder.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};


/**
 * optional uint32 chunk = 2;
 * @return {number}
 */
proto.market_data.MarketByOrder.prototype.getChunk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrder} returns this
 */
proto.market_data.MarketByOrder.prototype.setChunk = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 num_chunks = 3;
 * @return {number}
 */
proto.market_data.MarketByOrder.prototype.getNumChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrder} returns this
 */
proto.market_data.MarketByOrder.prototype.setNumChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.MarketByOrderDiff.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MarketByOrderDiff.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MarketByOrderDiff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MarketByOrderDiff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByOrderDiff.toObject = function(includeInstance, msg) {
  var f, obj = {
    diffsList: jspb.Message.toObjectList(msg.getDiffsList(),
    proto.market_data.MarketByOrderDiff.Diff.toObject, includeInstance),
    totalBidLevels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalAskLevels: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalBidOrders: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalAskOrders: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MarketByOrderDiff}
 */
proto.market_data.MarketByOrderDiff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MarketByOrderDiff;
  return proto.market_data.MarketByOrderDiff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MarketByOrderDiff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MarketByOrderDiff}
 */
proto.market_data.MarketByOrderDiff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.MarketByOrderDiff.Diff;
      reader.readMessage(value,proto.market_data.MarketByOrderDiff.Diff.deserializeBinaryFromReader);
      msg.addDiffs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalBidLevels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalAskLevels(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalBidOrders(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalAskOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MarketByOrderDiff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MarketByOrderDiff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MarketByOrderDiff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByOrderDiff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiffsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.market_data.MarketByOrderDiff.Diff.serializeBinaryToWriter
    );
  }
  f = message.getTotalBidLevels();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTotalAskLevels();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTotalBidOrders();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTotalAskOrders();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.market_data.MarketByOrderDiff.DiffOp = {
  ADD: 0,
  REMOVE: 1,
  REPLACE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MarketByOrderDiff.Diff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MarketByOrderDiff.Diff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByOrderDiff.Diff.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    exchangeOrderId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0),
    op: jspb.Message.getFieldWithDefault(msg, 5, 0),
    priority: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MarketByOrderDiff.Diff}
 */
proto.market_data.MarketByOrderDiff.Diff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MarketByOrderDiff.Diff;
  return proto.market_data.MarketByOrderDiff.Diff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MarketByOrderDiff.Diff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MarketByOrderDiff.Diff}
 */
proto.market_data.MarketByOrderDiff.Diff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeOrderId(value);
      break;
    case 4:
      var value = /** @type {!proto.market_data.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 5:
      var value = /** @type {!proto.market_data.MarketByOrderDiff.DiffOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MarketByOrderDiff.Diff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MarketByOrderDiff.Diff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MarketByOrderDiff.Diff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExchangeOrderId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrderDiff.Diff} returns this
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 quantity = 2;
 * @return {number}
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrderDiff.Diff} returns this
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 exchange_order_id = 3;
 * @return {number}
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.getExchangeOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrderDiff.Diff} returns this
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.setExchangeOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Side side = 4;
 * @return {!proto.market_data.Side}
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.getSide = function() {
  return /** @type {!proto.market_data.Side} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.market_data.Side} value
 * @return {!proto.market_data.MarketByOrderDiff.Diff} returns this
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional DiffOp op = 5;
 * @return {!proto.market_data.MarketByOrderDiff.DiffOp}
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.getOp = function() {
  return /** @type {!proto.market_data.MarketByOrderDiff.DiffOp} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.market_data.MarketByOrderDiff.DiffOp} value
 * @return {!proto.market_data.MarketByOrderDiff.Diff} returns this
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint64 priority = 6;
 * @return {number}
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrderDiff.Diff} returns this
 */
proto.market_data.MarketByOrderDiff.Diff.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Diff diffs = 1;
 * @return {!Array<!proto.market_data.MarketByOrderDiff.Diff>}
 */
proto.market_data.MarketByOrderDiff.prototype.getDiffsList = function() {
  return /** @type{!Array<!proto.market_data.MarketByOrderDiff.Diff>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.market_data.MarketByOrderDiff.Diff, 1));
};


/**
 * @param {!Array<!proto.market_data.MarketByOrderDiff.Diff>} value
 * @return {!proto.market_data.MarketByOrderDiff} returns this
*/
proto.market_data.MarketByOrderDiff.prototype.setDiffsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.market_data.MarketByOrderDiff.Diff=} opt_value
 * @param {number=} opt_index
 * @return {!proto.market_data.MarketByOrderDiff.Diff}
 */
proto.market_data.MarketByOrderDiff.prototype.addDiffs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.market_data.MarketByOrderDiff.Diff, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.MarketByOrderDiff} returns this
 */
proto.market_data.MarketByOrderDiff.prototype.clearDiffsList = function() {
  return this.setDiffsList([]);
};


/**
 * optional uint32 total_bid_levels = 2;
 * @return {number}
 */
proto.market_data.MarketByOrderDiff.prototype.getTotalBidLevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrderDiff} returns this
 */
proto.market_data.MarketByOrderDiff.prototype.setTotalBidLevels = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 total_ask_levels = 3;
 * @return {number}
 */
proto.market_data.MarketByOrderDiff.prototype.getTotalAskLevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrderDiff} returns this
 */
proto.market_data.MarketByOrderDiff.prototype.setTotalAskLevels = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 total_bid_orders = 4;
 * @return {number}
 */
proto.market_data.MarketByOrderDiff.prototype.getTotalBidOrders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrderDiff} returns this
 */
proto.market_data.MarketByOrderDiff.prototype.setTotalBidOrders = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 total_ask_orders = 5;
 * @return {number}
 */
proto.market_data.MarketByOrderDiff.prototype.getTotalAskOrders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.MarketByOrderDiff} returns this
 */
proto.market_data.MarketByOrderDiff.prototype.setTotalAskOrders = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.Trades.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.Trades.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.Trades.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.Trades} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Trades.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.market_data.Trades.Trade.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.Trades}
 */
proto.market_data.Trades.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.Trades;
  return proto.market_data.Trades.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.Trades} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.Trades}
 */
proto.market_data.Trades.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.Trades.Trade;
      reader.readMessage(value,proto.market_data.Trades.Trade.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.Trades.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.Trades.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.Trades} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Trades.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.market_data.Trades.Trade.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.Trades.Trade.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.Trades.Trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.Trades.Trade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Trades.Trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, 0),
    aggressingSide: jspb.Message.getFieldWithDefault(msg, 3, 0),
    restingExchangeOrderId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fillQuantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    aggressingExchangeOrderId: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.Trades.Trade}
 */
proto.market_data.Trades.Trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.Trades.Trade;
  return proto.market_data.Trades.Trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.Trades.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.Trades.Trade}
 */
proto.market_data.Trades.Trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTradeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {!proto.market_data.Side} */ (reader.readEnum());
      msg.setAggressingSide(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRestingExchangeOrderId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFillQuantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAggressingExchangeOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.Trades.Trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.Trades.Trade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.Trades.Trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Trades.Trade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAggressingSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRestingExchangeOrderId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFillQuantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getAggressingExchangeOrderId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint64 tradeId = 1;
 * @return {number}
 */
proto.market_data.Trades.Trade.prototype.getTradeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Trades.Trade} returns this
 */
proto.market_data.Trades.Trade.prototype.setTradeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 price = 2;
 * @return {number}
 */
proto.market_data.Trades.Trade.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Trades.Trade} returns this
 */
proto.market_data.Trades.Trade.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Side aggressing_side = 3;
 * @return {!proto.market_data.Side}
 */
proto.market_data.Trades.Trade.prototype.getAggressingSide = function() {
  return /** @type {!proto.market_data.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.market_data.Side} value
 * @return {!proto.market_data.Trades.Trade} returns this
 */
proto.market_data.Trades.Trade.prototype.setAggressingSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 resting_exchange_order_id = 4;
 * @return {number}
 */
proto.market_data.Trades.Trade.prototype.getRestingExchangeOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Trades.Trade} returns this
 */
proto.market_data.Trades.Trade.prototype.setRestingExchangeOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 fill_quantity = 5;
 * @return {number}
 */
proto.market_data.Trades.Trade.prototype.getFillQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Trades.Trade} returns this
 */
proto.market_data.Trades.Trade.prototype.setFillQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 transact_time = 6;
 * @return {number}
 */
proto.market_data.Trades.Trade.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Trades.Trade} returns this
 */
proto.market_data.Trades.Trade.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 aggressing_exchange_order_id = 7;
 * @return {number}
 */
proto.market_data.Trades.Trade.prototype.getAggressingExchangeOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Trades.Trade} returns this
 */
proto.market_data.Trades.Trade.prototype.setAggressingExchangeOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated Trade trades = 1;
 * @return {!Array<!proto.market_data.Trades.Trade>}
 */
proto.market_data.Trades.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.market_data.Trades.Trade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.market_data.Trades.Trade, 1));
};


/**
 * @param {!Array<!proto.market_data.Trades.Trade>} value
 * @return {!proto.market_data.Trades} returns this
*/
proto.market_data.Trades.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.market_data.Trades.Trade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.market_data.Trades.Trade}
 */
proto.market_data.Trades.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.market_data.Trades.Trade, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.Trades} returns this
 */
proto.market_data.Trades.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.Summary.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.Summary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.Summary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Summary.toObject = function(includeInstance, msg) {
  var f, obj = {
    open: jspb.Message.getFieldWithDefault(msg, 1, 0),
    close: jspb.Message.getFieldWithDefault(msg, 2, 0),
    low: jspb.Message.getFieldWithDefault(msg, 3, 0),
    high: jspb.Message.getFieldWithDefault(msg, 4, 0),
    baseVolumeLo: jspb.Message.getFieldWithDefault(msg, 5, 0),
    baseVolumeHi: jspb.Message.getFieldWithDefault(msg, 6, 0),
    quoteVolumeLo: jspb.Message.getFieldWithDefault(msg, 7, 0),
    quoteVolumeHi: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.Summary}
 */
proto.market_data.Summary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.Summary;
  return proto.market_data.Summary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.Summary}
 */
proto.market_data.Summary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOpen(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClose(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHigh(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBaseVolumeLo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBaseVolumeHi(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuoteVolumeLo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuoteVolumeHi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.Summary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.Summary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Summary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpen();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClose();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLow();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getBaseVolumeLo();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBaseVolumeHi();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getQuoteVolumeLo();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getQuoteVolumeHi();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional uint64 open = 1;
 * @return {number}
 */
proto.market_data.Summary.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Summary} returns this
 */
proto.market_data.Summary.prototype.setOpen = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 close = 2;
 * @return {number}
 */
proto.market_data.Summary.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Summary} returns this
 */
proto.market_data.Summary.prototype.setClose = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 low = 3;
 * @return {number}
 */
proto.market_data.Summary.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Summary} returns this
 */
proto.market_data.Summary.prototype.setLow = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 high = 4;
 * @return {number}
 */
proto.market_data.Summary.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Summary} returns this
 */
proto.market_data.Summary.prototype.setHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 base_volume_lo = 5;
 * @return {number}
 */
proto.market_data.Summary.prototype.getBaseVolumeLo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Summary} returns this
 */
proto.market_data.Summary.prototype.setBaseVolumeLo = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 base_volume_hi = 6;
 * @return {number}
 */
proto.market_data.Summary.prototype.getBaseVolumeHi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Summary} returns this
 */
proto.market_data.Summary.prototype.setBaseVolumeHi = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 quote_volume_lo = 7;
 * @return {number}
 */
proto.market_data.Summary.prototype.getQuoteVolumeLo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Summary} returns this
 */
proto.market_data.Summary.prototype.setQuoteVolumeLo = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 quote_volume_hi = 8;
 * @return {number}
 */
proto.market_data.Summary.prototype.getQuoteVolumeHi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Summary} returns this
 */
proto.market_data.Summary.prototype.setQuoteVolumeHi = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.Kline.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.Kline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.Kline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Kline.toObject = function(includeInstance, msg) {
  var f, obj = {
    interval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    open: jspb.Message.getFieldWithDefault(msg, 3, 0),
    close: jspb.Message.getFieldWithDefault(msg, 4, 0),
    high: jspb.Message.getFieldWithDefault(msg, 5, 0),
    low: jspb.Message.getFieldWithDefault(msg, 6, 0),
    volumeLo: jspb.Message.getFieldWithDefault(msg, 7, 0),
    volumeHi: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.Kline}
 */
proto.market_data.Kline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.Kline;
  return proto.market_data.Kline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.Kline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.Kline}
 */
proto.market_data.Kline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.market_data.KlineInterval} */ (reader.readEnum());
      msg.setInterval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOpen(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClose(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHigh(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumeLo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolumeHi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.Kline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.Kline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.Kline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Kline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterval();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getClose();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getLow();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getVolumeLo();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getVolumeHi();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional KlineInterval interval = 1;
 * @return {!proto.market_data.KlineInterval}
 */
proto.market_data.Kline.prototype.getInterval = function() {
  return /** @type {!proto.market_data.KlineInterval} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.market_data.KlineInterval} value
 * @return {!proto.market_data.Kline} returns this
 */
proto.market_data.Kline.prototype.setInterval = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 start_time = 2;
 * @return {number}
 */
proto.market_data.Kline.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Kline} returns this
 */
proto.market_data.Kline.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 open = 3;
 * @return {number}
 */
proto.market_data.Kline.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Kline} returns this
 */
proto.market_data.Kline.prototype.setOpen = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 close = 4;
 * @return {number}
 */
proto.market_data.Kline.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Kline} returns this
 */
proto.market_data.Kline.prototype.setClose = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 high = 5;
 * @return {number}
 */
proto.market_data.Kline.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Kline} returns this
 */
proto.market_data.Kline.prototype.setHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 low = 6;
 * @return {number}
 */
proto.market_data.Kline.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Kline} returns this
 */
proto.market_data.Kline.prototype.setLow = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 volume_lo = 7;
 * @return {number}
 */
proto.market_data.Kline.prototype.getVolumeLo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Kline} returns this
 */
proto.market_data.Kline.prototype.setVolumeLo = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 volume_hi = 8;
 * @return {number}
 */
proto.market_data.Kline.prototype.getVolumeHi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Kline} returns this
 */
proto.market_data.Kline.prototype.setVolumeHi = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.Heartbeat}
 */
proto.market_data.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.Heartbeat;
  return proto.market_data.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.Heartbeat}
 */
proto.market_data.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 request_id = 1;
 * @return {number}
 */
proto.market_data.Heartbeat.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Heartbeat} returns this
 */
proto.market_data.Heartbeat.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.market_data.Heartbeat.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.Heartbeat} returns this
 */
proto.market_data.Heartbeat.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.MdMessages.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.MdMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.MdMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.MdMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MdMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.market_data.MdMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.MdMessages}
 */
proto.market_data.MdMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.MdMessages;
  return proto.market_data.MdMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.MdMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.MdMessages}
 */
proto.market_data.MdMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.MdMessage;
      reader.readMessage(value,proto.market_data.MdMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.MdMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.MdMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.MdMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.MdMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.market_data.MdMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MdMessage messages = 1;
 * @return {!Array<!proto.market_data.MdMessage>}
 */
proto.market_data.MdMessages.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.market_data.MdMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.market_data.MdMessage, 1));
};


/**
 * @param {!Array<!proto.market_data.MdMessage>} value
 * @return {!proto.market_data.MdMessages} returns this
*/
proto.market_data.MdMessages.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.market_data.MdMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.market_data.MdMessage}
 */
proto.market_data.MdMessages.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.market_data.MdMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.MdMessages} returns this
 */
proto.market_data.MdMessages.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.market_data.AggMessage.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.market_data.AggMessage.InnerCase = {
  INNER_NOT_SET: 0,
  HEARTBEAT: 1,
  TOP_OF_BOOKS: 2,
  RATE_UPDATES: 3
};

/**
 * @return {proto.market_data.AggMessage.InnerCase}
 */
proto.market_data.AggMessage.prototype.getInnerCase = function() {
  return /** @type {proto.market_data.AggMessage.InnerCase} */(jspb.Message.computeOneofCase(this, proto.market_data.AggMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.AggMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.AggMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.AggMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.AggMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto.market_data.Heartbeat.toObject(includeInstance, f),
    topOfBooks: (f = msg.getTopOfBooks()) && proto.market_data.TopOfBooks.toObject(includeInstance, f),
    rateUpdates: (f = msg.getRateUpdates()) && proto.market_data.RateUpdates.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.AggMessage}
 */
proto.market_data.AggMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.AggMessage;
  return proto.market_data.AggMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.AggMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.AggMessage}
 */
proto.market_data.AggMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.Heartbeat;
      reader.readMessage(value,proto.market_data.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto.market_data.TopOfBooks;
      reader.readMessage(value,proto.market_data.TopOfBooks.deserializeBinaryFromReader);
      msg.setTopOfBooks(value);
      break;
    case 3:
      var value = new proto.market_data.RateUpdates;
      reader.readMessage(value,proto.market_data.RateUpdates.deserializeBinaryFromReader);
      msg.setRateUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.AggMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.AggMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.AggMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.AggMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.market_data.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getTopOfBooks();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.market_data.TopOfBooks.serializeBinaryToWriter
    );
  }
  f = message.getRateUpdates();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.market_data.RateUpdates.serializeBinaryToWriter
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.market_data.Heartbeat}
 */
proto.market_data.AggMessage.prototype.getHeartbeat = function() {
  return /** @type{?proto.market_data.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.market_data.Heartbeat, 1));
};


/**
 * @param {?proto.market_data.Heartbeat|undefined} value
 * @return {!proto.market_data.AggMessage} returns this
*/
proto.market_data.AggMessage.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.market_data.AggMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.AggMessage} returns this
 */
proto.market_data.AggMessage.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.AggMessage.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TopOfBooks top_of_books = 2;
 * @return {?proto.market_data.TopOfBooks}
 */
proto.market_data.AggMessage.prototype.getTopOfBooks = function() {
  return /** @type{?proto.market_data.TopOfBooks} */ (
    jspb.Message.getWrapperField(this, proto.market_data.TopOfBooks, 2));
};


/**
 * @param {?proto.market_data.TopOfBooks|undefined} value
 * @return {!proto.market_data.AggMessage} returns this
*/
proto.market_data.AggMessage.prototype.setTopOfBooks = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.market_data.AggMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.AggMessage} returns this
 */
proto.market_data.AggMessage.prototype.clearTopOfBooks = function() {
  return this.setTopOfBooks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.AggMessage.prototype.hasTopOfBooks = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RateUpdates rate_updates = 3;
 * @return {?proto.market_data.RateUpdates}
 */
proto.market_data.AggMessage.prototype.getRateUpdates = function() {
  return /** @type{?proto.market_data.RateUpdates} */ (
    jspb.Message.getWrapperField(this, proto.market_data.RateUpdates, 3));
};


/**
 * @param {?proto.market_data.RateUpdates|undefined} value
 * @return {!proto.market_data.AggMessage} returns this
*/
proto.market_data.AggMessage.prototype.setRateUpdates = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.market_data.AggMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.AggMessage} returns this
 */
proto.market_data.AggMessage.prototype.clearRateUpdates = function() {
  return this.setRateUpdates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.AggMessage.prototype.hasRateUpdates = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.TopOfBook.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.TopOfBook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.TopOfBook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.TopOfBook.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bidPrice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bidQuantity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    askPrice: jspb.Message.getFieldWithDefault(msg, 5, 0),
    askQuantity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastPrice: jspb.Message.getFieldWithDefault(msg, 7, 0),
    rolling24hPrice: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.TopOfBook}
 */
proto.market_data.TopOfBook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.TopOfBook;
  return proto.market_data.TopOfBook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.TopOfBook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.TopOfBook}
 */
proto.market_data.TopOfBook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBidPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBidQuantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAskPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAskQuantity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRolling24hPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.TopOfBook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.TopOfBook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.TopOfBook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.TopOfBook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBidPrice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBidQuantity();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAskPrice();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getAskQuantity();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLastPrice();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getRolling24hPrice();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional uint64 market_id = 1;
 * @return {number}
 */
proto.market_data.TopOfBook.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.TopOfBook} returns this
 */
proto.market_data.TopOfBook.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 transact_time = 2;
 * @return {number}
 */
proto.market_data.TopOfBook.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.TopOfBook} returns this
 */
proto.market_data.TopOfBook.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bid_price = 3;
 * @return {number}
 */
proto.market_data.TopOfBook.prototype.getBidPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.TopOfBook} returns this
 */
proto.market_data.TopOfBook.prototype.setBidPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 bid_quantity = 4;
 * @return {number}
 */
proto.market_data.TopOfBook.prototype.getBidQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.TopOfBook} returns this
 */
proto.market_data.TopOfBook.prototype.setBidQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ask_price = 5;
 * @return {number}
 */
proto.market_data.TopOfBook.prototype.getAskPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.TopOfBook} returns this
 */
proto.market_data.TopOfBook.prototype.setAskPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 ask_quantity = 6;
 * @return {number}
 */
proto.market_data.TopOfBook.prototype.getAskQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.TopOfBook} returns this
 */
proto.market_data.TopOfBook.prototype.setAskQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 last_price = 7;
 * @return {number}
 */
proto.market_data.TopOfBook.prototype.getLastPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.TopOfBook} returns this
 */
proto.market_data.TopOfBook.prototype.setLastPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 rolling24h_price = 8;
 * @return {number}
 */
proto.market_data.TopOfBook.prototype.getRolling24hPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.TopOfBook} returns this
 */
proto.market_data.TopOfBook.prototype.setRolling24hPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.TopOfBooks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.TopOfBooks.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.TopOfBooks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.TopOfBooks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.TopOfBooks.toObject = function(includeInstance, msg) {
  var f, obj = {
    topsList: jspb.Message.toObjectList(msg.getTopsList(),
    proto.market_data.TopOfBook.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.TopOfBooks}
 */
proto.market_data.TopOfBooks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.TopOfBooks;
  return proto.market_data.TopOfBooks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.TopOfBooks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.TopOfBooks}
 */
proto.market_data.TopOfBooks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.TopOfBook;
      reader.readMessage(value,proto.market_data.TopOfBook.deserializeBinaryFromReader);
      msg.addTops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.TopOfBooks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.TopOfBooks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.TopOfBooks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.TopOfBooks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.market_data.TopOfBook.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TopOfBook tops = 1;
 * @return {!Array<!proto.market_data.TopOfBook>}
 */
proto.market_data.TopOfBooks.prototype.getTopsList = function() {
  return /** @type{!Array<!proto.market_data.TopOfBook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.market_data.TopOfBook, 1));
};


/**
 * @param {!Array<!proto.market_data.TopOfBook>} value
 * @return {!proto.market_data.TopOfBooks} returns this
*/
proto.market_data.TopOfBooks.prototype.setTopsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.market_data.TopOfBook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.market_data.TopOfBook}
 */
proto.market_data.TopOfBooks.prototype.addTops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.market_data.TopOfBook, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.TopOfBooks} returns this
 */
proto.market_data.TopOfBooks.prototype.clearTopsList = function() {
  return this.setTopsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.RateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.RateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.RateUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.RateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.RateUpdate}
 */
proto.market_data.RateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.RateUpdate;
  return proto.market_data.RateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.RateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.RateUpdate}
 */
proto.market_data.RateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRate(value);
      break;
    case 4:
      var value = /** @type {!proto.market_data.RateUpdateSide} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.RateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.RateUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.RateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.RateUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 asset_id = 1;
 * @return {number}
 */
proto.market_data.RateUpdate.prototype.getAssetId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.RateUpdate} returns this
 */
proto.market_data.RateUpdate.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.market_data.RateUpdate.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.RateUpdate} returns this
 */
proto.market_data.RateUpdate.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 rate = 3;
 * @return {number}
 */
proto.market_data.RateUpdate.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.market_data.RateUpdate} returns this
 */
proto.market_data.RateUpdate.prototype.setRate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional RateUpdateSide side = 4;
 * @return {!proto.market_data.RateUpdateSide}
 */
proto.market_data.RateUpdate.prototype.getSide = function() {
  return /** @type {!proto.market_data.RateUpdateSide} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.market_data.RateUpdateSide} value
 * @return {!proto.market_data.RateUpdate} returns this
 */
proto.market_data.RateUpdate.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.RateUpdates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.RateUpdates.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.RateUpdates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.RateUpdates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.RateUpdates.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    proto.market_data.RateUpdate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.RateUpdates}
 */
proto.market_data.RateUpdates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.RateUpdates;
  return proto.market_data.RateUpdates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.RateUpdates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.RateUpdates}
 */
proto.market_data.RateUpdates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.RateUpdate;
      reader.readMessage(value,proto.market_data.RateUpdate.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.RateUpdates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.RateUpdates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.RateUpdates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.RateUpdates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.market_data.RateUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RateUpdate updates = 1;
 * @return {!Array<!proto.market_data.RateUpdate>}
 */
proto.market_data.RateUpdates.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.market_data.RateUpdate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.market_data.RateUpdate, 1));
};


/**
 * @param {!Array<!proto.market_data.RateUpdate>} value
 * @return {!proto.market_data.RateUpdates} returns this
*/
proto.market_data.RateUpdates.prototype.setUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.market_data.RateUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.market_data.RateUpdate}
 */
proto.market_data.RateUpdates.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.market_data.RateUpdate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.RateUpdates} returns this
 */
proto.market_data.RateUpdates.prototype.clearUpdatesList = function() {
  return this.setUpdatesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.market_data.ClientMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.market_data.ClientMessage.InnerCase = {
  INNER_NOT_SET: 0,
  HEARTBEAT: 1,
  CONFIG: 2
};

/**
 * @return {proto.market_data.ClientMessage.InnerCase}
 */
proto.market_data.ClientMessage.prototype.getInnerCase = function() {
  return /** @type {proto.market_data.ClientMessage.InnerCase} */(jspb.Message.computeOneofCase(this, proto.market_data.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    heartbeat: (f = msg.getHeartbeat()) && proto.market_data.Heartbeat.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.market_data.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.ClientMessage}
 */
proto.market_data.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.ClientMessage;
  return proto.market_data.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.ClientMessage}
 */
proto.market_data.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.market_data.Heartbeat;
      reader.readMessage(value,proto.market_data.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 2:
      var value = new proto.market_data.Config;
      reader.readMessage(value,proto.market_data.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.market_data.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.market_data.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional Heartbeat heartbeat = 1;
 * @return {?proto.market_data.Heartbeat}
 */
proto.market_data.ClientMessage.prototype.getHeartbeat = function() {
  return /** @type{?proto.market_data.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.market_data.Heartbeat, 1));
};


/**
 * @param {?proto.market_data.Heartbeat|undefined} value
 * @return {!proto.market_data.ClientMessage} returns this
*/
proto.market_data.ClientMessage.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.market_data.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.ClientMessage} returns this
 */
proto.market_data.ClientMessage.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.ClientMessage.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Config config = 2;
 * @return {?proto.market_data.Config}
 */
proto.market_data.ClientMessage.prototype.getConfig = function() {
  return /** @type{?proto.market_data.Config} */ (
    jspb.Message.getWrapperField(this, proto.market_data.Config, 2));
};


/**
 * @param {?proto.market_data.Config|undefined} value
 * @return {!proto.market_data.ClientMessage} returns this
*/
proto.market_data.ClientMessage.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.market_data.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.market_data.ClientMessage} returns this
 */
proto.market_data.ClientMessage.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.market_data.ClientMessage.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.market_data.Config.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.market_data.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.market_data.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.market_data.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    mbp: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    mbo: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    trades: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    summary: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    klinesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.market_data.Config}
 */
proto.market_data.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.market_data.Config;
  return proto.market_data.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.market_data.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.market_data.Config}
 */
proto.market_data.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMbp(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMbo(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTrades(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSummary(value);
      break;
    case 5:
      var values = /** @type {!Array<!proto.market_data.KlineInterval>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKlines(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.market_data.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.market_data.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.market_data.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.market_data.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMbp();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMbo();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTrades();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSummary();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getKlinesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional bool mbp = 1;
 * @return {boolean}
 */
proto.market_data.Config.prototype.getMbp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.market_data.Config} returns this
 */
proto.market_data.Config.prototype.setMbp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool mbo = 2;
 * @return {boolean}
 */
proto.market_data.Config.prototype.getMbo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.market_data.Config} returns this
 */
proto.market_data.Config.prototype.setMbo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool trades = 3;
 * @return {boolean}
 */
proto.market_data.Config.prototype.getTrades = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.market_data.Config} returns this
 */
proto.market_data.Config.prototype.setTrades = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool summary = 4;
 * @return {boolean}
 */
proto.market_data.Config.prototype.getSummary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.market_data.Config} returns this
 */
proto.market_data.Config.prototype.setSummary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated KlineInterval klines = 5;
 * @return {!Array<!proto.market_data.KlineInterval>}
 */
proto.market_data.Config.prototype.getKlinesList = function() {
  return /** @type {!Array<!proto.market_data.KlineInterval>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.market_data.KlineInterval>} value
 * @return {!proto.market_data.Config} returns this
 */
proto.market_data.Config.prototype.setKlinesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.market_data.KlineInterval} value
 * @param {number=} opt_index
 * @return {!proto.market_data.Config} returns this
 */
proto.market_data.Config.prototype.addKlines = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.market_data.Config} returns this
 */
proto.market_data.Config.prototype.clearKlinesList = function() {
  return this.setKlinesList([]);
};


/**
 * @enum {number}
 */
proto.market_data.Side = {
  BID: 0,
  ASK: 1
};

/**
 * @enum {number}
 */
proto.market_data.KlineInterval = {
  S1: 0,
  M1: 1,
  M15: 2,
  H1: 3,
  H4: 4,
  D1: 5
};

/**
 * @enum {number}
 */
proto.market_data.RateUpdateSide = {
  BASE: 0,
  QUOTE: 1
};

goog.object.extend(exports, proto.market_data);
