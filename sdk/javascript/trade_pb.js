// source: trade.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.trade.AssetPosition', null, global);
goog.exportSymbol('proto.trade.AssetPositions', null, global);
goog.exportSymbol('proto.trade.Bootstrap', null, global);
goog.exportSymbol('proto.trade.Bootstrap.InnerCase', null, global);
goog.exportSymbol('proto.trade.CancelOrder', null, global);
goog.exportSymbol('proto.trade.CancelOrderAck', null, global);
goog.exportSymbol('proto.trade.CancelOrderAck.Reason', null, global);
goog.exportSymbol('proto.trade.CancelOrderReject', null, global);
goog.exportSymbol('proto.trade.CancelOrderReject.Reason', null, global);
goog.exportSymbol('proto.trade.Credentials', null, global);
goog.exportSymbol('proto.trade.Done', null, global);
goog.exportSymbol('proto.trade.Fill', null, global);
goog.exportSymbol('proto.trade.Heartbeat', null, global);
goog.exportSymbol('proto.trade.MassCancel', null, global);
goog.exportSymbol('proto.trade.MassCancelAck', null, global);
goog.exportSymbol('proto.trade.MassCancelAck.Reason', null, global);
goog.exportSymbol('proto.trade.ModifyOrder', null, global);
goog.exportSymbol('proto.trade.ModifyOrderAck', null, global);
goog.exportSymbol('proto.trade.ModifyOrderReject', null, global);
goog.exportSymbol('proto.trade.ModifyOrderReject.Reason', null, global);
goog.exportSymbol('proto.trade.NewOrder', null, global);
goog.exportSymbol('proto.trade.NewOrderAck', null, global);
goog.exportSymbol('proto.trade.NewOrderReject', null, global);
goog.exportSymbol('proto.trade.NewOrderReject.Reason', null, global);
goog.exportSymbol('proto.trade.OrderRequest', null, global);
goog.exportSymbol('proto.trade.OrderRequest.InnerCase', null, global);
goog.exportSymbol('proto.trade.OrderResponse', null, global);
goog.exportSymbol('proto.trade.OrderResponse.InnerCase', null, global);
goog.exportSymbol('proto.trade.OrderType', null, global);
goog.exportSymbol('proto.trade.PostOnly', null, global);
goog.exportSymbol('proto.trade.RawUnits', null, global);
goog.exportSymbol('proto.trade.RestingOrder', null, global);
goog.exportSymbol('proto.trade.RestingOrders', null, global);
goog.exportSymbol('proto.trade.SelfTradePrevention', null, global);
goog.exportSymbol('proto.trade.Side', null, global);
goog.exportSymbol('proto.trade.TimeInForce', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Credentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.Credentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Credentials.displayName = 'proto.trade.Credentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.OrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.trade.OrderRequest.oneofGroups_);
};
goog.inherits(proto.trade.OrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.OrderRequest.displayName = 'proto.trade.OrderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.NewOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.NewOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.NewOrder.displayName = 'proto.trade.NewOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.CancelOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.CancelOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.CancelOrder.displayName = 'proto.trade.CancelOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.ModifyOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.ModifyOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.ModifyOrder.displayName = 'proto.trade.ModifyOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.MassCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.MassCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.MassCancel.displayName = 'proto.trade.MassCancel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Heartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Heartbeat.displayName = 'proto.trade.Heartbeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.OrderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.trade.OrderResponse.oneofGroups_);
};
goog.inherits(proto.trade.OrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.OrderResponse.displayName = 'proto.trade.OrderResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.NewOrderAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.NewOrderAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.NewOrderAck.displayName = 'proto.trade.NewOrderAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.CancelOrderAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.CancelOrderAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.CancelOrderAck.displayName = 'proto.trade.CancelOrderAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.ModifyOrderAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.ModifyOrderAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.ModifyOrderAck.displayName = 'proto.trade.ModifyOrderAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.MassCancelAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.MassCancelAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.MassCancelAck.displayName = 'proto.trade.MassCancelAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.NewOrderReject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.NewOrderReject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.NewOrderReject.displayName = 'proto.trade.NewOrderReject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.CancelOrderReject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.CancelOrderReject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.CancelOrderReject.displayName = 'proto.trade.CancelOrderReject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.ModifyOrderReject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.ModifyOrderReject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.ModifyOrderReject.displayName = 'proto.trade.ModifyOrderReject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Fill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.Fill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Fill.displayName = 'proto.trade.Fill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.AssetPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.AssetPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.AssetPosition.displayName = 'proto.trade.AssetPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.RawUnits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.RawUnits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.RawUnits.displayName = 'proto.trade.RawUnits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Bootstrap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.trade.Bootstrap.oneofGroups_);
};
goog.inherits(proto.trade.Bootstrap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Bootstrap.displayName = 'proto.trade.Bootstrap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.RestingOrders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.trade.RestingOrders.repeatedFields_, null);
};
goog.inherits(proto.trade.RestingOrders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.RestingOrders.displayName = 'proto.trade.RestingOrders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.AssetPositions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.trade.AssetPositions.repeatedFields_, null);
};
goog.inherits(proto.trade.AssetPositions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.AssetPositions.displayName = 'proto.trade.AssetPositions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Done = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.Done, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.Done.displayName = 'proto.trade.Done';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.RestingOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.RestingOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.trade.RestingOrder.displayName = 'proto.trade.RestingOrder';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Credentials.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Credentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Credentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Credentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessKeyId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Credentials}
 */
proto.trade.Credentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Credentials;
  return proto.trade.Credentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Credentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Credentials}
 */
proto.trade.Credentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessKeyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Credentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Credentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Credentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Credentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessKeyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string access_key_id = 1;
 * @return {string}
 */
proto.trade.Credentials.prototype.getAccessKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.trade.Credentials} returns this
 */
proto.trade.Credentials.prototype.setAccessKeyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signature = 2;
 * @return {string}
 */
proto.trade.Credentials.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.trade.Credentials} returns this
 */
proto.trade.Credentials.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.trade.Credentials.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Credentials} returns this
 */
proto.trade.Credentials.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.trade.OrderRequest.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.trade.OrderRequest.InnerCase = {
  INNER_NOT_SET: 0,
  NEW: 1,
  CANCEL: 2,
  MODIFY: 3,
  HEARTBEAT: 4,
  MC: 5
};

/**
 * @return {proto.trade.OrderRequest.InnerCase}
 */
proto.trade.OrderRequest.prototype.getInnerCase = function() {
  return /** @type {proto.trade.OrderRequest.InnerCase} */(jspb.Message.computeOneofCase(this, proto.trade.OrderRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.OrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.OrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.OrderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.OrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_new: (f = msg.getNew()) && proto.trade.NewOrder.toObject(includeInstance, f),
    cancel: (f = msg.getCancel()) && proto.trade.CancelOrder.toObject(includeInstance, f),
    modify: (f = msg.getModify()) && proto.trade.ModifyOrder.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && proto.trade.Heartbeat.toObject(includeInstance, f),
    mc: (f = msg.getMc()) && proto.trade.MassCancel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.OrderRequest}
 */
proto.trade.OrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.OrderRequest;
  return proto.trade.OrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.OrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.OrderRequest}
 */
proto.trade.OrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.NewOrder;
      reader.readMessage(value,proto.trade.NewOrder.deserializeBinaryFromReader);
      msg.setNew(value);
      break;
    case 2:
      var value = new proto.trade.CancelOrder;
      reader.readMessage(value,proto.trade.CancelOrder.deserializeBinaryFromReader);
      msg.setCancel(value);
      break;
    case 3:
      var value = new proto.trade.ModifyOrder;
      reader.readMessage(value,proto.trade.ModifyOrder.deserializeBinaryFromReader);
      msg.setModify(value);
      break;
    case 4:
      var value = new proto.trade.Heartbeat;
      reader.readMessage(value,proto.trade.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 5:
      var value = new proto.trade.MassCancel;
      reader.readMessage(value,proto.trade.MassCancel.deserializeBinaryFromReader);
      msg.setMc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.OrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.OrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.OrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.OrderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNew();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trade.NewOrder.serializeBinaryToWriter
    );
  }
  f = message.getCancel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trade.CancelOrder.serializeBinaryToWriter
    );
  }
  f = message.getModify();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trade.ModifyOrder.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.trade.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getMc();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.trade.MassCancel.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewOrder new = 1;
 * @return {?proto.trade.NewOrder}
 */
proto.trade.OrderRequest.prototype.getNew = function() {
  return /** @type{?proto.trade.NewOrder} */ (
    jspb.Message.getWrapperField(this, proto.trade.NewOrder, 1));
};


/**
 * @param {?proto.trade.NewOrder|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setNew = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearNew = function() {
  return this.setNew(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasNew = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CancelOrder cancel = 2;
 * @return {?proto.trade.CancelOrder}
 */
proto.trade.OrderRequest.prototype.getCancel = function() {
  return /** @type{?proto.trade.CancelOrder} */ (
    jspb.Message.getWrapperField(this, proto.trade.CancelOrder, 2));
};


/**
 * @param {?proto.trade.CancelOrder|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setCancel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearCancel = function() {
  return this.setCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasCancel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ModifyOrder modify = 3;
 * @return {?proto.trade.ModifyOrder}
 */
proto.trade.OrderRequest.prototype.getModify = function() {
  return /** @type{?proto.trade.ModifyOrder} */ (
    jspb.Message.getWrapperField(this, proto.trade.ModifyOrder, 3));
};


/**
 * @param {?proto.trade.ModifyOrder|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setModify = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearModify = function() {
  return this.setModify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasModify = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Heartbeat heartbeat = 4;
 * @return {?proto.trade.Heartbeat}
 */
proto.trade.OrderRequest.prototype.getHeartbeat = function() {
  return /** @type{?proto.trade.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.trade.Heartbeat, 4));
};


/**
 * @param {?proto.trade.Heartbeat|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MassCancel mc = 5;
 * @return {?proto.trade.MassCancel}
 */
proto.trade.OrderRequest.prototype.getMc = function() {
  return /** @type{?proto.trade.MassCancel} */ (
    jspb.Message.getWrapperField(this, proto.trade.MassCancel, 5));
};


/**
 * @param {?proto.trade.MassCancel|undefined} value
 * @return {!proto.trade.OrderRequest} returns this
*/
proto.trade.OrderRequest.prototype.setMc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.trade.OrderRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderRequest} returns this
 */
proto.trade.OrderRequest.prototype.clearMc = function() {
  return this.setMc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderRequest.prototype.hasMc = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.NewOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.NewOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.NewOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    price: jspb.Message.getFieldWithDefault(msg, 4, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    side: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timeInForce: jspb.Message.getFieldWithDefault(msg, 7, 0),
    orderType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 9, 0),
    selfTradePrevention: jspb.Message.getFieldWithDefault(msg, 10, 0),
    postOnly: jspb.Message.getFieldWithDefault(msg, 11, 0),
    cancelOnDisconnect: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.NewOrder}
 */
proto.trade.NewOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.NewOrder;
  return proto.trade.NewOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.NewOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.NewOrder}
 */
proto.trade.NewOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 7:
      var value = /** @type {!proto.trade.TimeInForce} */ (reader.readEnum());
      msg.setTimeInForce(value);
      break;
    case 8:
      var value = /** @type {!proto.trade.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 10:
      var value = /** @type {!proto.trade.SelfTradePrevention} */ (reader.readEnum());
      msg.setSelfTradePrevention(value);
      break;
    case 11:
      var value = /** @type {!proto.trade.PostOnly} */ (reader.readEnum());
      msg.setPostOnly(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancelOnDisconnect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.NewOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.NewOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.NewOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTimeInForce();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = /** @type {!proto.trade.SelfTradePrevention} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getPostOnly();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getCancelOnDisconnect();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional uint64 client_order_id = 1;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 request_id = 2;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 market_id = 3;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 price = 4;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.NewOrder.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 quantity = 5;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Side side = 6;
 * @return {!proto.trade.Side}
 */
proto.trade.NewOrder.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional TimeInForce time_in_force = 7;
 * @return {!proto.trade.TimeInForce}
 */
proto.trade.NewOrder.prototype.getTimeInForce = function() {
  return /** @type {!proto.trade.TimeInForce} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.trade.TimeInForce} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setTimeInForce = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional OrderType order_type = 8;
 * @return {!proto.trade.OrderType}
 */
proto.trade.NewOrder.prototype.getOrderType = function() {
  return /** @type {!proto.trade.OrderType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.trade.OrderType} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional uint64 subaccount_id = 9;
 * @return {number}
 */
proto.trade.NewOrder.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional SelfTradePrevention self_trade_prevention = 10;
 * @return {!proto.trade.SelfTradePrevention}
 */
proto.trade.NewOrder.prototype.getSelfTradePrevention = function() {
  return /** @type {!proto.trade.SelfTradePrevention} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.trade.SelfTradePrevention} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setSelfTradePrevention = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.clearSelfTradePrevention = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.NewOrder.prototype.hasSelfTradePrevention = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PostOnly post_only = 11;
 * @return {!proto.trade.PostOnly}
 */
proto.trade.NewOrder.prototype.getPostOnly = function() {
  return /** @type {!proto.trade.PostOnly} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.trade.PostOnly} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setPostOnly = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional bool cancel_on_disconnect = 12;
 * @return {boolean}
 */
proto.trade.NewOrder.prototype.getCancelOnDisconnect = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.trade.NewOrder} returns this
 */
proto.trade.NewOrder.prototype.setCancelOnDisconnect = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.CancelOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.CancelOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.CancelOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.CancelOrder}
 */
proto.trade.CancelOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.CancelOrder;
  return proto.trade.CancelOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.CancelOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.CancelOrder}
 */
proto.trade.CancelOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.CancelOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.CancelOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.CancelOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 market_id = 1;
 * @return {number}
 */
proto.trade.CancelOrder.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrder} returns this
 */
proto.trade.CancelOrder.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_order_id = 2;
 * @return {number}
 */
proto.trade.CancelOrder.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrder} returns this
 */
proto.trade.CancelOrder.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.CancelOrder.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrder} returns this
 */
proto.trade.CancelOrder.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 subaccount_id = 4;
 * @return {number}
 */
proto.trade.CancelOrder.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrder} returns this
 */
proto.trade.CancelOrder.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.ModifyOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.ModifyOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.ModifyOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    newPrice: jspb.Message.getFieldWithDefault(msg, 4, 0),
    newQuantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    selfTradePrevention: jspb.Message.getFieldWithDefault(msg, 7, 0),
    postOnly: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.ModifyOrder}
 */
proto.trade.ModifyOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.ModifyOrder;
  return proto.trade.ModifyOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.ModifyOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.ModifyOrder}
 */
proto.trade.ModifyOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewQuantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 7:
      var value = /** @type {!proto.trade.SelfTradePrevention} */ (reader.readEnum());
      msg.setSelfTradePrevention(value);
      break;
    case 8:
      var value = /** @type {!proto.trade.PostOnly} */ (reader.readEnum());
      msg.setPostOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.ModifyOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.ModifyOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.ModifyOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNewPrice();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getNewQuantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = /** @type {!proto.trade.SelfTradePrevention} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getPostOnly();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional uint64 market_id = 1;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_order_id = 2;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 new_price = 4;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getNewPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setNewPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 new_quantity = 5;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getNewQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setNewQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 subaccount_id = 6;
 * @return {number}
 */
proto.trade.ModifyOrder.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional SelfTradePrevention self_trade_prevention = 7;
 * @return {!proto.trade.SelfTradePrevention}
 */
proto.trade.ModifyOrder.prototype.getSelfTradePrevention = function() {
  return /** @type {!proto.trade.SelfTradePrevention} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.trade.SelfTradePrevention} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setSelfTradePrevention = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.clearSelfTradePrevention = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.ModifyOrder.prototype.hasSelfTradePrevention = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PostOnly post_only = 8;
 * @return {!proto.trade.PostOnly}
 */
proto.trade.ModifyOrder.prototype.getPostOnly = function() {
  return /** @type {!proto.trade.PostOnly} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.trade.PostOnly} value
 * @return {!proto.trade.ModifyOrder} returns this
 */
proto.trade.ModifyOrder.prototype.setPostOnly = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.MassCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.MassCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.MassCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MassCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    side: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.MassCancel}
 */
proto.trade.MassCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.MassCancel;
  return proto.trade.MassCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.MassCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.MassCancel}
 */
proto.trade.MassCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 4:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.MassCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.MassCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.MassCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MassCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.trade.Side} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional uint64 subaccount_id = 1;
 * @return {number}
 */
proto.trade.MassCancel.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 request_id = 2;
 * @return {number}
 */
proto.trade.MassCancel.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 market_id = 3;
 * @return {number}
 */
proto.trade.MassCancel.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.setMarketId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.clearMarketId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.MassCancel.prototype.hasMarketId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Side side = 4;
 * @return {!proto.trade.Side}
 */
proto.trade.MassCancel.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.setSide = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.MassCancel} returns this
 */
proto.trade.MassCancel.prototype.clearSide = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.MassCancel.prototype.hasSide = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Heartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Heartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Heartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Heartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Heartbeat}
 */
proto.trade.Heartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Heartbeat;
  return proto.trade.Heartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Heartbeat}
 */
proto.trade.Heartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Heartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Heartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 request_id = 1;
 * @return {number}
 */
proto.trade.Heartbeat.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Heartbeat} returns this
 */
proto.trade.Heartbeat.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.trade.Heartbeat.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Heartbeat} returns this
 */
proto.trade.Heartbeat.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.trade.OrderResponse.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.trade.OrderResponse.InnerCase = {
  INNER_NOT_SET: 0,
  NEW_ACK: 1,
  CANCEL_ACK: 2,
  MODIFY_ACK: 3,
  NEW_REJECT: 4,
  CANCEL_REJECT: 5,
  MODIFY_REJECT: 6,
  FILL: 7,
  HEARTBEAT: 8,
  POSITION: 9,
  MASS_CANCEL_ACK: 10
};

/**
 * @return {proto.trade.OrderResponse.InnerCase}
 */
proto.trade.OrderResponse.prototype.getInnerCase = function() {
  return /** @type {proto.trade.OrderResponse.InnerCase} */(jspb.Message.computeOneofCase(this, proto.trade.OrderResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.OrderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.OrderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.OrderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.OrderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newAck: (f = msg.getNewAck()) && proto.trade.NewOrderAck.toObject(includeInstance, f),
    cancelAck: (f = msg.getCancelAck()) && proto.trade.CancelOrderAck.toObject(includeInstance, f),
    modifyAck: (f = msg.getModifyAck()) && proto.trade.ModifyOrderAck.toObject(includeInstance, f),
    newReject: (f = msg.getNewReject()) && proto.trade.NewOrderReject.toObject(includeInstance, f),
    cancelReject: (f = msg.getCancelReject()) && proto.trade.CancelOrderReject.toObject(includeInstance, f),
    modifyReject: (f = msg.getModifyReject()) && proto.trade.ModifyOrderReject.toObject(includeInstance, f),
    fill: (f = msg.getFill()) && proto.trade.Fill.toObject(includeInstance, f),
    heartbeat: (f = msg.getHeartbeat()) && proto.trade.Heartbeat.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && proto.trade.AssetPosition.toObject(includeInstance, f),
    massCancelAck: (f = msg.getMassCancelAck()) && proto.trade.MassCancelAck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.OrderResponse}
 */
proto.trade.OrderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.OrderResponse;
  return proto.trade.OrderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.OrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.OrderResponse}
 */
proto.trade.OrderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.NewOrderAck;
      reader.readMessage(value,proto.trade.NewOrderAck.deserializeBinaryFromReader);
      msg.setNewAck(value);
      break;
    case 2:
      var value = new proto.trade.CancelOrderAck;
      reader.readMessage(value,proto.trade.CancelOrderAck.deserializeBinaryFromReader);
      msg.setCancelAck(value);
      break;
    case 3:
      var value = new proto.trade.ModifyOrderAck;
      reader.readMessage(value,proto.trade.ModifyOrderAck.deserializeBinaryFromReader);
      msg.setModifyAck(value);
      break;
    case 4:
      var value = new proto.trade.NewOrderReject;
      reader.readMessage(value,proto.trade.NewOrderReject.deserializeBinaryFromReader);
      msg.setNewReject(value);
      break;
    case 5:
      var value = new proto.trade.CancelOrderReject;
      reader.readMessage(value,proto.trade.CancelOrderReject.deserializeBinaryFromReader);
      msg.setCancelReject(value);
      break;
    case 6:
      var value = new proto.trade.ModifyOrderReject;
      reader.readMessage(value,proto.trade.ModifyOrderReject.deserializeBinaryFromReader);
      msg.setModifyReject(value);
      break;
    case 7:
      var value = new proto.trade.Fill;
      reader.readMessage(value,proto.trade.Fill.deserializeBinaryFromReader);
      msg.setFill(value);
      break;
    case 8:
      var value = new proto.trade.Heartbeat;
      reader.readMessage(value,proto.trade.Heartbeat.deserializeBinaryFromReader);
      msg.setHeartbeat(value);
      break;
    case 9:
      var value = new proto.trade.AssetPosition;
      reader.readMessage(value,proto.trade.AssetPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 10:
      var value = new proto.trade.MassCancelAck;
      reader.readMessage(value,proto.trade.MassCancelAck.deserializeBinaryFromReader);
      msg.setMassCancelAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.OrderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.OrderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.OrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.OrderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trade.NewOrderAck.serializeBinaryToWriter
    );
  }
  f = message.getCancelAck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trade.CancelOrderAck.serializeBinaryToWriter
    );
  }
  f = message.getModifyAck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trade.ModifyOrderAck.serializeBinaryToWriter
    );
  }
  f = message.getNewReject();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.trade.NewOrderReject.serializeBinaryToWriter
    );
  }
  f = message.getCancelReject();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.trade.CancelOrderReject.serializeBinaryToWriter
    );
  }
  f = message.getModifyReject();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.trade.ModifyOrderReject.serializeBinaryToWriter
    );
  }
  f = message.getFill();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.trade.Fill.serializeBinaryToWriter
    );
  }
  f = message.getHeartbeat();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.trade.Heartbeat.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.trade.AssetPosition.serializeBinaryToWriter
    );
  }
  f = message.getMassCancelAck();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.trade.MassCancelAck.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewOrderAck new_ack = 1;
 * @return {?proto.trade.NewOrderAck}
 */
proto.trade.OrderResponse.prototype.getNewAck = function() {
  return /** @type{?proto.trade.NewOrderAck} */ (
    jspb.Message.getWrapperField(this, proto.trade.NewOrderAck, 1));
};


/**
 * @param {?proto.trade.NewOrderAck|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setNewAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearNewAck = function() {
  return this.setNewAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasNewAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CancelOrderAck cancel_ack = 2;
 * @return {?proto.trade.CancelOrderAck}
 */
proto.trade.OrderResponse.prototype.getCancelAck = function() {
  return /** @type{?proto.trade.CancelOrderAck} */ (
    jspb.Message.getWrapperField(this, proto.trade.CancelOrderAck, 2));
};


/**
 * @param {?proto.trade.CancelOrderAck|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setCancelAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearCancelAck = function() {
  return this.setCancelAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasCancelAck = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ModifyOrderAck modify_ack = 3;
 * @return {?proto.trade.ModifyOrderAck}
 */
proto.trade.OrderResponse.prototype.getModifyAck = function() {
  return /** @type{?proto.trade.ModifyOrderAck} */ (
    jspb.Message.getWrapperField(this, proto.trade.ModifyOrderAck, 3));
};


/**
 * @param {?proto.trade.ModifyOrderAck|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setModifyAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearModifyAck = function() {
  return this.setModifyAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasModifyAck = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NewOrderReject new_reject = 4;
 * @return {?proto.trade.NewOrderReject}
 */
proto.trade.OrderResponse.prototype.getNewReject = function() {
  return /** @type{?proto.trade.NewOrderReject} */ (
    jspb.Message.getWrapperField(this, proto.trade.NewOrderReject, 4));
};


/**
 * @param {?proto.trade.NewOrderReject|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setNewReject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearNewReject = function() {
  return this.setNewReject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasNewReject = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CancelOrderReject cancel_reject = 5;
 * @return {?proto.trade.CancelOrderReject}
 */
proto.trade.OrderResponse.prototype.getCancelReject = function() {
  return /** @type{?proto.trade.CancelOrderReject} */ (
    jspb.Message.getWrapperField(this, proto.trade.CancelOrderReject, 5));
};


/**
 * @param {?proto.trade.CancelOrderReject|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setCancelReject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearCancelReject = function() {
  return this.setCancelReject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasCancelReject = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ModifyOrderReject modify_reject = 6;
 * @return {?proto.trade.ModifyOrderReject}
 */
proto.trade.OrderResponse.prototype.getModifyReject = function() {
  return /** @type{?proto.trade.ModifyOrderReject} */ (
    jspb.Message.getWrapperField(this, proto.trade.ModifyOrderReject, 6));
};


/**
 * @param {?proto.trade.ModifyOrderReject|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setModifyReject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearModifyReject = function() {
  return this.setModifyReject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasModifyReject = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Fill fill = 7;
 * @return {?proto.trade.Fill}
 */
proto.trade.OrderResponse.prototype.getFill = function() {
  return /** @type{?proto.trade.Fill} */ (
    jspb.Message.getWrapperField(this, proto.trade.Fill, 7));
};


/**
 * @param {?proto.trade.Fill|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setFill = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearFill = function() {
  return this.setFill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasFill = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Heartbeat heartbeat = 8;
 * @return {?proto.trade.Heartbeat}
 */
proto.trade.OrderResponse.prototype.getHeartbeat = function() {
  return /** @type{?proto.trade.Heartbeat} */ (
    jspb.Message.getWrapperField(this, proto.trade.Heartbeat, 8));
};


/**
 * @param {?proto.trade.Heartbeat|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setHeartbeat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearHeartbeat = function() {
  return this.setHeartbeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasHeartbeat = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AssetPosition position = 9;
 * @return {?proto.trade.AssetPosition}
 */
proto.trade.OrderResponse.prototype.getPosition = function() {
  return /** @type{?proto.trade.AssetPosition} */ (
    jspb.Message.getWrapperField(this, proto.trade.AssetPosition, 9));
};


/**
 * @param {?proto.trade.AssetPosition|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setPosition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MassCancelAck mass_cancel_ack = 10;
 * @return {?proto.trade.MassCancelAck}
 */
proto.trade.OrderResponse.prototype.getMassCancelAck = function() {
  return /** @type{?proto.trade.MassCancelAck} */ (
    jspb.Message.getWrapperField(this, proto.trade.MassCancelAck, 10));
};


/**
 * @param {?proto.trade.MassCancelAck|undefined} value
 * @return {!proto.trade.OrderResponse} returns this
*/
proto.trade.OrderResponse.prototype.setMassCancelAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.trade.OrderResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.OrderResponse} returns this
 */
proto.trade.OrderResponse.prototype.clearMassCancelAck = function() {
  return this.setMassCancelAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.OrderResponse.prototype.hasMassCancelAck = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.NewOrderAck.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.NewOrderAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.NewOrderAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrderAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    exchangeOrderId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    price: jspb.Message.getFieldWithDefault(msg, 6, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    side: jspb.Message.getFieldWithDefault(msg, 8, 0),
    timeInForce: jspb.Message.getFieldWithDefault(msg, 9, 0),
    orderType: jspb.Message.getFieldWithDefault(msg, 10, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 12, 0),
    cancelOnDisconnect: jspb.Message.getBooleanFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.NewOrderAck}
 */
proto.trade.NewOrderAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.NewOrderAck;
  return proto.trade.NewOrderAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.NewOrderAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.NewOrderAck}
 */
proto.trade.NewOrderAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeOrderId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 8:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 9:
      var value = /** @type {!proto.trade.TimeInForce} */ (reader.readEnum());
      msg.setTimeInForce(value);
      break;
    case 10:
      var value = /** @type {!proto.trade.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancelOnDisconnect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.NewOrderAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.NewOrderAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.NewOrderAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrderAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExchangeOrderId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getTimeInForce();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getCancelOnDisconnect();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional uint64 msg_seq_num = 1;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getMsgSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setMsgSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_order_id = 2;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 exchange_order_id = 4;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getExchangeOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setExchangeOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 market_id = 5;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 price = 6;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.NewOrderAck.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 quantity = 7;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Side side = 8;
 * @return {!proto.trade.Side}
 */
proto.trade.NewOrderAck.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional TimeInForce time_in_force = 9;
 * @return {!proto.trade.TimeInForce}
 */
proto.trade.NewOrderAck.prototype.getTimeInForce = function() {
  return /** @type {!proto.trade.TimeInForce} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.trade.TimeInForce} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setTimeInForce = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional OrderType order_type = 10;
 * @return {!proto.trade.OrderType}
 */
proto.trade.NewOrderAck.prototype.getOrderType = function() {
  return /** @type {!proto.trade.OrderType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.trade.OrderType} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional uint64 transact_time = 11;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 subaccount_id = 12;
 * @return {number}
 */
proto.trade.NewOrderAck.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool cancel_on_disconnect = 13;
 * @return {boolean}
 */
proto.trade.NewOrderAck.prototype.getCancelOnDisconnect = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.trade.NewOrderAck} returns this
 */
proto.trade.NewOrderAck.prototype.setCancelOnDisconnect = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.CancelOrderAck.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.CancelOrderAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.CancelOrderAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrderAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.CancelOrderAck}
 */
proto.trade.CancelOrderAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.CancelOrderAck;
  return proto.trade.CancelOrderAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.CancelOrderAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.CancelOrderAck}
 */
proto.trade.CancelOrderAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.CancelOrderAck.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.CancelOrderAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.CancelOrderAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.CancelOrderAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrderAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.CancelOrderAck.Reason = {
  UNCLASSIFIED: 0,
  DISCONNECT: 1,
  REQUESTED: 2,
  IOC: 3,
  STP_RESTING: 4,
  STP_AGGRESSING: 5,
  MASS_CANCEL: 6
};

/**
 * optional uint64 msg_seq_num = 1;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getMsgSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setMsgSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_order_id = 2;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transact_time = 4;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 subaccount_id = 5;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.CancelOrderAck.Reason}
 */
proto.trade.CancelOrderAck.prototype.getReason = function() {
  return /** @type {!proto.trade.CancelOrderAck.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.CancelOrderAck.Reason} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 market_id = 7;
 * @return {number}
 */
proto.trade.CancelOrderAck.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderAck} returns this
 */
proto.trade.CancelOrderAck.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.ModifyOrderAck.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.ModifyOrderAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.ModifyOrderAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrderAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    remainingQuantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    price: jspb.Message.getFieldWithDefault(msg, 8, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cumulativeQuantity: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.ModifyOrderAck}
 */
proto.trade.ModifyOrderAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.ModifyOrderAck;
  return proto.trade.ModifyOrderAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.ModifyOrderAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.ModifyOrderAck}
 */
proto.trade.ModifyOrderAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemainingQuantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCumulativeQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.ModifyOrderAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.ModifyOrderAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.ModifyOrderAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrderAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getRemainingQuantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getCumulativeQuantity();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};


/**
 * optional uint64 msg_seq_num = 1;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getMsgSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setMsgSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_order_id = 2;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transact_time = 4;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 remaining_quantity = 5;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getRemainingQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setRemainingQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 subaccount_id = 6;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 market_id = 7;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 price = 8;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 quantity = 9;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 cumulative_quantity = 10;
 * @return {number}
 */
proto.trade.ModifyOrderAck.prototype.getCumulativeQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderAck} returns this
 */
proto.trade.ModifyOrderAck.prototype.setCumulativeQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.MassCancelAck.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.MassCancelAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.MassCancelAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MassCancelAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalAffectedOrders: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.MassCancelAck}
 */
proto.trade.MassCancelAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.MassCancelAck;
  return proto.trade.MassCancelAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.MassCancelAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.MassCancelAck}
 */
proto.trade.MassCancelAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.MassCancelAck.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalAffectedOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.MassCancelAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.MassCancelAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.MassCancelAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MassCancelAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {!proto.trade.MassCancelAck.Reason} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTotalAffectedOrders();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.MassCancelAck.Reason = {
  UNCLASSIFIED: 0,
  INVALID_MARKET_ID: 1,
  INVALID_SIDE: 2
};

/**
 * optional uint64 msg_seq_num = 1;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getMsgSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setMsgSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 subaccount_id = 2;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transact_time = 4;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.MassCancelAck.Reason}
 */
proto.trade.MassCancelAck.prototype.getReason = function() {
  return /** @type {!proto.trade.MassCancelAck.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.MassCancelAck.Reason} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.clearReason = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.MassCancelAck.prototype.hasReason = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 total_affected_orders = 7;
 * @return {number}
 */
proto.trade.MassCancelAck.prototype.getTotalAffectedOrders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.MassCancelAck} returns this
 */
proto.trade.MassCancelAck.prototype.setTotalAffectedOrders = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.NewOrderReject.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.NewOrderReject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.NewOrderReject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrderReject.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    price: jspb.Message.getFieldWithDefault(msg, 8, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 9, 0),
    side: jspb.Message.getFieldWithDefault(msg, 10, 0),
    timeInForce: jspb.Message.getFieldWithDefault(msg, 11, 0),
    orderType: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.NewOrderReject}
 */
proto.trade.NewOrderReject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.NewOrderReject;
  return proto.trade.NewOrderReject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.NewOrderReject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.NewOrderReject}
 */
proto.trade.NewOrderReject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.NewOrderReject.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 10:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 11:
      var value = /** @type {!proto.trade.TimeInForce} */ (reader.readEnum());
      msg.setTimeInForce(value);
      break;
    case 12:
      var value = /** @type {!proto.trade.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.NewOrderReject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.NewOrderReject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.NewOrderReject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.NewOrderReject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getTimeInForce();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.NewOrderReject.Reason = {
  UNCLASSIFIED: 0,
  INVALID_QUANTITY: 1,
  INVALID_MARKET_ID: 2,
  DUPLICATE_ORDER_ID: 3,
  INVALID_SIDE: 4,
  INVALID_TIME_IN_FORCE: 5,
  INVALID_ORDER_TYPE: 6,
  INVALID_POST_ONLY: 7,
  INVALID_SELF_TRADE_PREVENTION: 8,
  UNKNOWN_TRADER: 9,
  PRICE_WITH_MARKET_ORDER: 10,
  POST_ONLY_WITH_MARKET_ORDER: 11,
  POST_ONLY_WITH_INVALID_TIF: 12,
  EXCEEDED_SPOT_POSITION: 13,
  NO_OPPOSING_LIMIT_ORDER: 14,
  POST_ONLY_WOULD_TRADE: 15,
  DID_NOT_FULLY_FILL: 16
};

/**
 * optional uint64 msg_seq_num = 1;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getMsgSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setMsgSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_order_id = 2;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transact_time = 4;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 subaccount_id = 5;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.NewOrderReject.Reason}
 */
proto.trade.NewOrderReject.prototype.getReason = function() {
  return /** @type {!proto.trade.NewOrderReject.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.NewOrderReject.Reason} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 market_id = 7;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 price = 8;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.NewOrderReject.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 quantity = 9;
 * @return {number}
 */
proto.trade.NewOrderReject.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional Side side = 10;
 * @return {!proto.trade.Side}
 */
proto.trade.NewOrderReject.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional TimeInForce time_in_force = 11;
 * @return {!proto.trade.TimeInForce}
 */
proto.trade.NewOrderReject.prototype.getTimeInForce = function() {
  return /** @type {!proto.trade.TimeInForce} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.trade.TimeInForce} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setTimeInForce = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional OrderType order_type = 12;
 * @return {!proto.trade.OrderType}
 */
proto.trade.NewOrderReject.prototype.getOrderType = function() {
  return /** @type {!proto.trade.OrderType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.trade.OrderType} value
 * @return {!proto.trade.NewOrderReject} returns this
 */
proto.trade.NewOrderReject.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.CancelOrderReject.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.CancelOrderReject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.CancelOrderReject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrderReject.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.CancelOrderReject}
 */
proto.trade.CancelOrderReject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.CancelOrderReject;
  return proto.trade.CancelOrderReject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.CancelOrderReject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.CancelOrderReject}
 */
proto.trade.CancelOrderReject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.CancelOrderReject.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.CancelOrderReject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.CancelOrderReject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.CancelOrderReject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.CancelOrderReject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.CancelOrderReject.Reason = {
  UNCLASSIFIED: 0,
  INVALID_MARKET_ID: 1,
  ORDER_NOT_FOUND: 2
};

/**
 * optional uint64 msg_seq_num = 1;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getMsgSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setMsgSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_order_id = 2;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transact_time = 4;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 subaccount_id = 5;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.CancelOrderReject.Reason}
 */
proto.trade.CancelOrderReject.prototype.getReason = function() {
  return /** @type {!proto.trade.CancelOrderReject.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.CancelOrderReject.Reason} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 market_id = 7;
 * @return {number}
 */
proto.trade.CancelOrderReject.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.CancelOrderReject} returns this
 */
proto.trade.CancelOrderReject.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.ModifyOrderReject.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.ModifyOrderReject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.ModifyOrderReject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrderReject.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 6, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.ModifyOrderReject}
 */
proto.trade.ModifyOrderReject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.ModifyOrderReject;
  return proto.trade.ModifyOrderReject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.ModifyOrderReject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.ModifyOrderReject}
 */
proto.trade.ModifyOrderReject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.ModifyOrderReject.Reason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.ModifyOrderReject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.ModifyOrderReject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.ModifyOrderReject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.ModifyOrderReject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.trade.ModifyOrderReject.Reason = {
  UNCLASSIFIED: 0,
  INVALID_QUANTITY: 1,
  INVALID_MARKET_ID: 2,
  ORDER_NOT_FOUND: 3,
  INVALID_IFM: 4,
  INVALID_POST_ONLY: 5,
  INVALID_SELF_TRADE_PREVENTION: 6,
  UNKNOWN_TRADER: 7,
  EXCEEDED_SPOT_POSITION: 8,
  POST_ONLY_WOULD_TRADE: 9
};

/**
 * optional uint64 msg_seq_num = 1;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getMsgSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setMsgSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 client_order_id = 2;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 transact_time = 4;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 subaccount_id = 5;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Reason reason = 6;
 * @return {!proto.trade.ModifyOrderReject.Reason}
 */
proto.trade.ModifyOrderReject.prototype.getReason = function() {
  return /** @type {!proto.trade.ModifyOrderReject.Reason} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.ModifyOrderReject.Reason} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 market_id = 7;
 * @return {number}
 */
proto.trade.ModifyOrderReject.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.ModifyOrderReject} returns this
 */
proto.trade.ModifyOrderReject.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Fill.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Fill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Fill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Fill.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    exchangeOrderId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fillPrice: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fillQuantity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    leavesQuantity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    transactTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cumulativeQuantity: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Fill}
 */
proto.trade.Fill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Fill;
  return proto.trade.Fill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Fill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Fill}
 */
proto.trade.Fill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeOrderId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFillPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFillQuantity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLeavesQuantity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransactTime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCumulativeQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Fill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Fill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Fill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Fill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExchangeOrderId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFillPrice();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFillQuantity();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLeavesQuantity();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getCumulativeQuantity();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};


/**
 * optional uint64 msg_seq_num = 1;
 * @return {number}
 */
proto.trade.Fill.prototype.getMsgSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setMsgSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 market_id = 2;
 * @return {number}
 */
proto.trade.Fill.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 client_order_id = 3;
 * @return {number}
 */
proto.trade.Fill.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 exchange_order_id = 4;
 * @return {number}
 */
proto.trade.Fill.prototype.getExchangeOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setExchangeOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 fill_price = 5;
 * @return {number}
 */
proto.trade.Fill.prototype.getFillPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setFillPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 fill_quantity = 6;
 * @return {number}
 */
proto.trade.Fill.prototype.getFillQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setFillQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 leaves_quantity = 7;
 * @return {number}
 */
proto.trade.Fill.prototype.getLeavesQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setLeavesQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 transact_time = 8;
 * @return {number}
 */
proto.trade.Fill.prototype.getTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 subaccount_id = 9;
 * @return {number}
 */
proto.trade.Fill.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 cumulative_quantity = 10;
 * @return {number}
 */
proto.trade.Fill.prototype.getCumulativeQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Fill} returns this
 */
proto.trade.Fill.prototype.setCumulativeQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.AssetPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.AssetPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.AssetPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.AssetPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assetId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: (f = msg.getTotal()) && proto.trade.RawUnits.toObject(includeInstance, f),
    available: (f = msg.getAvailable()) && proto.trade.RawUnits.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.AssetPosition}
 */
proto.trade.AssetPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.AssetPosition;
  return proto.trade.AssetPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.AssetPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.AssetPosition}
 */
proto.trade.AssetPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssetId(value);
      break;
    case 3:
      var value = new proto.trade.RawUnits;
      reader.readMessage(value,proto.trade.RawUnits.deserializeBinaryFromReader);
      msg.setTotal(value);
      break;
    case 4:
      var value = new proto.trade.RawUnits;
      reader.readMessage(value,proto.trade.RawUnits.deserializeBinaryFromReader);
      msg.setAvailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.AssetPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.AssetPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.AssetPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.AssetPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAssetId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trade.RawUnits.serializeBinaryToWriter
    );
  }
  f = message.getAvailable();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.trade.RawUnits.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 subaccount_id = 1;
 * @return {number}
 */
proto.trade.AssetPosition.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.AssetPosition} returns this
 */
proto.trade.AssetPosition.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 asset_id = 2;
 * @return {number}
 */
proto.trade.AssetPosition.prototype.getAssetId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.AssetPosition} returns this
 */
proto.trade.AssetPosition.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RawUnits total = 3;
 * @return {?proto.trade.RawUnits}
 */
proto.trade.AssetPosition.prototype.getTotal = function() {
  return /** @type{?proto.trade.RawUnits} */ (
    jspb.Message.getWrapperField(this, proto.trade.RawUnits, 3));
};


/**
 * @param {?proto.trade.RawUnits|undefined} value
 * @return {!proto.trade.AssetPosition} returns this
*/
proto.trade.AssetPosition.prototype.setTotal = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.AssetPosition} returns this
 */
proto.trade.AssetPosition.prototype.clearTotal = function() {
  return this.setTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.AssetPosition.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RawUnits available = 4;
 * @return {?proto.trade.RawUnits}
 */
proto.trade.AssetPosition.prototype.getAvailable = function() {
  return /** @type{?proto.trade.RawUnits} */ (
    jspb.Message.getWrapperField(this, proto.trade.RawUnits, 4));
};


/**
 * @param {?proto.trade.RawUnits|undefined} value
 * @return {!proto.trade.AssetPosition} returns this
*/
proto.trade.AssetPosition.prototype.setAvailable = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.AssetPosition} returns this
 */
proto.trade.AssetPosition.prototype.clearAvailable = function() {
  return this.setAvailable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.AssetPosition.prototype.hasAvailable = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.RawUnits.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.RawUnits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.RawUnits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RawUnits.toObject = function(includeInstance, msg) {
  var f, obj = {
    word0: jspb.Message.getFieldWithDefault(msg, 1, 0),
    word1: jspb.Message.getFieldWithDefault(msg, 2, 0),
    word2: jspb.Message.getFieldWithDefault(msg, 3, 0),
    word3: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.RawUnits}
 */
proto.trade.RawUnits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.RawUnits;
  return proto.trade.RawUnits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.RawUnits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.RawUnits}
 */
proto.trade.RawUnits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWord0(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWord1(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWord2(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWord3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.RawUnits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.RawUnits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.RawUnits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RawUnits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord0();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWord1();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getWord2();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getWord3();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 word0 = 1;
 * @return {number}
 */
proto.trade.RawUnits.prototype.getWord0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RawUnits} returns this
 */
proto.trade.RawUnits.prototype.setWord0 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 word1 = 2;
 * @return {number}
 */
proto.trade.RawUnits.prototype.getWord1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RawUnits} returns this
 */
proto.trade.RawUnits.prototype.setWord1 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 word2 = 3;
 * @return {number}
 */
proto.trade.RawUnits.prototype.getWord2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RawUnits} returns this
 */
proto.trade.RawUnits.prototype.setWord2 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 word3 = 4;
 * @return {number}
 */
proto.trade.RawUnits.prototype.getWord3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RawUnits} returns this
 */
proto.trade.RawUnits.prototype.setWord3 = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.trade.Bootstrap.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.trade.Bootstrap.InnerCase = {
  INNER_NOT_SET: 0,
  DONE: 1,
  RESTING: 2,
  POSITION: 3
};

/**
 * @return {proto.trade.Bootstrap.InnerCase}
 */
proto.trade.Bootstrap.prototype.getInnerCase = function() {
  return /** @type {proto.trade.Bootstrap.InnerCase} */(jspb.Message.computeOneofCase(this, proto.trade.Bootstrap.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Bootstrap.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Bootstrap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Bootstrap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Bootstrap.toObject = function(includeInstance, msg) {
  var f, obj = {
    done: (f = msg.getDone()) && proto.trade.Done.toObject(includeInstance, f),
    resting: (f = msg.getResting()) && proto.trade.RestingOrders.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && proto.trade.AssetPositions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Bootstrap}
 */
proto.trade.Bootstrap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Bootstrap;
  return proto.trade.Bootstrap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Bootstrap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Bootstrap}
 */
proto.trade.Bootstrap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.Done;
      reader.readMessage(value,proto.trade.Done.deserializeBinaryFromReader);
      msg.setDone(value);
      break;
    case 2:
      var value = new proto.trade.RestingOrders;
      reader.readMessage(value,proto.trade.RestingOrders.deserializeBinaryFromReader);
      msg.setResting(value);
      break;
    case 3:
      var value = new proto.trade.AssetPositions;
      reader.readMessage(value,proto.trade.AssetPositions.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Bootstrap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Bootstrap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Bootstrap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Bootstrap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDone();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.trade.Done.serializeBinaryToWriter
    );
  }
  f = message.getResting();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trade.RestingOrders.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.trade.AssetPositions.serializeBinaryToWriter
    );
  }
};


/**
 * optional Done done = 1;
 * @return {?proto.trade.Done}
 */
proto.trade.Bootstrap.prototype.getDone = function() {
  return /** @type{?proto.trade.Done} */ (
    jspb.Message.getWrapperField(this, proto.trade.Done, 1));
};


/**
 * @param {?proto.trade.Done|undefined} value
 * @return {!proto.trade.Bootstrap} returns this
*/
proto.trade.Bootstrap.prototype.setDone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.trade.Bootstrap.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.Bootstrap} returns this
 */
proto.trade.Bootstrap.prototype.clearDone = function() {
  return this.setDone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.Bootstrap.prototype.hasDone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RestingOrders resting = 2;
 * @return {?proto.trade.RestingOrders}
 */
proto.trade.Bootstrap.prototype.getResting = function() {
  return /** @type{?proto.trade.RestingOrders} */ (
    jspb.Message.getWrapperField(this, proto.trade.RestingOrders, 2));
};


/**
 * @param {?proto.trade.RestingOrders|undefined} value
 * @return {!proto.trade.Bootstrap} returns this
*/
proto.trade.Bootstrap.prototype.setResting = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.trade.Bootstrap.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.Bootstrap} returns this
 */
proto.trade.Bootstrap.prototype.clearResting = function() {
  return this.setResting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.Bootstrap.prototype.hasResting = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AssetPositions position = 3;
 * @return {?proto.trade.AssetPositions}
 */
proto.trade.Bootstrap.prototype.getPosition = function() {
  return /** @type{?proto.trade.AssetPositions} */ (
    jspb.Message.getWrapperField(this, proto.trade.AssetPositions, 3));
};


/**
 * @param {?proto.trade.AssetPositions|undefined} value
 * @return {!proto.trade.Bootstrap} returns this
*/
proto.trade.Bootstrap.prototype.setPosition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.trade.Bootstrap.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.Bootstrap} returns this
 */
proto.trade.Bootstrap.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.Bootstrap.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trade.RestingOrders.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.RestingOrders.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.RestingOrders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.RestingOrders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RestingOrders.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.trade.RestingOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.RestingOrders}
 */
proto.trade.RestingOrders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.RestingOrders;
  return proto.trade.RestingOrders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.RestingOrders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.RestingOrders}
 */
proto.trade.RestingOrders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.RestingOrder;
      reader.readMessage(value,proto.trade.RestingOrder.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.RestingOrders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.RestingOrders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.RestingOrders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RestingOrders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.trade.RestingOrder.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RestingOrder orders = 1;
 * @return {!Array<!proto.trade.RestingOrder>}
 */
proto.trade.RestingOrders.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.trade.RestingOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.trade.RestingOrder, 1));
};


/**
 * @param {!Array<!proto.trade.RestingOrder>} value
 * @return {!proto.trade.RestingOrders} returns this
*/
proto.trade.RestingOrders.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.trade.RestingOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trade.RestingOrder}
 */
proto.trade.RestingOrders.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.trade.RestingOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.trade.RestingOrders} returns this
 */
proto.trade.RestingOrders.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trade.AssetPositions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.AssetPositions.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.AssetPositions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.AssetPositions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.AssetPositions.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.trade.AssetPosition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.AssetPositions}
 */
proto.trade.AssetPositions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.AssetPositions;
  return proto.trade.AssetPositions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.AssetPositions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.AssetPositions}
 */
proto.trade.AssetPositions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.trade.AssetPosition;
      reader.readMessage(value,proto.trade.AssetPosition.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.AssetPositions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.AssetPositions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.AssetPositions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.AssetPositions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.trade.AssetPosition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssetPosition positions = 1;
 * @return {!Array<!proto.trade.AssetPosition>}
 */
proto.trade.AssetPositions.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.trade.AssetPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.trade.AssetPosition, 1));
};


/**
 * @param {!Array<!proto.trade.AssetPosition>} value
 * @return {!proto.trade.AssetPositions} returns this
*/
proto.trade.AssetPositions.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.trade.AssetPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trade.AssetPosition}
 */
proto.trade.AssetPositions.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.trade.AssetPosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.trade.AssetPositions} returns this
 */
proto.trade.AssetPositions.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.Done.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.Done.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.Done} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Done.toObject = function(includeInstance, msg) {
  var f, obj = {
    latestTransactTime: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Done}
 */
proto.trade.Done.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.Done;
  return proto.trade.Done.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Done} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Done}
 */
proto.trade.Done.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestTransactTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Done.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.Done.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Done} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Done.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatestTransactTime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 latest_transact_time = 1;
 * @return {number}
 */
proto.trade.Done.prototype.getLatestTransactTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.Done} returns this
 */
proto.trade.Done.prototype.setLatestTransactTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.trade.RestingOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.trade.RestingOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.trade.RestingOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RestingOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientOrderId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exchangeOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    price: jspb.Message.getFieldWithDefault(msg, 4, 0),
    orderQuantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    side: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timeInForce: jspb.Message.getFieldWithDefault(msg, 7, 0),
    orderType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    remainingQuantity: jspb.Message.getFieldWithDefault(msg, 9, 0),
    restTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    cumulativeQuantity: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.RestingOrder}
 */
proto.trade.RestingOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trade.RestingOrder;
  return proto.trade.RestingOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.RestingOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.RestingOrder}
 */
proto.trade.RestingOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientOrderId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangeOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarketId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderQuantity(value);
      break;
    case 6:
      var value = /** @type {!proto.trade.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 7:
      var value = /** @type {!proto.trade.TimeInForce} */ (reader.readEnum());
      msg.setTimeInForce(value);
      break;
    case 8:
      var value = /** @type {!proto.trade.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemainingQuantity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRestTime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubaccountId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCumulativeQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.RestingOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trade.RestingOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.RestingOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.RestingOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientOrderId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getExchangeOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOrderQuantity();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTimeInForce();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getRemainingQuantity();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getRestTime();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getSubaccountId();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getCumulativeQuantity();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
};


/**
 * optional uint64 client_order_id = 1;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getClientOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setClientOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 exchange_order_id = 2;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getExchangeOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setExchangeOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 market_id = 3;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 price = 4;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 order_quantity = 5;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getOrderQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setOrderQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Side side = 6;
 * @return {!proto.trade.Side}
 */
proto.trade.RestingOrder.prototype.getSide = function() {
  return /** @type {!proto.trade.Side} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.trade.Side} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional TimeInForce time_in_force = 7;
 * @return {!proto.trade.TimeInForce}
 */
proto.trade.RestingOrder.prototype.getTimeInForce = function() {
  return /** @type {!proto.trade.TimeInForce} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.trade.TimeInForce} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setTimeInForce = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional OrderType order_type = 8;
 * @return {!proto.trade.OrderType}
 */
proto.trade.RestingOrder.prototype.getOrderType = function() {
  return /** @type {!proto.trade.OrderType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.trade.OrderType} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional uint64 remaining_quantity = 9;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getRemainingQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setRemainingQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 rest_time = 10;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getRestTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setRestTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 subaccount_id = 11;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getSubaccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 cumulative_quantity = 12;
 * @return {number}
 */
proto.trade.RestingOrder.prototype.getCumulativeQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.trade.RestingOrder} returns this
 */
proto.trade.RestingOrder.prototype.setCumulativeQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * @enum {number}
 */
proto.trade.Side = {
  BID: 0,
  ASK: 1
};

/**
 * @enum {number}
 */
proto.trade.TimeInForce = {
  IMMEDIATE_OR_CANCEL: 0,
  GOOD_FOR_SESSION: 1,
  FILL_OR_KILL: 2
};

/**
 * @enum {number}
 */
proto.trade.OrderType = {
  LIMIT: 0,
  MARKET_LIMIT: 1,
  MARKET_WITH_PROTECTION: 2
};

/**
 * @enum {number}
 */
proto.trade.SelfTradePrevention = {
  CANCEL_RESTING: 0,
  CANCEL_AGGRESSING: 1,
  ALLOW_SELF_TRADE: 2
};

/**
 * @enum {number}
 */
proto.trade.PostOnly = {
  DISABLED: 0,
  ENABLED: 1
};

goog.object.extend(exports, proto.trade);
