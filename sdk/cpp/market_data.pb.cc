// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#include "market_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace market_data {
constexpr MdMessage::MdMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MdMessageDefaultTypeInternal {
  constexpr MdMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MdMessageDefaultTypeInternal() {}
  union {
    MdMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MdMessageDefaultTypeInternal _MdMessage_default_instance_;
constexpr MarketByPrice_Level::MarketByPrice_Level(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , side_(0)
{}
struct MarketByPrice_LevelDefaultTypeInternal {
  constexpr MarketByPrice_LevelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByPrice_LevelDefaultTypeInternal() {}
  union {
    MarketByPrice_Level _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByPrice_LevelDefaultTypeInternal _MarketByPrice_Level_default_instance_;
constexpr MarketByPrice::MarketByPrice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : levels_()
  , chunk_(0u)
  , num_chunks_(0u){}
struct MarketByPriceDefaultTypeInternal {
  constexpr MarketByPriceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByPriceDefaultTypeInternal() {}
  union {
    MarketByPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByPriceDefaultTypeInternal _MarketByPrice_default_instance_;
constexpr MarketByPriceDiff_Diff::MarketByPriceDiff_Diff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , side_(0)

  , op_(0)
{}
struct MarketByPriceDiff_DiffDefaultTypeInternal {
  constexpr MarketByPriceDiff_DiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByPriceDiff_DiffDefaultTypeInternal() {}
  union {
    MarketByPriceDiff_Diff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByPriceDiff_DiffDefaultTypeInternal _MarketByPriceDiff_Diff_default_instance_;
constexpr MarketByPriceDiff::MarketByPriceDiff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diffs_()
  , total_bid_levels_(0u)
  , total_ask_levels_(0u){}
struct MarketByPriceDiffDefaultTypeInternal {
  constexpr MarketByPriceDiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByPriceDiffDefaultTypeInternal() {}
  union {
    MarketByPriceDiff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByPriceDiffDefaultTypeInternal _MarketByPriceDiff_default_instance_;
constexpr MarketByOrder_Order::MarketByOrder_Order(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , exchange_order_id_(PROTOBUF_ULONGLONG(0))
  , priority_(PROTOBUF_ULONGLONG(0))
  , side_(0)
{}
struct MarketByOrder_OrderDefaultTypeInternal {
  constexpr MarketByOrder_OrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByOrder_OrderDefaultTypeInternal() {}
  union {
    MarketByOrder_Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByOrder_OrderDefaultTypeInternal _MarketByOrder_Order_default_instance_;
constexpr MarketByOrder::MarketByOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_()
  , chunk_(0u)
  , num_chunks_(0u){}
struct MarketByOrderDefaultTypeInternal {
  constexpr MarketByOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByOrderDefaultTypeInternal() {}
  union {
    MarketByOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByOrderDefaultTypeInternal _MarketByOrder_default_instance_;
constexpr MarketByOrderDiff_Diff::MarketByOrderDiff_Diff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(PROTOBUF_ULONGLONG(0))
  , quantity_(PROTOBUF_ULONGLONG(0))
  , exchange_order_id_(PROTOBUF_ULONGLONG(0))
  , side_(0)

  , op_(0)

  , priority_(PROTOBUF_ULONGLONG(0)){}
struct MarketByOrderDiff_DiffDefaultTypeInternal {
  constexpr MarketByOrderDiff_DiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByOrderDiff_DiffDefaultTypeInternal() {}
  union {
    MarketByOrderDiff_Diff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByOrderDiff_DiffDefaultTypeInternal _MarketByOrderDiff_Diff_default_instance_;
constexpr MarketByOrderDiff::MarketByOrderDiff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diffs_()
  , total_bid_levels_(0u)
  , total_ask_levels_(0u)
  , total_bid_orders_(0u)
  , total_ask_orders_(0u){}
struct MarketByOrderDiffDefaultTypeInternal {
  constexpr MarketByOrderDiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketByOrderDiffDefaultTypeInternal() {}
  union {
    MarketByOrderDiff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketByOrderDiffDefaultTypeInternal _MarketByOrderDiff_default_instance_;
constexpr Trades_Trade::Trades_Trade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tradeid_(PROTOBUF_ULONGLONG(0))
  , price_(PROTOBUF_ULONGLONG(0))
  , resting_exchange_order_id_(PROTOBUF_ULONGLONG(0))
  , fill_quantity_(PROTOBUF_ULONGLONG(0))
  , transact_time_(PROTOBUF_ULONGLONG(0))
  , aggressing_exchange_order_id_(PROTOBUF_ULONGLONG(0))
  , aggressing_side_(0)
{}
struct Trades_TradeDefaultTypeInternal {
  constexpr Trades_TradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Trades_TradeDefaultTypeInternal() {}
  union {
    Trades_Trade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Trades_TradeDefaultTypeInternal _Trades_Trade_default_instance_;
constexpr Trades::Trades(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trades_(){}
struct TradesDefaultTypeInternal {
  constexpr TradesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TradesDefaultTypeInternal() {}
  union {
    Trades _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TradesDefaultTypeInternal _Trades_default_instance_;
constexpr Summary::Summary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : open_(PROTOBUF_ULONGLONG(0))
  , close_(PROTOBUF_ULONGLONG(0))
  , low_(PROTOBUF_ULONGLONG(0))
  , high_(PROTOBUF_ULONGLONG(0))
  , base_volume_lo_(PROTOBUF_ULONGLONG(0))
  , base_volume_hi_(PROTOBUF_ULONGLONG(0))
  , quote_volume_lo_(PROTOBUF_ULONGLONG(0))
  , quote_volume_hi_(PROTOBUF_ULONGLONG(0)){}
struct SummaryDefaultTypeInternal {
  constexpr SummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryDefaultTypeInternal() {}
  union {
    Summary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryDefaultTypeInternal _Summary_default_instance_;
constexpr Kline::Kline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_time_(PROTOBUF_ULONGLONG(0))
  , open_(PROTOBUF_ULONGLONG(0))
  , close_(PROTOBUF_ULONGLONG(0))
  , high_(PROTOBUF_ULONGLONG(0))
  , low_(PROTOBUF_ULONGLONG(0))
  , volume_lo_(PROTOBUF_ULONGLONG(0))
  , volume_hi_(PROTOBUF_ULONGLONG(0))
  , interval_(0)
{}
struct KlineDefaultTypeInternal {
  constexpr KlineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KlineDefaultTypeInternal() {}
  union {
    Kline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KlineDefaultTypeInternal _Kline_default_instance_;
constexpr Heartbeat::Heartbeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(PROTOBUF_ULONGLONG(0))
  , timestamp_(PROTOBUF_ULONGLONG(0)){}
struct HeartbeatDefaultTypeInternal {
  constexpr HeartbeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
constexpr MdMessages::MdMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct MdMessagesDefaultTypeInternal {
  constexpr MdMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MdMessagesDefaultTypeInternal() {}
  union {
    MdMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MdMessagesDefaultTypeInternal _MdMessages_default_instance_;
constexpr AggMessage::AggMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AggMessageDefaultTypeInternal {
  constexpr AggMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggMessageDefaultTypeInternal() {}
  union {
    AggMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggMessageDefaultTypeInternal _AggMessage_default_instance_;
constexpr TopOfBook::TopOfBook(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : market_id_(PROTOBUF_ULONGLONG(0))
  , transact_time_(PROTOBUF_ULONGLONG(0))
  , bid_price_(PROTOBUF_ULONGLONG(0))
  , bid_quantity_(PROTOBUF_ULONGLONG(0))
  , ask_price_(PROTOBUF_ULONGLONG(0))
  , ask_quantity_(PROTOBUF_ULONGLONG(0))
  , last_price_(PROTOBUF_ULONGLONG(0))
  , rolling24h_price_(PROTOBUF_ULONGLONG(0)){}
struct TopOfBookDefaultTypeInternal {
  constexpr TopOfBookDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopOfBookDefaultTypeInternal() {}
  union {
    TopOfBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopOfBookDefaultTypeInternal _TopOfBook_default_instance_;
constexpr TopOfBooks::TopOfBooks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tops_(){}
struct TopOfBooksDefaultTypeInternal {
  constexpr TopOfBooksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopOfBooksDefaultTypeInternal() {}
  union {
    TopOfBooks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopOfBooksDefaultTypeInternal _TopOfBooks_default_instance_;
constexpr RateUpdate::RateUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_id_(PROTOBUF_ULONGLONG(0))
  , timestamp_(PROTOBUF_ULONGLONG(0))
  , rate_(PROTOBUF_ULONGLONG(0))
  , side_(0)
{}
struct RateUpdateDefaultTypeInternal {
  constexpr RateUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RateUpdateDefaultTypeInternal() {}
  union {
    RateUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RateUpdateDefaultTypeInternal _RateUpdate_default_instance_;
constexpr RateUpdates::RateUpdates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_(){}
struct RateUpdatesDefaultTypeInternal {
  constexpr RateUpdatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RateUpdatesDefaultTypeInternal() {}
  union {
    RateUpdates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RateUpdatesDefaultTypeInternal _RateUpdates_default_instance_;
constexpr ClientMessage::ClientMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ClientMessageDefaultTypeInternal {
  constexpr ClientMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientMessageDefaultTypeInternal() {}
  union {
    ClientMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
constexpr Config::Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : klines_()
  , _klines_cached_byte_size_()
  , mbp_(false)
  , mbo_(false)
  , trades_(false)
  , summary_(false){}
struct ConfigDefaultTypeInternal {
  constexpr ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace market_data
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_market_5fdata_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_market_5fdata_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_market_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_market_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MdMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::market_data::MdMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::market_data::MdMessage, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPrice_Level, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPrice_Level, price_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPrice_Level, quantity_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPrice_Level, side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPrice, levels_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPrice, chunk_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPrice, num_chunks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff_Diff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff_Diff, price_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff_Diff, quantity_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff_Diff, side_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff_Diff, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff, diffs_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff, total_bid_levels_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByPriceDiff, total_ask_levels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder_Order, price_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder_Order, quantity_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder_Order, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder_Order, side_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder_Order, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder, orders_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder, chunk_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrder, num_chunks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff_Diff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff_Diff, price_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff_Diff, quantity_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff_Diff, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff_Diff, side_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff_Diff, op_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff_Diff, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff, diffs_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff, total_bid_levels_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff, total_ask_levels_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff, total_bid_orders_),
  PROTOBUF_FIELD_OFFSET(::market_data::MarketByOrderDiff, total_ask_orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::Trades_Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::Trades_Trade, tradeid_),
  PROTOBUF_FIELD_OFFSET(::market_data::Trades_Trade, price_),
  PROTOBUF_FIELD_OFFSET(::market_data::Trades_Trade, aggressing_side_),
  PROTOBUF_FIELD_OFFSET(::market_data::Trades_Trade, resting_exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::market_data::Trades_Trade, fill_quantity_),
  PROTOBUF_FIELD_OFFSET(::market_data::Trades_Trade, transact_time_),
  PROTOBUF_FIELD_OFFSET(::market_data::Trades_Trade, aggressing_exchange_order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::Trades, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::Trades, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, open_),
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, close_),
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, low_),
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, high_),
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, base_volume_lo_),
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, base_volume_hi_),
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, quote_volume_lo_),
  PROTOBUF_FIELD_OFFSET(::market_data::Summary, quote_volume_hi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, interval_),
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, start_time_),
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, open_),
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, close_),
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, high_),
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, low_),
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, volume_lo_),
  PROTOBUF_FIELD_OFFSET(::market_data::Kline, volume_hi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::Heartbeat, request_id_),
  PROTOBUF_FIELD_OFFSET(::market_data::Heartbeat, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::MdMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::MdMessages, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::AggMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::market_data::AggMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::market_data::AggMessage, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, market_id_),
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, transact_time_),
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, bid_price_),
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, bid_quantity_),
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, ask_price_),
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, ask_quantity_),
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, last_price_),
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBook, rolling24h_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBooks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::TopOfBooks, tops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::RateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::RateUpdate, asset_id_),
  PROTOBUF_FIELD_OFFSET(::market_data::RateUpdate, timestamp_),
  PROTOBUF_FIELD_OFFSET(::market_data::RateUpdate, rate_),
  PROTOBUF_FIELD_OFFSET(::market_data::RateUpdate, side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::RateUpdates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::RateUpdates, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::market_data::ClientMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::market_data::ClientMessage, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::market_data::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market_data::Config, mbp_),
  PROTOBUF_FIELD_OFFSET(::market_data::Config, mbo_),
  PROTOBUF_FIELD_OFFSET(::market_data::Config, trades_),
  PROTOBUF_FIELD_OFFSET(::market_data::Config, summary_),
  PROTOBUF_FIELD_OFFSET(::market_data::Config, klines_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::market_data::MdMessage)},
  { 14, -1, sizeof(::market_data::MarketByPrice_Level)},
  { 22, -1, sizeof(::market_data::MarketByPrice)},
  { 30, -1, sizeof(::market_data::MarketByPriceDiff_Diff)},
  { 39, -1, sizeof(::market_data::MarketByPriceDiff)},
  { 47, -1, sizeof(::market_data::MarketByOrder_Order)},
  { 57, -1, sizeof(::market_data::MarketByOrder)},
  { 65, -1, sizeof(::market_data::MarketByOrderDiff_Diff)},
  { 76, -1, sizeof(::market_data::MarketByOrderDiff)},
  { 86, -1, sizeof(::market_data::Trades_Trade)},
  { 98, -1, sizeof(::market_data::Trades)},
  { 104, -1, sizeof(::market_data::Summary)},
  { 117, -1, sizeof(::market_data::Kline)},
  { 130, -1, sizeof(::market_data::Heartbeat)},
  { 137, -1, sizeof(::market_data::MdMessages)},
  { 143, -1, sizeof(::market_data::AggMessage)},
  { 152, -1, sizeof(::market_data::TopOfBook)},
  { 165, -1, sizeof(::market_data::TopOfBooks)},
  { 171, -1, sizeof(::market_data::RateUpdate)},
  { 180, -1, sizeof(::market_data::RateUpdates)},
  { 186, -1, sizeof(::market_data::ClientMessage)},
  { 194, -1, sizeof(::market_data::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MdMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MarketByPrice_Level_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MarketByPrice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MarketByPriceDiff_Diff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MarketByPriceDiff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MarketByOrder_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MarketByOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MarketByOrderDiff_Diff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MarketByOrderDiff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_Trades_Trade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_Trades_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_Summary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_Kline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_MdMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_AggMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_TopOfBook_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_TopOfBooks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_RateUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_RateUpdates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_ClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market_data::_Config_default_instance_),
};

const char descriptor_table_protodef_market_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021market_data.proto\022\013market_data\"\206\003\n\tMdM"
  "essage\022+\n\theartbeat\030\001 \001(\0132\026.market_data."
  "HeartbeatH\000\022\'\n\007summary\030\002 \001(\0132\024.market_da"
  "ta.SummaryH\000\022%\n\006trades\030\003 \001(\0132\023.market_da"
  "ta.TradesH\000\0222\n\014mbo_snapshot\030\004 \001(\0132\032.mark"
  "et_data.MarketByOrderH\000\0222\n\010mbo_diff\030\005 \001("
  "\0132\036.market_data.MarketByOrderDiffH\000\0222\n\014m"
  "bp_snapshot\030\006 \001(\0132\032.market_data.MarketBy"
  "PriceH\000\0222\n\010mbp_diff\030\007 \001(\0132\036.market_data."
  "MarketByPriceDiffH\000\022#\n\005kline\030\010 \001(\0132\022.mar"
  "ket_data.KlineH\000B\007\n\005inner\"\257\001\n\rMarketByPr"
  "ice\0220\n\006levels\030\001 \003(\0132 .market_data.Market"
  "ByPrice.Level\022\r\n\005chunk\030\002 \001(\r\022\022\n\nnum_chun"
  "ks\030\003 \001(\r\032I\n\005Level\022\r\n\005price\030\001 \001(\004\022\020\n\010quan"
  "tity\030\002 \001(\004\022\037\n\004side\030\003 \001(\0162\021.market_data.S"
  "ide\"\244\002\n\021MarketByPriceDiff\0222\n\005diffs\030\001 \003(\013"
  "2#.market_data.MarketByPriceDiff.Diff\022\030\n"
  "\020total_bid_levels\030\002 \001(\r\022\030\n\020total_ask_lev"
  "els\030\003 \001(\r\032{\n\004Diff\022\r\n\005price\030\001 \001(\004\022\020\n\010quan"
  "tity\030\002 \001(\004\022\037\n\004side\030\003 \001(\0162\021.market_data.S"
  "ide\0221\n\002op\030\004 \001(\0162%.market_data.MarketByPr"
  "iceDiff.DiffOp\"*\n\006DiffOp\022\007\n\003ADD\020\000\022\n\n\006REM"
  "OVE\020\001\022\013\n\007REPLACE\020\002\"\334\001\n\rMarketByOrder\0220\n\006"
  "orders\030\001 \003(\0132 .market_data.MarketByOrder"
  ".Order\022\r\n\005chunk\030\002 \001(\r\022\022\n\nnum_chunks\030\003 \001("
  "\r\032v\n\005Order\022\r\n\005price\030\001 \001(\004\022\020\n\010quantity\030\002 "
  "\001(\004\022\031\n\021exchange_order_id\030\003 \001(\004\022\037\n\004side\030\004"
  " \001(\0162\021.market_data.Side\022\020\n\010priority\030\005 \001("
  "\004\"\206\003\n\021MarketByOrderDiff\0222\n\005diffs\030\001 \003(\0132#"
  ".market_data.MarketByOrderDiff.Diff\022\030\n\020t"
  "otal_bid_levels\030\002 \001(\r\022\030\n\020total_ask_level"
  "s\030\003 \001(\r\022\030\n\020total_bid_orders\030\004 \001(\r\022\030\n\020tot"
  "al_ask_orders\030\005 \001(\r\032\250\001\n\004Diff\022\r\n\005price\030\001 "
  "\001(\004\022\020\n\010quantity\030\002 \001(\004\022\031\n\021exchange_order_"
  "id\030\003 \001(\004\022\037\n\004side\030\004 \001(\0162\021.market_data.Sid"
  "e\0221\n\002op\030\005 \001(\0162%.market_data.MarketByOrde"
  "rDiff.DiffOp\022\020\n\010priority\030\006 \001(\004\"*\n\006DiffOp"
  "\022\007\n\003ADD\020\000\022\n\n\006REMOVE\020\001\022\013\n\007REPLACE\020\002\"\200\002\n\006T"
  "rades\022)\n\006trades\030\001 \003(\0132\031.market_data.Trad"
  "es.Trade\032\312\001\n\005Trade\022\017\n\007tradeId\030\001 \001(\004\022\r\n\005p"
  "rice\030\002 \001(\004\022*\n\017aggressing_side\030\003 \001(\0162\021.ma"
  "rket_data.Side\022!\n\031resting_exchange_order"
  "_id\030\004 \001(\004\022\025\n\rfill_quantity\030\005 \001(\004\022\025\n\rtran"
  "sact_time\030\006 \001(\004\022$\n\034aggressing_exchange_o"
  "rder_id\030\007 \001(\004\"\243\001\n\007Summary\022\014\n\004open\030\001 \001(\004\022"
  "\r\n\005close\030\002 \001(\004\022\013\n\003low\030\003 \001(\004\022\014\n\004high\030\004 \001("
  "\004\022\026\n\016base_volume_lo\030\005 \001(\004\022\026\n\016base_volume"
  "_hi\030\006 \001(\004\022\027\n\017quote_volume_lo\030\007 \001(\004\022\027\n\017qu"
  "ote_volume_hi\030\010 \001(\004\"\247\001\n\005Kline\022,\n\010interva"
  "l\030\001 \001(\0162\032.market_data.KlineInterval\022\022\n\ns"
  "tart_time\030\002 \001(\004\022\014\n\004open\030\003 \001(\004\022\r\n\005close\030\004"
  " \001(\004\022\014\n\004high\030\005 \001(\004\022\013\n\003low\030\006 \001(\004\022\021\n\tvolum"
  "e_lo\030\007 \001(\004\022\021\n\tvolume_hi\030\010 \001(\004\"2\n\tHeartbe"
  "at\022\022\n\nrequest_id\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001("
  "\004\"6\n\nMdMessages\022(\n\010messages\030\001 \003(\0132\026.mark"
  "et_data.MdMessage\"\245\001\n\nAggMessage\022+\n\thear"
  "tbeat\030\001 \001(\0132\026.market_data.HeartbeatH\000\022/\n"
  "\014top_of_books\030\002 \001(\0132\027.market_data.TopOfB"
  "ooksH\000\0220\n\014rate_updates\030\003 \001(\0132\030.market_da"
  "ta.RateUpdatesH\000B\007\n\005inner\"\265\001\n\tTopOfBook\022"
  "\021\n\tmarket_id\030\001 \001(\004\022\025\n\rtransact_time\030\002 \001("
  "\004\022\021\n\tbid_price\030\003 \001(\004\022\024\n\014bid_quantity\030\004 \001"
  "(\004\022\021\n\task_price\030\005 \001(\004\022\024\n\014ask_quantity\030\006 "
  "\001(\004\022\022\n\nlast_price\030\007 \001(\004\022\030\n\020rolling24h_pr"
  "ice\030\010 \001(\004\"2\n\nTopOfBooks\022$\n\004tops\030\001 \003(\0132\026."
  "market_data.TopOfBook\"j\n\nRateUpdate\022\020\n\010a"
  "sset_id\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\004\022\014\n\004rate"
  "\030\003 \001(\004\022)\n\004side\030\004 \001(\0162\033.market_data.RateU"
  "pdateSide\"7\n\013RateUpdates\022(\n\007updates\030\001 \003("
  "\0132\027.market_data.RateUpdate\"l\n\rClientMess"
  "age\022+\n\theartbeat\030\001 \001(\0132\026.market_data.Hea"
  "rtbeatH\000\022%\n\006config\030\002 \001(\0132\023.market_data.C"
  "onfigH\000B\007\n\005inner\"o\n\006Config\022\013\n\003mbp\030\001 \001(\010\022"
  "\013\n\003mbo\030\002 \001(\010\022\016\n\006trades\030\003 \001(\010\022\017\n\007summary\030"
  "\004 \001(\010\022*\n\006klines\030\005 \003(\0162\032.market_data.Klin"
  "eInterval*\030\n\004Side\022\007\n\003BID\020\000\022\007\n\003ASK\020\001*@\n\rK"
  "lineInterval\022\006\n\002S1\020\000\022\006\n\002M1\020\001\022\007\n\003M15\020\002\022\006\n"
  "\002H1\020\003\022\006\n\002H4\020\004\022\006\n\002D1\020\005*%\n\016RateUpdateSide\022"
  "\010\n\004BASE\020\000\022\t\n\005QUOTE\020\001B\027Z\003go/\252\002\017Cube.Marke"
  "tDatab\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_market_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto = {
  false, false, 3173, descriptor_table_protodef_market_5fdata_2eproto, "market_data.proto", 
  &descriptor_table_market_5fdata_2eproto_once, nullptr, 0, 22,
  schemas, file_default_instances, TableStruct_market_5fdata_2eproto::offsets,
  file_level_metadata_market_5fdata_2eproto, file_level_enum_descriptors_market_5fdata_2eproto, file_level_service_descriptors_market_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_market_5fdata_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return descriptor_table_market_5fdata_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_market_5fdata_2eproto(&descriptor_table_market_5fdata_2eproto);
namespace market_data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByPriceDiff_DiffOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[0];
}
bool MarketByPriceDiff_DiffOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::ADD;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::REMOVE;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::REPLACE;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::DiffOp_MIN;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff::DiffOp_MAX;
constexpr int MarketByPriceDiff::DiffOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByOrderDiff_DiffOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[1];
}
bool MarketByOrderDiff_DiffOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MarketByOrderDiff_DiffOp MarketByOrderDiff::ADD;
constexpr MarketByOrderDiff_DiffOp MarketByOrderDiff::REMOVE;
constexpr MarketByOrderDiff_DiffOp MarketByOrderDiff::REPLACE;
constexpr MarketByOrderDiff_DiffOp MarketByOrderDiff::DiffOp_MIN;
constexpr MarketByOrderDiff_DiffOp MarketByOrderDiff::DiffOp_MAX;
constexpr int MarketByOrderDiff::DiffOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[2];
}
bool Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KlineInterval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[3];
}
bool KlineInterval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RateUpdateSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_5fdata_2eproto);
  return file_level_enum_descriptors_market_5fdata_2eproto[4];
}
bool RateUpdateSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MdMessage::_Internal {
 public:
  static const ::market_data::Heartbeat& heartbeat(const MdMessage* msg);
  static const ::market_data::Summary& summary(const MdMessage* msg);
  static const ::market_data::Trades& trades(const MdMessage* msg);
  static const ::market_data::MarketByOrder& mbo_snapshot(const MdMessage* msg);
  static const ::market_data::MarketByOrderDiff& mbo_diff(const MdMessage* msg);
  static const ::market_data::MarketByPrice& mbp_snapshot(const MdMessage* msg);
  static const ::market_data::MarketByPriceDiff& mbp_diff(const MdMessage* msg);
  static const ::market_data::Kline& kline(const MdMessage* msg);
};

const ::market_data::Heartbeat&
MdMessage::_Internal::heartbeat(const MdMessage* msg) {
  return *msg->inner_.heartbeat_;
}
const ::market_data::Summary&
MdMessage::_Internal::summary(const MdMessage* msg) {
  return *msg->inner_.summary_;
}
const ::market_data::Trades&
MdMessage::_Internal::trades(const MdMessage* msg) {
  return *msg->inner_.trades_;
}
const ::market_data::MarketByOrder&
MdMessage::_Internal::mbo_snapshot(const MdMessage* msg) {
  return *msg->inner_.mbo_snapshot_;
}
const ::market_data::MarketByOrderDiff&
MdMessage::_Internal::mbo_diff(const MdMessage* msg) {
  return *msg->inner_.mbo_diff_;
}
const ::market_data::MarketByPrice&
MdMessage::_Internal::mbp_snapshot(const MdMessage* msg) {
  return *msg->inner_.mbp_snapshot_;
}
const ::market_data::MarketByPriceDiff&
MdMessage::_Internal::mbp_diff(const MdMessage* msg) {
  return *msg->inner_.mbp_diff_;
}
const ::market_data::Kline&
MdMessage::_Internal::kline(const MdMessage* msg) {
  return *msg->inner_.kline_;
}
void MdMessage::set_allocated_heartbeat(::market_data::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.MdMessage.heartbeat)
}
void MdMessage::set_allocated_summary(::market_data::Summary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    inner_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.MdMessage.summary)
}
void MdMessage::set_allocated_trades(::market_data::Trades* trades) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (trades) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trades);
    if (message_arena != submessage_arena) {
      trades = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trades, submessage_arena);
    }
    set_has_trades();
    inner_.trades_ = trades;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.MdMessage.trades)
}
void MdMessage::set_allocated_mbo_snapshot(::market_data::MarketByOrder* mbo_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mbo_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mbo_snapshot);
    if (message_arena != submessage_arena) {
      mbo_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbo_snapshot, submessage_arena);
    }
    set_has_mbo_snapshot();
    inner_.mbo_snapshot_ = mbo_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.MdMessage.mbo_snapshot)
}
void MdMessage::set_allocated_mbo_diff(::market_data::MarketByOrderDiff* mbo_diff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mbo_diff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mbo_diff);
    if (message_arena != submessage_arena) {
      mbo_diff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbo_diff, submessage_arena);
    }
    set_has_mbo_diff();
    inner_.mbo_diff_ = mbo_diff;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.MdMessage.mbo_diff)
}
void MdMessage::set_allocated_mbp_snapshot(::market_data::MarketByPrice* mbp_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mbp_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mbp_snapshot);
    if (message_arena != submessage_arena) {
      mbp_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbp_snapshot, submessage_arena);
    }
    set_has_mbp_snapshot();
    inner_.mbp_snapshot_ = mbp_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.MdMessage.mbp_snapshot)
}
void MdMessage::set_allocated_mbp_diff(::market_data::MarketByPriceDiff* mbp_diff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (mbp_diff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mbp_diff);
    if (message_arena != submessage_arena) {
      mbp_diff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbp_diff, submessage_arena);
    }
    set_has_mbp_diff();
    inner_.mbp_diff_ = mbp_diff;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.MdMessage.mbp_diff)
}
void MdMessage::set_allocated_kline(::market_data::Kline* kline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (kline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kline);
    if (message_arena != submessage_arena) {
      kline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kline, submessage_arena);
    }
    set_has_kline();
    inner_.kline_ = kline;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.MdMessage.kline)
}
MdMessage::MdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MdMessage)
}
MdMessage::MdMessage(const MdMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::market_data::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::market_data::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case kTrades: {
      _internal_mutable_trades()->::market_data::Trades::MergeFrom(from._internal_trades());
      break;
    }
    case kMboSnapshot: {
      _internal_mutable_mbo_snapshot()->::market_data::MarketByOrder::MergeFrom(from._internal_mbo_snapshot());
      break;
    }
    case kMboDiff: {
      _internal_mutable_mbo_diff()->::market_data::MarketByOrderDiff::MergeFrom(from._internal_mbo_diff());
      break;
    }
    case kMbpSnapshot: {
      _internal_mutable_mbp_snapshot()->::market_data::MarketByPrice::MergeFrom(from._internal_mbp_snapshot());
      break;
    }
    case kMbpDiff: {
      _internal_mutable_mbp_diff()->::market_data::MarketByPriceDiff::MergeFrom(from._internal_mbp_diff());
      break;
    }
    case kKline: {
      _internal_mutable_kline()->::market_data::Kline::MergeFrom(from._internal_kline());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:market_data.MdMessage)
}

void MdMessage::SharedCtor() {
clear_has_inner();
}

MdMessage::~MdMessage() {
  // @@protoc_insertion_point(destructor:market_data.MdMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MdMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void MdMessage::ArenaDtor(void* object) {
  MdMessage* _this = reinterpret_cast< MdMessage* >(object);
  (void)_this;
}
void MdMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MdMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MdMessage::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:market_data.MdMessage)
  switch (inner_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete inner_.heartbeat_;
      }
      break;
    }
    case kSummary: {
      if (GetArena() == nullptr) {
        delete inner_.summary_;
      }
      break;
    }
    case kTrades: {
      if (GetArena() == nullptr) {
        delete inner_.trades_;
      }
      break;
    }
    case kMboSnapshot: {
      if (GetArena() == nullptr) {
        delete inner_.mbo_snapshot_;
      }
      break;
    }
    case kMboDiff: {
      if (GetArena() == nullptr) {
        delete inner_.mbo_diff_;
      }
      break;
    }
    case kMbpSnapshot: {
      if (GetArena() == nullptr) {
        delete inner_.mbp_snapshot_;
      }
      break;
    }
    case kMbpDiff: {
      if (GetArena() == nullptr) {
        delete inner_.mbp_diff_;
      }
      break;
    }
    case kKline: {
      if (GetArena() == nullptr) {
        delete inner_.kline_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void MdMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MdMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MdMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .market_data.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Summary summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Trades trades = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trades(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.MarketByOrder mbo_snapshot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbo_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.MarketByOrderDiff mbo_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbo_diff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.MarketByPrice mbp_snapshot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbp_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.MarketByPriceDiff mbp_diff = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbp_diff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Kline kline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MdMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MdMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .market_data.Heartbeat heartbeat = 1;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heartbeat(this), target, stream);
  }

  // .market_data.Summary summary = 2;
  if (_internal_has_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::summary(this), target, stream);
  }

  // .market_data.Trades trades = 3;
  if (_internal_has_trades()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trades(this), target, stream);
  }

  // .market_data.MarketByOrder mbo_snapshot = 4;
  if (_internal_has_mbo_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mbo_snapshot(this), target, stream);
  }

  // .market_data.MarketByOrderDiff mbo_diff = 5;
  if (_internal_has_mbo_diff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mbo_diff(this), target, stream);
  }

  // .market_data.MarketByPrice mbp_snapshot = 6;
  if (_internal_has_mbp_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mbp_snapshot(this), target, stream);
  }

  // .market_data.MarketByPriceDiff mbp_diff = 7;
  if (_internal_has_mbp_diff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mbp_diff(this), target, stream);
  }

  // .market_data.Kline kline = 8;
  if (_internal_has_kline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::kline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MdMessage)
  return target;
}

size_t MdMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MdMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .market_data.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.heartbeat_);
      break;
    }
    // .market_data.Summary summary = 2;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.summary_);
      break;
    }
    // .market_data.Trades trades = 3;
    case kTrades: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.trades_);
      break;
    }
    // .market_data.MarketByOrder mbo_snapshot = 4;
    case kMboSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mbo_snapshot_);
      break;
    }
    // .market_data.MarketByOrderDiff mbo_diff = 5;
    case kMboDiff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mbo_diff_);
      break;
    }
    // .market_data.MarketByPrice mbp_snapshot = 6;
    case kMbpSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mbp_snapshot_);
      break;
    }
    // .market_data.MarketByPriceDiff mbp_diff = 7;
    case kMbpDiff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.mbp_diff_);
      break;
    }
    // .market_data.Kline kline = 8;
    case kKline: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.kline_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MdMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MdMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MdMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MdMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MdMessage)
    MergeFrom(*source);
  }
}

void MdMessage::MergeFrom(const MdMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MdMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::market_data::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::market_data::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case kTrades: {
      _internal_mutable_trades()->::market_data::Trades::MergeFrom(from._internal_trades());
      break;
    }
    case kMboSnapshot: {
      _internal_mutable_mbo_snapshot()->::market_data::MarketByOrder::MergeFrom(from._internal_mbo_snapshot());
      break;
    }
    case kMboDiff: {
      _internal_mutable_mbo_diff()->::market_data::MarketByOrderDiff::MergeFrom(from._internal_mbo_diff());
      break;
    }
    case kMbpSnapshot: {
      _internal_mutable_mbp_snapshot()->::market_data::MarketByPrice::MergeFrom(from._internal_mbp_snapshot());
      break;
    }
    case kMbpDiff: {
      _internal_mutable_mbp_diff()->::market_data::MarketByPriceDiff::MergeFrom(from._internal_mbp_diff());
      break;
    }
    case kKline: {
      _internal_mutable_kline()->::market_data::Kline::MergeFrom(from._internal_kline());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void MdMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MdMessage::CopyFrom(const MdMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdMessage::IsInitialized() const {
  return true;
}

void MdMessage::InternalSwap(MdMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MdMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByPrice_Level::_Internal {
 public:
};

MarketByPrice_Level::MarketByPrice_Level(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MarketByPrice.Level)
}
MarketByPrice_Level::MarketByPrice_Level(const MarketByPrice_Level& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&price_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:market_data.MarketByPrice.Level)
}

void MarketByPrice_Level::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&price_)) + sizeof(side_));
}

MarketByPrice_Level::~MarketByPrice_Level() {
  // @@protoc_insertion_point(destructor:market_data.MarketByPrice.Level)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByPrice_Level::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByPrice_Level::ArenaDtor(void* object) {
  MarketByPrice_Level* _this = reinterpret_cast< MarketByPrice_Level* >(object);
  (void)_this;
}
void MarketByPrice_Level::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByPrice_Level::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByPrice_Level::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MarketByPrice.Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&price_)) + sizeof(side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByPrice_Level::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Side side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::market_data::Side>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByPrice_Level::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MarketByPrice.Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // .market_data.Side side = 3;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MarketByPrice.Level)
  return target;
}

size_t MarketByPrice_Level::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MarketByPrice.Level)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // .market_data.Side side = 3;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByPrice_Level::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MarketByPrice.Level)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByPrice_Level* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByPrice_Level>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MarketByPrice.Level)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MarketByPrice.Level)
    MergeFrom(*source);
  }
}

void MarketByPrice_Level::MergeFrom(const MarketByPrice_Level& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MarketByPrice.Level)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void MarketByPrice_Level::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MarketByPrice.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByPrice_Level::CopyFrom(const MarketByPrice_Level& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MarketByPrice.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByPrice_Level::IsInitialized() const {
  return true;
}

void MarketByPrice_Level::InternalSwap(MarketByPrice_Level* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByPrice_Level, side_)
      + sizeof(MarketByPrice_Level::side_)
      - PROTOBUF_FIELD_OFFSET(MarketByPrice_Level, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByPrice_Level::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByPrice::_Internal {
 public:
};

MarketByPrice::MarketByPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  levels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MarketByPrice)
}
MarketByPrice::MarketByPrice(const MarketByPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      levels_(from.levels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chunk_, &from.chunk_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_chunks_) -
    reinterpret_cast<char*>(&chunk_)) + sizeof(num_chunks_));
  // @@protoc_insertion_point(copy_constructor:market_data.MarketByPrice)
}

void MarketByPrice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chunk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_chunks_) -
    reinterpret_cast<char*>(&chunk_)) + sizeof(num_chunks_));
}

MarketByPrice::~MarketByPrice() {
  // @@protoc_insertion_point(destructor:market_data.MarketByPrice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByPrice::ArenaDtor(void* object) {
  MarketByPrice* _this = reinterpret_cast< MarketByPrice* >(object);
  (void)_this;
}
void MarketByPrice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MarketByPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levels_.Clear();
  ::memset(&chunk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_chunks_) -
      reinterpret_cast<char*>(&chunk_)) + sizeof(num_chunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByPrice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market_data.MarketByPrice.Level levels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_levels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByPrice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MarketByPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market_data.MarketByPrice.Level levels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_levels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_levels(i), target, stream);
  }

  // uint32 chunk = 2;
  if (this->chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chunk(), target);
  }

  // uint32 num_chunks = 3;
  if (this->num_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_chunks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MarketByPrice)
  return target;
}

size_t MarketByPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MarketByPrice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.MarketByPrice.Level levels = 1;
  total_size += 1UL * this->_internal_levels_size();
  for (const auto& msg : this->levels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 chunk = 2;
  if (this->chunk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk());
  }

  // uint32 num_chunks = 3;
  if (this->num_chunks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_chunks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByPrice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MarketByPrice)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByPrice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByPrice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MarketByPrice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MarketByPrice)
    MergeFrom(*source);
  }
}

void MarketByPrice::MergeFrom(const MarketByPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MarketByPrice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  levels_.MergeFrom(from.levels_);
  if (from.chunk() != 0) {
    _internal_set_chunk(from._internal_chunk());
  }
  if (from.num_chunks() != 0) {
    _internal_set_num_chunks(from._internal_num_chunks());
  }
}

void MarketByPrice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MarketByPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByPrice::CopyFrom(const MarketByPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MarketByPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByPrice::IsInitialized() const {
  return true;
}

void MarketByPrice::InternalSwap(MarketByPrice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  levels_.InternalSwap(&other->levels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByPrice, num_chunks_)
      + sizeof(MarketByPrice::num_chunks_)
      - PROTOBUF_FIELD_OFFSET(MarketByPrice, chunk_)>(
          reinterpret_cast<char*>(&chunk_),
          reinterpret_cast<char*>(&other->chunk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByPrice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByPriceDiff_Diff::_Internal {
 public:
};

MarketByPriceDiff_Diff::MarketByPriceDiff_Diff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MarketByPriceDiff.Diff)
}
MarketByPriceDiff_Diff::MarketByPriceDiff_Diff(const MarketByPriceDiff_Diff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&price_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:market_data.MarketByPriceDiff.Diff)
}

void MarketByPriceDiff_Diff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&price_)) + sizeof(op_));
}

MarketByPriceDiff_Diff::~MarketByPriceDiff_Diff() {
  // @@protoc_insertion_point(destructor:market_data.MarketByPriceDiff.Diff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByPriceDiff_Diff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByPriceDiff_Diff::ArenaDtor(void* object) {
  MarketByPriceDiff_Diff* _this = reinterpret_cast< MarketByPriceDiff_Diff* >(object);
  (void)_this;
}
void MarketByPriceDiff_Diff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByPriceDiff_Diff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByPriceDiff_Diff::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MarketByPriceDiff.Diff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&price_)) + sizeof(op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByPriceDiff_Diff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Side side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::market_data::Side>(val));
        } else goto handle_unusual;
        continue;
      // .market_data.MarketByPriceDiff.DiffOp op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::market_data::MarketByPriceDiff_DiffOp>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByPriceDiff_Diff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MarketByPriceDiff.Diff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // .market_data.Side side = 3;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  // .market_data.MarketByPriceDiff.DiffOp op = 4;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MarketByPriceDiff.Diff)
  return target;
}

size_t MarketByPriceDiff_Diff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MarketByPriceDiff.Diff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // .market_data.Side side = 3;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .market_data.MarketByPriceDiff.DiffOp op = 4;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByPriceDiff_Diff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MarketByPriceDiff.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByPriceDiff_Diff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByPriceDiff_Diff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MarketByPriceDiff.Diff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MarketByPriceDiff.Diff)
    MergeFrom(*source);
  }
}

void MarketByPriceDiff_Diff::MergeFrom(const MarketByPriceDiff_Diff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MarketByPriceDiff.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void MarketByPriceDiff_Diff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MarketByPriceDiff.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByPriceDiff_Diff::CopyFrom(const MarketByPriceDiff_Diff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MarketByPriceDiff.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByPriceDiff_Diff::IsInitialized() const {
  return true;
}

void MarketByPriceDiff_Diff::InternalSwap(MarketByPriceDiff_Diff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByPriceDiff_Diff, op_)
      + sizeof(MarketByPriceDiff_Diff::op_)
      - PROTOBUF_FIELD_OFFSET(MarketByPriceDiff_Diff, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByPriceDiff_Diff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByPriceDiff::_Internal {
 public:
};

MarketByPriceDiff::MarketByPriceDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  diffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MarketByPriceDiff)
}
MarketByPriceDiff::MarketByPriceDiff(const MarketByPriceDiff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      diffs_(from.diffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_bid_levels_, &from.total_bid_levels_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_ask_levels_) -
    reinterpret_cast<char*>(&total_bid_levels_)) + sizeof(total_ask_levels_));
  // @@protoc_insertion_point(copy_constructor:market_data.MarketByPriceDiff)
}

void MarketByPriceDiff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_bid_levels_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_ask_levels_) -
    reinterpret_cast<char*>(&total_bid_levels_)) + sizeof(total_ask_levels_));
}

MarketByPriceDiff::~MarketByPriceDiff() {
  // @@protoc_insertion_point(destructor:market_data.MarketByPriceDiff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByPriceDiff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByPriceDiff::ArenaDtor(void* object) {
  MarketByPriceDiff* _this = reinterpret_cast< MarketByPriceDiff* >(object);
  (void)_this;
}
void MarketByPriceDiff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByPriceDiff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByPriceDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MarketByPriceDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diffs_.Clear();
  ::memset(&total_bid_levels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_ask_levels_) -
      reinterpret_cast<char*>(&total_bid_levels_)) + sizeof(total_ask_levels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByPriceDiff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market_data.MarketByPriceDiff.Diff diffs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 total_bid_levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_bid_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_ask_levels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ask_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByPriceDiff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MarketByPriceDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market_data.MarketByPriceDiff.Diff diffs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_diffs(i), target, stream);
  }

  // uint32 total_bid_levels = 2;
  if (this->total_bid_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_bid_levels(), target);
  }

  // uint32 total_ask_levels = 3;
  if (this->total_ask_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_ask_levels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MarketByPriceDiff)
  return target;
}

size_t MarketByPriceDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MarketByPriceDiff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.MarketByPriceDiff.Diff diffs = 1;
  total_size += 1UL * this->_internal_diffs_size();
  for (const auto& msg : this->diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_bid_levels = 2;
  if (this->total_bid_levels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_bid_levels());
  }

  // uint32 total_ask_levels = 3;
  if (this->total_ask_levels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_ask_levels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByPriceDiff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MarketByPriceDiff)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByPriceDiff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByPriceDiff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MarketByPriceDiff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MarketByPriceDiff)
    MergeFrom(*source);
  }
}

void MarketByPriceDiff::MergeFrom(const MarketByPriceDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MarketByPriceDiff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diffs_.MergeFrom(from.diffs_);
  if (from.total_bid_levels() != 0) {
    _internal_set_total_bid_levels(from._internal_total_bid_levels());
  }
  if (from.total_ask_levels() != 0) {
    _internal_set_total_ask_levels(from._internal_total_ask_levels());
  }
}

void MarketByPriceDiff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MarketByPriceDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByPriceDiff::CopyFrom(const MarketByPriceDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MarketByPriceDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByPriceDiff::IsInitialized() const {
  return true;
}

void MarketByPriceDiff::InternalSwap(MarketByPriceDiff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  diffs_.InternalSwap(&other->diffs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByPriceDiff, total_ask_levels_)
      + sizeof(MarketByPriceDiff::total_ask_levels_)
      - PROTOBUF_FIELD_OFFSET(MarketByPriceDiff, total_bid_levels_)>(
          reinterpret_cast<char*>(&total_bid_levels_),
          reinterpret_cast<char*>(&other->total_bid_levels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByPriceDiff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByOrder_Order::_Internal {
 public:
};

MarketByOrder_Order::MarketByOrder_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MarketByOrder.Order)
}
MarketByOrder_Order::MarketByOrder_Order(const MarketByOrder_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&price_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:market_data.MarketByOrder.Order)
}

void MarketByOrder_Order::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&price_)) + sizeof(side_));
}

MarketByOrder_Order::~MarketByOrder_Order() {
  // @@protoc_insertion_point(destructor:market_data.MarketByOrder.Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByOrder_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByOrder_Order::ArenaDtor(void* object) {
  MarketByOrder_Order* _this = reinterpret_cast< MarketByOrder_Order* >(object);
  (void)_this;
}
void MarketByOrder_Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByOrder_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByOrder_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MarketByOrder.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&price_)) + sizeof(side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrder_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exchange_order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exchange_order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Side side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::market_data::Side>(val));
        } else goto handle_unusual;
        continue;
      // uint64 priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByOrder_Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MarketByOrder.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // uint64 exchange_order_id = 3;
  if (this->exchange_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_exchange_order_id(), target);
  }

  // .market_data.Side side = 4;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  // uint64 priority = 5;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MarketByOrder.Order)
  return target;
}

size_t MarketByOrder_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MarketByOrder.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // uint64 exchange_order_id = 3;
  if (this->exchange_order_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exchange_order_id());
  }

  // uint64 priority = 5;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_priority());
  }

  // .market_data.Side side = 4;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByOrder_Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MarketByOrder.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByOrder_Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByOrder_Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MarketByOrder.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MarketByOrder.Order)
    MergeFrom(*source);
  }
}

void MarketByOrder_Order::MergeFrom(const MarketByOrder_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MarketByOrder.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.exchange_order_id() != 0) {
    _internal_set_exchange_order_id(from._internal_exchange_order_id());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void MarketByOrder_Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MarketByOrder.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByOrder_Order::CopyFrom(const MarketByOrder_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MarketByOrder.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrder_Order::IsInitialized() const {
  return true;
}

void MarketByOrder_Order::InternalSwap(MarketByOrder_Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrder_Order, side_)
      + sizeof(MarketByOrder_Order::side_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrder_Order, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrder_Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByOrder::_Internal {
 public:
};

MarketByOrder::MarketByOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MarketByOrder)
}
MarketByOrder::MarketByOrder(const MarketByOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chunk_, &from.chunk_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_chunks_) -
    reinterpret_cast<char*>(&chunk_)) + sizeof(num_chunks_));
  // @@protoc_insertion_point(copy_constructor:market_data.MarketByOrder)
}

void MarketByOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chunk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_chunks_) -
    reinterpret_cast<char*>(&chunk_)) + sizeof(num_chunks_));
}

MarketByOrder::~MarketByOrder() {
  // @@protoc_insertion_point(destructor:market_data.MarketByOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByOrder::ArenaDtor(void* object) {
  MarketByOrder* _this = reinterpret_cast< MarketByOrder* >(object);
  (void)_this;
}
void MarketByOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MarketByOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  ::memset(&chunk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_chunks_) -
      reinterpret_cast<char*>(&chunk_)) + sizeof(num_chunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market_data.MarketByOrder.Order orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MarketByOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market_data.MarketByOrder.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  // uint32 chunk = 2;
  if (this->chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chunk(), target);
  }

  // uint32 num_chunks = 3;
  if (this->num_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_chunks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MarketByOrder)
  return target;
}

size_t MarketByOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MarketByOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.MarketByOrder.Order orders = 1;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 chunk = 2;
  if (this->chunk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk());
  }

  // uint32 num_chunks = 3;
  if (this->num_chunks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_chunks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MarketByOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MarketByOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MarketByOrder)
    MergeFrom(*source);
  }
}

void MarketByOrder::MergeFrom(const MarketByOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MarketByOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  if (from.chunk() != 0) {
    _internal_set_chunk(from._internal_chunk());
  }
  if (from.num_chunks() != 0) {
    _internal_set_num_chunks(from._internal_num_chunks());
  }
}

void MarketByOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MarketByOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByOrder::CopyFrom(const MarketByOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MarketByOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrder::IsInitialized() const {
  return true;
}

void MarketByOrder::InternalSwap(MarketByOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrder, num_chunks_)
      + sizeof(MarketByOrder::num_chunks_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrder, chunk_)>(
          reinterpret_cast<char*>(&chunk_),
          reinterpret_cast<char*>(&other->chunk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByOrderDiff_Diff::_Internal {
 public:
};

MarketByOrderDiff_Diff::MarketByOrderDiff_Diff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MarketByOrderDiff.Diff)
}
MarketByOrderDiff_Diff::MarketByOrderDiff_Diff(const MarketByOrderDiff_Diff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&price_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:market_data.MarketByOrderDiff.Diff)
}

void MarketByOrderDiff_Diff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&price_)) + sizeof(priority_));
}

MarketByOrderDiff_Diff::~MarketByOrderDiff_Diff() {
  // @@protoc_insertion_point(destructor:market_data.MarketByOrderDiff.Diff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByOrderDiff_Diff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByOrderDiff_Diff::ArenaDtor(void* object) {
  MarketByOrderDiff_Diff* _this = reinterpret_cast< MarketByOrderDiff_Diff* >(object);
  (void)_this;
}
void MarketByOrderDiff_Diff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByOrderDiff_Diff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByOrderDiff_Diff::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MarketByOrderDiff.Diff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&price_)) + sizeof(priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderDiff_Diff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 exchange_order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exchange_order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Side side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::market_data::Side>(val));
        } else goto handle_unusual;
        continue;
      // .market_data.MarketByOrderDiff.DiffOp op = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::market_data::MarketByOrderDiff_DiffOp>(val));
        } else goto handle_unusual;
        continue;
      // uint64 priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByOrderDiff_Diff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MarketByOrderDiff.Diff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // uint64 exchange_order_id = 3;
  if (this->exchange_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_exchange_order_id(), target);
  }

  // .market_data.Side side = 4;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  // .market_data.MarketByOrderDiff.DiffOp op = 5;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_op(), target);
  }

  // uint64 priority = 6;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MarketByOrderDiff.Diff)
  return target;
}

size_t MarketByOrderDiff_Diff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MarketByOrderDiff.Diff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // uint64 exchange_order_id = 3;
  if (this->exchange_order_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exchange_order_id());
  }

  // .market_data.Side side = 4;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .market_data.MarketByOrderDiff.DiffOp op = 5;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  // uint64 priority = 6;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByOrderDiff_Diff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MarketByOrderDiff.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByOrderDiff_Diff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByOrderDiff_Diff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MarketByOrderDiff.Diff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MarketByOrderDiff.Diff)
    MergeFrom(*source);
  }
}

void MarketByOrderDiff_Diff::MergeFrom(const MarketByOrderDiff_Diff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MarketByOrderDiff.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.exchange_order_id() != 0) {
    _internal_set_exchange_order_id(from._internal_exchange_order_id());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void MarketByOrderDiff_Diff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MarketByOrderDiff.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByOrderDiff_Diff::CopyFrom(const MarketByOrderDiff_Diff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MarketByOrderDiff.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderDiff_Diff::IsInitialized() const {
  return true;
}

void MarketByOrderDiff_Diff::InternalSwap(MarketByOrderDiff_Diff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderDiff_Diff, priority_)
      + sizeof(MarketByOrderDiff_Diff::priority_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderDiff_Diff, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderDiff_Diff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByOrderDiff::_Internal {
 public:
};

MarketByOrderDiff::MarketByOrderDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  diffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MarketByOrderDiff)
}
MarketByOrderDiff::MarketByOrderDiff(const MarketByOrderDiff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      diffs_(from.diffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_bid_levels_, &from.total_bid_levels_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_ask_orders_) -
    reinterpret_cast<char*>(&total_bid_levels_)) + sizeof(total_ask_orders_));
  // @@protoc_insertion_point(copy_constructor:market_data.MarketByOrderDiff)
}

void MarketByOrderDiff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_bid_levels_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_ask_orders_) -
    reinterpret_cast<char*>(&total_bid_levels_)) + sizeof(total_ask_orders_));
}

MarketByOrderDiff::~MarketByOrderDiff() {
  // @@protoc_insertion_point(destructor:market_data.MarketByOrderDiff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByOrderDiff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketByOrderDiff::ArenaDtor(void* object) {
  MarketByOrderDiff* _this = reinterpret_cast< MarketByOrderDiff* >(object);
  (void)_this;
}
void MarketByOrderDiff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByOrderDiff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarketByOrderDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MarketByOrderDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diffs_.Clear();
  ::memset(&total_bid_levels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_ask_orders_) -
      reinterpret_cast<char*>(&total_bid_levels_)) + sizeof(total_ask_orders_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderDiff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market_data.MarketByOrderDiff.Diff diffs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 total_bid_levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_bid_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_ask_levels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ask_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_bid_orders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_bid_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_ask_orders = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_ask_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByOrderDiff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MarketByOrderDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market_data.MarketByOrderDiff.Diff diffs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_diffs(i), target, stream);
  }

  // uint32 total_bid_levels = 2;
  if (this->total_bid_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_bid_levels(), target);
  }

  // uint32 total_ask_levels = 3;
  if (this->total_ask_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_ask_levels(), target);
  }

  // uint32 total_bid_orders = 4;
  if (this->total_bid_orders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_bid_orders(), target);
  }

  // uint32 total_ask_orders = 5;
  if (this->total_ask_orders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_ask_orders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MarketByOrderDiff)
  return target;
}

size_t MarketByOrderDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MarketByOrderDiff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.MarketByOrderDiff.Diff diffs = 1;
  total_size += 1UL * this->_internal_diffs_size();
  for (const auto& msg : this->diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_bid_levels = 2;
  if (this->total_bid_levels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_bid_levels());
  }

  // uint32 total_ask_levels = 3;
  if (this->total_ask_levels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_ask_levels());
  }

  // uint32 total_bid_orders = 4;
  if (this->total_bid_orders() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_bid_orders());
  }

  // uint32 total_ask_orders = 5;
  if (this->total_ask_orders() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_ask_orders());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByOrderDiff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MarketByOrderDiff)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByOrderDiff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByOrderDiff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MarketByOrderDiff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MarketByOrderDiff)
    MergeFrom(*source);
  }
}

void MarketByOrderDiff::MergeFrom(const MarketByOrderDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MarketByOrderDiff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diffs_.MergeFrom(from.diffs_);
  if (from.total_bid_levels() != 0) {
    _internal_set_total_bid_levels(from._internal_total_bid_levels());
  }
  if (from.total_ask_levels() != 0) {
    _internal_set_total_ask_levels(from._internal_total_ask_levels());
  }
  if (from.total_bid_orders() != 0) {
    _internal_set_total_bid_orders(from._internal_total_bid_orders());
  }
  if (from.total_ask_orders() != 0) {
    _internal_set_total_ask_orders(from._internal_total_ask_orders());
  }
}

void MarketByOrderDiff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MarketByOrderDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByOrderDiff::CopyFrom(const MarketByOrderDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MarketByOrderDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderDiff::IsInitialized() const {
  return true;
}

void MarketByOrderDiff::InternalSwap(MarketByOrderDiff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  diffs_.InternalSwap(&other->diffs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderDiff, total_ask_orders_)
      + sizeof(MarketByOrderDiff::total_ask_orders_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderDiff, total_bid_levels_)>(
          reinterpret_cast<char*>(&total_bid_levels_),
          reinterpret_cast<char*>(&other->total_bid_levels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderDiff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trades_Trade::_Internal {
 public:
};

Trades_Trade::Trades_Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.Trades.Trade)
}
Trades_Trade::Trades_Trade(const Trades_Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tradeid_, &from.tradeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggressing_side_) -
    reinterpret_cast<char*>(&tradeid_)) + sizeof(aggressing_side_));
  // @@protoc_insertion_point(copy_constructor:market_data.Trades.Trade)
}

void Trades_Trade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tradeid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aggressing_side_) -
    reinterpret_cast<char*>(&tradeid_)) + sizeof(aggressing_side_));
}

Trades_Trade::~Trades_Trade() {
  // @@protoc_insertion_point(destructor:market_data.Trades.Trade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trades_Trade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trades_Trade::ArenaDtor(void* object) {
  Trades_Trade* _this = reinterpret_cast< Trades_Trade* >(object);
  (void)_this;
}
void Trades_Trade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trades_Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trades_Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.Trades.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tradeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggressing_side_) -
      reinterpret_cast<char*>(&tradeid_)) + sizeof(aggressing_side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trades_Trade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tradeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tradeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Side aggressing_side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggressing_side(static_cast<::market_data::Side>(val));
        } else goto handle_unusual;
        continue;
      // uint64 resting_exchange_order_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          resting_exchange_order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fill_quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fill_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transact_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          transact_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 aggressing_exchange_order_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          aggressing_exchange_order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trades_Trade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.Trades.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tradeId = 1;
  if (this->tradeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tradeid(), target);
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  // .market_data.Side aggressing_side = 3;
  if (this->aggressing_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_aggressing_side(), target);
  }

  // uint64 resting_exchange_order_id = 4;
  if (this->resting_exchange_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_resting_exchange_order_id(), target);
  }

  // uint64 fill_quantity = 5;
  if (this->fill_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fill_quantity(), target);
  }

  // uint64 transact_time = 6;
  if (this->transact_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_transact_time(), target);
  }

  // uint64 aggressing_exchange_order_id = 7;
  if (this->aggressing_exchange_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_aggressing_exchange_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.Trades.Trade)
  return target;
}

size_t Trades_Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.Trades.Trade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tradeId = 1;
  if (this->tradeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tradeid());
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 resting_exchange_order_id = 4;
  if (this->resting_exchange_order_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_resting_exchange_order_id());
  }

  // uint64 fill_quantity = 5;
  if (this->fill_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fill_quantity());
  }

  // uint64 transact_time = 6;
  if (this->transact_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transact_time());
  }

  // uint64 aggressing_exchange_order_id = 7;
  if (this->aggressing_exchange_order_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_aggressing_exchange_order_id());
  }

  // .market_data.Side aggressing_side = 3;
  if (this->aggressing_side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggressing_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trades_Trade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.Trades.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trades_Trade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trades_Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.Trades.Trade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.Trades.Trade)
    MergeFrom(*source);
  }
}

void Trades_Trade::MergeFrom(const Trades_Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.Trades.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradeid() != 0) {
    _internal_set_tradeid(from._internal_tradeid());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.resting_exchange_order_id() != 0) {
    _internal_set_resting_exchange_order_id(from._internal_resting_exchange_order_id());
  }
  if (from.fill_quantity() != 0) {
    _internal_set_fill_quantity(from._internal_fill_quantity());
  }
  if (from.transact_time() != 0) {
    _internal_set_transact_time(from._internal_transact_time());
  }
  if (from.aggressing_exchange_order_id() != 0) {
    _internal_set_aggressing_exchange_order_id(from._internal_aggressing_exchange_order_id());
  }
  if (from.aggressing_side() != 0) {
    _internal_set_aggressing_side(from._internal_aggressing_side());
  }
}

void Trades_Trade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.Trades.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trades_Trade::CopyFrom(const Trades_Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.Trades.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trades_Trade::IsInitialized() const {
  return true;
}

void Trades_Trade::InternalSwap(Trades_Trade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trades_Trade, aggressing_side_)
      + sizeof(Trades_Trade::aggressing_side_)
      - PROTOBUF_FIELD_OFFSET(Trades_Trade, tradeid_)>(
          reinterpret_cast<char*>(&tradeid_),
          reinterpret_cast<char*>(&other->tradeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trades_Trade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trades::_Internal {
 public:
};

Trades::Trades(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.Trades)
}
Trades::Trades(const Trades& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:market_data.Trades)
}

void Trades::SharedCtor() {
}

Trades::~Trades() {
  // @@protoc_insertion_point(destructor:market_data.Trades)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trades::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trades::ArenaDtor(void* object) {
  Trades* _this = reinterpret_cast< Trades* >(object);
  (void)_this;
}
void Trades::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trades::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trades::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.Trades)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trades::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market_data.Trades.Trade trades = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trades::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.Trades)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market_data.Trades.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.Trades)
  return target;
}

size_t Trades::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.Trades)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.Trades.Trade trades = 1;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trades::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.Trades)
  GOOGLE_DCHECK_NE(&from, this);
  const Trades* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trades>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.Trades)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.Trades)
    MergeFrom(*source);
  }
}

void Trades::MergeFrom(const Trades& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.Trades)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void Trades::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.Trades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trades::CopyFrom(const Trades& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.Trades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trades::IsInitialized() const {
  return true;
}

void Trades::InternalSwap(Trades* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trades::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Summary::_Internal {
 public:
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&quote_volume_hi_) -
    reinterpret_cast<char*>(&open_)) + sizeof(quote_volume_hi_));
  // @@protoc_insertion_point(copy_constructor:market_data.Summary)
}

void Summary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&open_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quote_volume_hi_) -
    reinterpret_cast<char*>(&open_)) + sizeof(quote_volume_hi_));
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:market_data.Summary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Summary::ArenaDtor(void* object) {
  Summary* _this = reinterpret_cast< Summary* >(object);
  (void)_this;
}
void Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quote_volume_hi_) -
      reinterpret_cast<char*>(&open_)) + sizeof(quote_volume_hi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 close = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 low = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 base_volume_lo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          base_volume_lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 base_volume_hi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          base_volume_hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quote_volume_lo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          quote_volume_lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quote_volume_hi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          quote_volume_hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 open = 1;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_open(), target);
  }

  // uint64 close = 2;
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_close(), target);
  }

  // uint64 low = 3;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_low(), target);
  }

  // uint64 high = 4;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_high(), target);
  }

  // uint64 base_volume_lo = 5;
  if (this->base_volume_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_base_volume_lo(), target);
  }

  // uint64 base_volume_hi = 6;
  if (this->base_volume_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_base_volume_hi(), target);
  }

  // uint64 quote_volume_lo = 7;
  if (this->quote_volume_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_quote_volume_lo(), target);
  }

  // uint64 quote_volume_hi = 8;
  if (this->quote_volume_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_quote_volume_hi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.Summary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 open = 1;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open());
  }

  // uint64 close = 2;
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_close());
  }

  // uint64 low = 3;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  // uint64 high = 4;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 base_volume_lo = 5;
  if (this->base_volume_lo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_base_volume_lo());
  }

  // uint64 base_volume_hi = 6;
  if (this->base_volume_hi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_base_volume_hi());
  }

  // uint64 quote_volume_lo = 7;
  if (this->quote_volume_lo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quote_volume_lo());
  }

  // uint64 quote_volume_hi = 8;
  if (this->quote_volume_hi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quote_volume_hi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.Summary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.Summary)
    MergeFrom(*source);
  }
}

void Summary::MergeFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.base_volume_lo() != 0) {
    _internal_set_base_volume_lo(from._internal_base_volume_lo());
  }
  if (from.base_volume_hi() != 0) {
    _internal_set_base_volume_hi(from._internal_base_volume_hi());
  }
  if (from.quote_volume_lo() != 0) {
    _internal_set_quote_volume_lo(from._internal_quote_volume_lo());
  }
  if (from.quote_volume_hi() != 0) {
    _internal_set_quote_volume_hi(from._internal_quote_volume_hi());
  }
}

void Summary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary, quote_volume_hi_)
      + sizeof(Summary::quote_volume_hi_)
      - PROTOBUF_FIELD_OFFSET(Summary, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Kline::_Internal {
 public:
};

Kline::Kline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.Kline)
}
Kline::Kline(const Kline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:market_data.Kline)
}

void Kline::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(interval_));
}

Kline::~Kline() {
  // @@protoc_insertion_point(destructor:market_data.Kline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Kline::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Kline::ArenaDtor(void* object) {
  Kline* _this = reinterpret_cast< Kline* >(object);
  (void)_this;
}
void Kline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Kline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Kline::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.Kline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Kline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .market_data.KlineInterval interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::market_data::KlineInterval>(val));
        } else goto handle_unusual;
        continue;
      // uint64 start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 close = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 high = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 low = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume_lo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volume_lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume_hi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          volume_hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Kline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.Kline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .market_data.KlineInterval interval = 1;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interval(), target);
  }

  // uint64 start_time = 2;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_time(), target);
  }

  // uint64 open = 3;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_open(), target);
  }

  // uint64 close = 4;
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_close(), target);
  }

  // uint64 high = 5;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_high(), target);
  }

  // uint64 low = 6;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_low(), target);
  }

  // uint64 volume_lo = 7;
  if (this->volume_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_volume_lo(), target);
  }

  // uint64 volume_hi = 8;
  if (this->volume_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_volume_hi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.Kline)
  return target;
}

size_t Kline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.Kline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_time = 2;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time());
  }

  // uint64 open = 3;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open());
  }

  // uint64 close = 4;
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_close());
  }

  // uint64 high = 5;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 low = 6;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  // uint64 volume_lo = 7;
  if (this->volume_lo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume_lo());
  }

  // uint64 volume_hi = 8;
  if (this->volume_hi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume_hi());
  }

  // .market_data.KlineInterval interval = 1;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.Kline)
  GOOGLE_DCHECK_NE(&from, this);
  const Kline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Kline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.Kline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.Kline)
    MergeFrom(*source);
  }
}

void Kline::MergeFrom(const Kline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.Kline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.volume_lo() != 0) {
    _internal_set_volume_lo(from._internal_volume_lo());
  }
  if (from.volume_hi() != 0) {
    _internal_set_volume_hi(from._internal_volume_hi());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void Kline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.Kline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kline::CopyFrom(const Kline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.Kline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kline::IsInitialized() const {
  return true;
}

void Kline::InternalSwap(Kline* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Kline, interval_)
      + sizeof(Kline::interval_)
      - PROTOBUF_FIELD_OFFSET(Kline, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Kline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:market_data.Heartbeat)
}

void Heartbeat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:market_data.Heartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Heartbeat::ArenaDtor(void* object) {
  Heartbeat* _this = reinterpret_cast< Heartbeat* >(object);
  (void)_this;
}
void Heartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, timestamp_)
      + sizeof(Heartbeat::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MdMessages::_Internal {
 public:
};

MdMessages::MdMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.MdMessages)
}
MdMessages::MdMessages(const MdMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:market_data.MdMessages)
}

void MdMessages::SharedCtor() {
}

MdMessages::~MdMessages() {
  // @@protoc_insertion_point(destructor:market_data.MdMessages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MdMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MdMessages::ArenaDtor(void* object) {
  MdMessages* _this = reinterpret_cast< MdMessages* >(object);
  (void)_this;
}
void MdMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MdMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MdMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.MdMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MdMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market_data.MdMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MdMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.MdMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market_data.MdMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.MdMessages)
  return target;
}

size_t MdMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.MdMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.MdMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MdMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.MdMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const MdMessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MdMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.MdMessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.MdMessages)
    MergeFrom(*source);
  }
}

void MdMessages::MergeFrom(const MdMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.MdMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void MdMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.MdMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MdMessages::CopyFrom(const MdMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.MdMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MdMessages::IsInitialized() const {
  return true;
}

void MdMessages::InternalSwap(MdMessages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MdMessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AggMessage::_Internal {
 public:
  static const ::market_data::Heartbeat& heartbeat(const AggMessage* msg);
  static const ::market_data::TopOfBooks& top_of_books(const AggMessage* msg);
  static const ::market_data::RateUpdates& rate_updates(const AggMessage* msg);
};

const ::market_data::Heartbeat&
AggMessage::_Internal::heartbeat(const AggMessage* msg) {
  return *msg->inner_.heartbeat_;
}
const ::market_data::TopOfBooks&
AggMessage::_Internal::top_of_books(const AggMessage* msg) {
  return *msg->inner_.top_of_books_;
}
const ::market_data::RateUpdates&
AggMessage::_Internal::rate_updates(const AggMessage* msg) {
  return *msg->inner_.rate_updates_;
}
void AggMessage::set_allocated_heartbeat(::market_data::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.AggMessage.heartbeat)
}
void AggMessage::set_allocated_top_of_books(::market_data::TopOfBooks* top_of_books) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (top_of_books) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(top_of_books);
    if (message_arena != submessage_arena) {
      top_of_books = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_of_books, submessage_arena);
    }
    set_has_top_of_books();
    inner_.top_of_books_ = top_of_books;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.AggMessage.top_of_books)
}
void AggMessage::set_allocated_rate_updates(::market_data::RateUpdates* rate_updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (rate_updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rate_updates);
    if (message_arena != submessage_arena) {
      rate_updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rate_updates, submessage_arena);
    }
    set_has_rate_updates();
    inner_.rate_updates_ = rate_updates;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.AggMessage.rate_updates)
}
AggMessage::AggMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.AggMessage)
}
AggMessage::AggMessage(const AggMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::market_data::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kTopOfBooks: {
      _internal_mutable_top_of_books()->::market_data::TopOfBooks::MergeFrom(from._internal_top_of_books());
      break;
    }
    case kRateUpdates: {
      _internal_mutable_rate_updates()->::market_data::RateUpdates::MergeFrom(from._internal_rate_updates());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:market_data.AggMessage)
}

void AggMessage::SharedCtor() {
clear_has_inner();
}

AggMessage::~AggMessage() {
  // @@protoc_insertion_point(destructor:market_data.AggMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void AggMessage::ArenaDtor(void* object) {
  AggMessage* _this = reinterpret_cast< AggMessage* >(object);
  (void)_this;
}
void AggMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggMessage::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:market_data.AggMessage)
  switch (inner_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete inner_.heartbeat_;
      }
      break;
    }
    case kTopOfBooks: {
      if (GetArena() == nullptr) {
        delete inner_.top_of_books_;
      }
      break;
    }
    case kRateUpdates: {
      if (GetArena() == nullptr) {
        delete inner_.rate_updates_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void AggMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.AggMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .market_data.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.TopOfBooks top_of_books = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_of_books(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.RateUpdates rate_updates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.AggMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .market_data.Heartbeat heartbeat = 1;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heartbeat(this), target, stream);
  }

  // .market_data.TopOfBooks top_of_books = 2;
  if (_internal_has_top_of_books()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::top_of_books(this), target, stream);
  }

  // .market_data.RateUpdates rate_updates = 3;
  if (_internal_has_rate_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rate_updates(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.AggMessage)
  return target;
}

size_t AggMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.AggMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .market_data.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.heartbeat_);
      break;
    }
    // .market_data.TopOfBooks top_of_books = 2;
    case kTopOfBooks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.top_of_books_);
      break;
    }
    // .market_data.RateUpdates rate_updates = 3;
    case kRateUpdates: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.rate_updates_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.AggMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AggMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.AggMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.AggMessage)
    MergeFrom(*source);
  }
}

void AggMessage::MergeFrom(const AggMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.AggMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::market_data::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kTopOfBooks: {
      _internal_mutable_top_of_books()->::market_data::TopOfBooks::MergeFrom(from._internal_top_of_books());
      break;
    }
    case kRateUpdates: {
      _internal_mutable_rate_updates()->::market_data::RateUpdates::MergeFrom(from._internal_rate_updates());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void AggMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.AggMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggMessage::CopyFrom(const AggMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.AggMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggMessage::IsInitialized() const {
  return true;
}

void AggMessage::InternalSwap(AggMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TopOfBook::_Internal {
 public:
};

TopOfBook::TopOfBook(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.TopOfBook)
}
TopOfBook::TopOfBook(const TopOfBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&market_id_, &from.market_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rolling24h_price_) -
    reinterpret_cast<char*>(&market_id_)) + sizeof(rolling24h_price_));
  // @@protoc_insertion_point(copy_constructor:market_data.TopOfBook)
}

void TopOfBook::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&market_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rolling24h_price_) -
    reinterpret_cast<char*>(&market_id_)) + sizeof(rolling24h_price_));
}

TopOfBook::~TopOfBook() {
  // @@protoc_insertion_point(destructor:market_data.TopOfBook)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopOfBook::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopOfBook::ArenaDtor(void* object) {
  TopOfBook* _this = reinterpret_cast< TopOfBook* >(object);
  (void)_this;
}
void TopOfBook::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopOfBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopOfBook::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.TopOfBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&market_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rolling24h_price_) -
      reinterpret_cast<char*>(&market_id_)) + sizeof(rolling24h_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopOfBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          market_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transact_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          transact_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bid_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bid_quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bid_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ask_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ask_quantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ask_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          last_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rolling24h_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rolling24h_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopOfBook::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.TopOfBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 market_id = 1;
  if (this->market_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_market_id(), target);
  }

  // uint64 transact_time = 2;
  if (this->transact_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_transact_time(), target);
  }

  // uint64 bid_price = 3;
  if (this->bid_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bid_price(), target);
  }

  // uint64 bid_quantity = 4;
  if (this->bid_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bid_quantity(), target);
  }

  // uint64 ask_price = 5;
  if (this->ask_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ask_price(), target);
  }

  // uint64 ask_quantity = 6;
  if (this->ask_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_ask_quantity(), target);
  }

  // uint64 last_price = 7;
  if (this->last_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_last_price(), target);
  }

  // uint64 rolling24h_price = 8;
  if (this->rolling24h_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_rolling24h_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.TopOfBook)
  return target;
}

size_t TopOfBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.TopOfBook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 market_id = 1;
  if (this->market_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_market_id());
  }

  // uint64 transact_time = 2;
  if (this->transact_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transact_time());
  }

  // uint64 bid_price = 3;
  if (this->bid_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bid_price());
  }

  // uint64 bid_quantity = 4;
  if (this->bid_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bid_quantity());
  }

  // uint64 ask_price = 5;
  if (this->ask_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ask_price());
  }

  // uint64 ask_quantity = 6;
  if (this->ask_quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ask_quantity());
  }

  // uint64 last_price = 7;
  if (this->last_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_price());
  }

  // uint64 rolling24h_price = 8;
  if (this->rolling24h_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rolling24h_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopOfBook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.TopOfBook)
  GOOGLE_DCHECK_NE(&from, this);
  const TopOfBook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopOfBook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.TopOfBook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.TopOfBook)
    MergeFrom(*source);
  }
}

void TopOfBook::MergeFrom(const TopOfBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.TopOfBook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market_id() != 0) {
    _internal_set_market_id(from._internal_market_id());
  }
  if (from.transact_time() != 0) {
    _internal_set_transact_time(from._internal_transact_time());
  }
  if (from.bid_price() != 0) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (from.bid_quantity() != 0) {
    _internal_set_bid_quantity(from._internal_bid_quantity());
  }
  if (from.ask_price() != 0) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from.ask_quantity() != 0) {
    _internal_set_ask_quantity(from._internal_ask_quantity());
  }
  if (from.last_price() != 0) {
    _internal_set_last_price(from._internal_last_price());
  }
  if (from.rolling24h_price() != 0) {
    _internal_set_rolling24h_price(from._internal_rolling24h_price());
  }
}

void TopOfBook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.TopOfBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopOfBook::CopyFrom(const TopOfBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.TopOfBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopOfBook::IsInitialized() const {
  return true;
}

void TopOfBook::InternalSwap(TopOfBook* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopOfBook, rolling24h_price_)
      + sizeof(TopOfBook::rolling24h_price_)
      - PROTOBUF_FIELD_OFFSET(TopOfBook, market_id_)>(
          reinterpret_cast<char*>(&market_id_),
          reinterpret_cast<char*>(&other->market_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopOfBook::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TopOfBooks::_Internal {
 public:
};

TopOfBooks::TopOfBooks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.TopOfBooks)
}
TopOfBooks::TopOfBooks(const TopOfBooks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tops_(from.tops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:market_data.TopOfBooks)
}

void TopOfBooks::SharedCtor() {
}

TopOfBooks::~TopOfBooks() {
  // @@protoc_insertion_point(destructor:market_data.TopOfBooks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopOfBooks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopOfBooks::ArenaDtor(void* object) {
  TopOfBooks* _this = reinterpret_cast< TopOfBooks* >(object);
  (void)_this;
}
void TopOfBooks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopOfBooks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopOfBooks::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.TopOfBooks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopOfBooks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market_data.TopOfBook tops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopOfBooks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.TopOfBooks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market_data.TopOfBook tops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.TopOfBooks)
  return target;
}

size_t TopOfBooks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.TopOfBooks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.TopOfBook tops = 1;
  total_size += 1UL * this->_internal_tops_size();
  for (const auto& msg : this->tops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopOfBooks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.TopOfBooks)
  GOOGLE_DCHECK_NE(&from, this);
  const TopOfBooks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopOfBooks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.TopOfBooks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.TopOfBooks)
    MergeFrom(*source);
  }
}

void TopOfBooks::MergeFrom(const TopOfBooks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.TopOfBooks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tops_.MergeFrom(from.tops_);
}

void TopOfBooks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.TopOfBooks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopOfBooks::CopyFrom(const TopOfBooks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.TopOfBooks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopOfBooks::IsInitialized() const {
  return true;
}

void TopOfBooks::InternalSwap(TopOfBooks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tops_.InternalSwap(&other->tops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopOfBooks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RateUpdate::_Internal {
 public:
};

RateUpdate::RateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.RateUpdate)
}
RateUpdate::RateUpdate(const RateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asset_id_, &from.asset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&asset_id_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:market_data.RateUpdate)
}

void RateUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asset_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&asset_id_)) + sizeof(side_));
}

RateUpdate::~RateUpdate() {
  // @@protoc_insertion_point(destructor:market_data.RateUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RateUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RateUpdate::ArenaDtor(void* object) {
  RateUpdate* _this = reinterpret_cast< RateUpdate* >(object);
  (void)_this;
}
void RateUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RateUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.RateUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asset_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&asset_id_)) + sizeof(side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.RateUpdateSide side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::market_data::RateUpdateSide>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RateUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.RateUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 asset_id = 1;
  if (this->asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_asset_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 rate = 3;
  if (this->rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rate(), target);
  }

  // .market_data.RateUpdateSide side = 4;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.RateUpdate)
  return target;
}

size_t RateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.RateUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 asset_id = 1;
  if (this->asset_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_asset_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 rate = 3;
  if (this->rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rate());
  }

  // .market_data.RateUpdateSide side = 4;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.RateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RateUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RateUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.RateUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.RateUpdate)
    MergeFrom(*source);
  }
}

void RateUpdate::MergeFrom(const RateUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.RateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id() != 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.rate() != 0) {
    _internal_set_rate(from._internal_rate());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void RateUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.RateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateUpdate::CopyFrom(const RateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.RateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateUpdate::IsInitialized() const {
  return true;
}

void RateUpdate::InternalSwap(RateUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RateUpdate, side_)
      + sizeof(RateUpdate::side_)
      - PROTOBUF_FIELD_OFFSET(RateUpdate, asset_id_)>(
          reinterpret_cast<char*>(&asset_id_),
          reinterpret_cast<char*>(&other->asset_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RateUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RateUpdates::_Internal {
 public:
};

RateUpdates::RateUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.RateUpdates)
}
RateUpdates::RateUpdates(const RateUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:market_data.RateUpdates)
}

void RateUpdates::SharedCtor() {
}

RateUpdates::~RateUpdates() {
  // @@protoc_insertion_point(destructor:market_data.RateUpdates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RateUpdates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RateUpdates::ArenaDtor(void* object) {
  RateUpdates* _this = reinterpret_cast< RateUpdates* >(object);
  (void)_this;
}
void RateUpdates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RateUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RateUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.RateUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateUpdates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market_data.RateUpdate updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RateUpdates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.RateUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market_data.RateUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.RateUpdates)
  return target;
}

size_t RateUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.RateUpdates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.RateUpdate updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateUpdates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.RateUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  const RateUpdates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RateUpdates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.RateUpdates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.RateUpdates)
    MergeFrom(*source);
  }
}

void RateUpdates::MergeFrom(const RateUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.RateUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void RateUpdates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.RateUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateUpdates::CopyFrom(const RateUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.RateUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateUpdates::IsInitialized() const {
  return true;
}

void RateUpdates::InternalSwap(RateUpdates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RateUpdates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientMessage::_Internal {
 public:
  static const ::market_data::Heartbeat& heartbeat(const ClientMessage* msg);
  static const ::market_data::Config& config(const ClientMessage* msg);
};

const ::market_data::Heartbeat&
ClientMessage::_Internal::heartbeat(const ClientMessage* msg) {
  return *msg->inner_.heartbeat_;
}
const ::market_data::Config&
ClientMessage::_Internal::config(const ClientMessage* msg) {
  return *msg->inner_.config_;
}
void ClientMessage::set_allocated_heartbeat(::market_data::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.ClientMessage.heartbeat)
}
void ClientMessage::set_allocated_config(::market_data::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_inner();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    inner_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:market_data.ClientMessage.config)
}
ClientMessage::ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::market_data::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kConfig: {
      _internal_mutable_config()->::market_data::Config::MergeFrom(from._internal_config());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:market_data.ClientMessage)
}

void ClientMessage::SharedCtor() {
clear_has_inner();
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:market_data.ClientMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_inner()) {
    clear_inner();
  }
}

void ClientMessage::ArenaDtor(void* object) {
  ClientMessage* _this = reinterpret_cast< ClientMessage* >(object);
  (void)_this;
}
void ClientMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientMessage::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:market_data.ClientMessage)
  switch (inner_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete inner_.heartbeat_;
      }
      break;
    }
    case kConfig: {
      if (GetArena() == nullptr) {
        delete inner_.config_;
      }
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .market_data.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .market_data.Config config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .market_data.Heartbeat heartbeat = 1;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heartbeat(this), target, stream);
  }

  // .market_data.Config config = 2;
  if (_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.ClientMessage)
  return target;
}

size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.ClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (inner_case()) {
    // .market_data.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.heartbeat_);
      break;
    }
    // .market_data.Config config = 2;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_.config_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::market_data::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kConfig: {
      _internal_mutable_config()->::market_data::Config::MergeFrom(from._internal_config());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  klines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:market_data.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      klines_(from.klines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mbp_, &from.mbp_,
    static_cast<size_t>(reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&mbp_)) + sizeof(summary_));
  // @@protoc_insertion_point(copy_constructor:market_data.Config)
}

void Config::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mbp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&mbp_)) + sizeof(summary_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:market_data.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:market_data.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  klines_.Clear();
  ::memset(&mbp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summary_) -
      reinterpret_cast<char*>(&mbp_)) + sizeof(summary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool mbp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mbp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mbo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mbo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trades = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool summary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          summary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .market_data.KlineInterval klines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_klines(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_klines(static_cast<::market_data::KlineInterval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_data.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool mbp = 1;
  if (this->mbp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_mbp(), target);
  }

  // bool mbo = 2;
  if (this->mbo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mbo(), target);
  }

  // bool trades = 3;
  if (this->trades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_trades(), target);
  }

  // bool summary = 4;
  if (this->summary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_summary(), target);
  }

  // repeated .market_data.KlineInterval klines = 5;
  {
    int byte_size = _klines_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, klines_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_data.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market_data.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market_data.KlineInterval klines = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_klines_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_klines(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _klines_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool mbp = 1;
  if (this->mbp() != 0) {
    total_size += 1 + 1;
  }

  // bool mbo = 2;
  if (this->mbo() != 0) {
    total_size += 1 + 1;
  }

  // bool trades = 3;
  if (this->trades() != 0) {
    total_size += 1 + 1;
  }

  // bool summary = 4;
  if (this->summary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market_data.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market_data.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market_data.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market_data.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  klines_.MergeFrom(from.klines_);
  if (from.mbp() != 0) {
    _internal_set_mbp(from._internal_mbp());
  }
  if (from.mbo() != 0) {
    _internal_set_mbo(from._internal_mbo());
  }
  if (from.trades() != 0) {
    _internal_set_trades(from._internal_trades());
  }
  if (from.summary() != 0) {
    _internal_set_summary(from._internal_summary());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market_data.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market_data.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  klines_.InternalSwap(&other->klines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, summary_)
      + sizeof(Config::summary_)
      - PROTOBUF_FIELD_OFFSET(Config, mbp_)>(
          reinterpret_cast<char*>(&mbp_),
          reinterpret_cast<char*>(&other->mbp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace market_data
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::market_data::MdMessage* Arena::CreateMaybeMessage< ::market_data::MdMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MdMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MarketByPrice_Level* Arena::CreateMaybeMessage< ::market_data::MarketByPrice_Level >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MarketByPrice_Level >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MarketByPrice* Arena::CreateMaybeMessage< ::market_data::MarketByPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MarketByPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MarketByPriceDiff_Diff* Arena::CreateMaybeMessage< ::market_data::MarketByPriceDiff_Diff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MarketByPriceDiff_Diff >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MarketByPriceDiff* Arena::CreateMaybeMessage< ::market_data::MarketByPriceDiff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MarketByPriceDiff >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MarketByOrder_Order* Arena::CreateMaybeMessage< ::market_data::MarketByOrder_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MarketByOrder_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MarketByOrder* Arena::CreateMaybeMessage< ::market_data::MarketByOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MarketByOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MarketByOrderDiff_Diff* Arena::CreateMaybeMessage< ::market_data::MarketByOrderDiff_Diff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MarketByOrderDiff_Diff >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MarketByOrderDiff* Arena::CreateMaybeMessage< ::market_data::MarketByOrderDiff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MarketByOrderDiff >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::Trades_Trade* Arena::CreateMaybeMessage< ::market_data::Trades_Trade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::Trades_Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::Trades* Arena::CreateMaybeMessage< ::market_data::Trades >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::Trades >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::Summary* Arena::CreateMaybeMessage< ::market_data::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::Kline* Arena::CreateMaybeMessage< ::market_data::Kline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::Kline >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::Heartbeat* Arena::CreateMaybeMessage< ::market_data::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::MdMessages* Arena::CreateMaybeMessage< ::market_data::MdMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::MdMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::AggMessage* Arena::CreateMaybeMessage< ::market_data::AggMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::AggMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::TopOfBook* Arena::CreateMaybeMessage< ::market_data::TopOfBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::TopOfBook >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::TopOfBooks* Arena::CreateMaybeMessage< ::market_data::TopOfBooks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::TopOfBooks >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::RateUpdate* Arena::CreateMaybeMessage< ::market_data::RateUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::RateUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::RateUpdates* Arena::CreateMaybeMessage< ::market_data::RateUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::RateUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::ClientMessage* Arena::CreateMaybeMessage< ::market_data::ClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::market_data::Config* Arena::CreateMaybeMessage< ::market_data::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::market_data::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
