// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trade_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trade_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_trade_2eproto_metadata_getter(int index);
namespace trade {
class AssetPosition;
struct AssetPositionDefaultTypeInternal;
extern AssetPositionDefaultTypeInternal _AssetPosition_default_instance_;
class AssetPositions;
struct AssetPositionsDefaultTypeInternal;
extern AssetPositionsDefaultTypeInternal _AssetPositions_default_instance_;
class Bootstrap;
struct BootstrapDefaultTypeInternal;
extern BootstrapDefaultTypeInternal _Bootstrap_default_instance_;
class CancelOrder;
struct CancelOrderDefaultTypeInternal;
extern CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class CancelOrderAck;
struct CancelOrderAckDefaultTypeInternal;
extern CancelOrderAckDefaultTypeInternal _CancelOrderAck_default_instance_;
class CancelOrderReject;
struct CancelOrderRejectDefaultTypeInternal;
extern CancelOrderRejectDefaultTypeInternal _CancelOrderReject_default_instance_;
class Credentials;
struct CredentialsDefaultTypeInternal;
extern CredentialsDefaultTypeInternal _Credentials_default_instance_;
class Done;
struct DoneDefaultTypeInternal;
extern DoneDefaultTypeInternal _Done_default_instance_;
class Fill;
struct FillDefaultTypeInternal;
extern FillDefaultTypeInternal _Fill_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class MassCancel;
struct MassCancelDefaultTypeInternal;
extern MassCancelDefaultTypeInternal _MassCancel_default_instance_;
class MassCancelAck;
struct MassCancelAckDefaultTypeInternal;
extern MassCancelAckDefaultTypeInternal _MassCancelAck_default_instance_;
class ModifyOrder;
struct ModifyOrderDefaultTypeInternal;
extern ModifyOrderDefaultTypeInternal _ModifyOrder_default_instance_;
class ModifyOrderAck;
struct ModifyOrderAckDefaultTypeInternal;
extern ModifyOrderAckDefaultTypeInternal _ModifyOrderAck_default_instance_;
class ModifyOrderReject;
struct ModifyOrderRejectDefaultTypeInternal;
extern ModifyOrderRejectDefaultTypeInternal _ModifyOrderReject_default_instance_;
class NewOrder;
struct NewOrderDefaultTypeInternal;
extern NewOrderDefaultTypeInternal _NewOrder_default_instance_;
class NewOrderAck;
struct NewOrderAckDefaultTypeInternal;
extern NewOrderAckDefaultTypeInternal _NewOrderAck_default_instance_;
class NewOrderReject;
struct NewOrderRejectDefaultTypeInternal;
extern NewOrderRejectDefaultTypeInternal _NewOrderReject_default_instance_;
class OrderRequest;
struct OrderRequestDefaultTypeInternal;
extern OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
class OrderResponse;
struct OrderResponseDefaultTypeInternal;
extern OrderResponseDefaultTypeInternal _OrderResponse_default_instance_;
class RawUnits;
struct RawUnitsDefaultTypeInternal;
extern RawUnitsDefaultTypeInternal _RawUnits_default_instance_;
class RestingOrder;
struct RestingOrderDefaultTypeInternal;
extern RestingOrderDefaultTypeInternal _RestingOrder_default_instance_;
class RestingOrders;
struct RestingOrdersDefaultTypeInternal;
extern RestingOrdersDefaultTypeInternal _RestingOrders_default_instance_;
}  // namespace trade
PROTOBUF_NAMESPACE_OPEN
template<> ::trade::AssetPosition* Arena::CreateMaybeMessage<::trade::AssetPosition>(Arena*);
template<> ::trade::AssetPositions* Arena::CreateMaybeMessage<::trade::AssetPositions>(Arena*);
template<> ::trade::Bootstrap* Arena::CreateMaybeMessage<::trade::Bootstrap>(Arena*);
template<> ::trade::CancelOrder* Arena::CreateMaybeMessage<::trade::CancelOrder>(Arena*);
template<> ::trade::CancelOrderAck* Arena::CreateMaybeMessage<::trade::CancelOrderAck>(Arena*);
template<> ::trade::CancelOrderReject* Arena::CreateMaybeMessage<::trade::CancelOrderReject>(Arena*);
template<> ::trade::Credentials* Arena::CreateMaybeMessage<::trade::Credentials>(Arena*);
template<> ::trade::Done* Arena::CreateMaybeMessage<::trade::Done>(Arena*);
template<> ::trade::Fill* Arena::CreateMaybeMessage<::trade::Fill>(Arena*);
template<> ::trade::Heartbeat* Arena::CreateMaybeMessage<::trade::Heartbeat>(Arena*);
template<> ::trade::MassCancel* Arena::CreateMaybeMessage<::trade::MassCancel>(Arena*);
template<> ::trade::MassCancelAck* Arena::CreateMaybeMessage<::trade::MassCancelAck>(Arena*);
template<> ::trade::ModifyOrder* Arena::CreateMaybeMessage<::trade::ModifyOrder>(Arena*);
template<> ::trade::ModifyOrderAck* Arena::CreateMaybeMessage<::trade::ModifyOrderAck>(Arena*);
template<> ::trade::ModifyOrderReject* Arena::CreateMaybeMessage<::trade::ModifyOrderReject>(Arena*);
template<> ::trade::NewOrder* Arena::CreateMaybeMessage<::trade::NewOrder>(Arena*);
template<> ::trade::NewOrderAck* Arena::CreateMaybeMessage<::trade::NewOrderAck>(Arena*);
template<> ::trade::NewOrderReject* Arena::CreateMaybeMessage<::trade::NewOrderReject>(Arena*);
template<> ::trade::OrderRequest* Arena::CreateMaybeMessage<::trade::OrderRequest>(Arena*);
template<> ::trade::OrderResponse* Arena::CreateMaybeMessage<::trade::OrderResponse>(Arena*);
template<> ::trade::RawUnits* Arena::CreateMaybeMessage<::trade::RawUnits>(Arena*);
template<> ::trade::RestingOrder* Arena::CreateMaybeMessage<::trade::RestingOrder>(Arena*);
template<> ::trade::RestingOrders* Arena::CreateMaybeMessage<::trade::RestingOrders>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trade {

enum CancelOrderAck_Reason : int {
  CancelOrderAck_Reason_UNCLASSIFIED = 0,
  CancelOrderAck_Reason_DISCONNECT = 1,
  CancelOrderAck_Reason_REQUESTED = 2,
  CancelOrderAck_Reason_IOC = 3,
  CancelOrderAck_Reason_STP_RESTING = 4,
  CancelOrderAck_Reason_STP_AGGRESSING = 5,
  CancelOrderAck_Reason_MASS_CANCEL = 6,
  CancelOrderAck_Reason_CancelOrderAck_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CancelOrderAck_Reason_CancelOrderAck_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CancelOrderAck_Reason_IsValid(int value);
constexpr CancelOrderAck_Reason CancelOrderAck_Reason_Reason_MIN = CancelOrderAck_Reason_UNCLASSIFIED;
constexpr CancelOrderAck_Reason CancelOrderAck_Reason_Reason_MAX = CancelOrderAck_Reason_MASS_CANCEL;
constexpr int CancelOrderAck_Reason_Reason_ARRAYSIZE = CancelOrderAck_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelOrderAck_Reason_descriptor();
template<typename T>
inline const std::string& CancelOrderAck_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CancelOrderAck_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CancelOrderAck_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CancelOrderAck_Reason_descriptor(), enum_t_value);
}
inline bool CancelOrderAck_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CancelOrderAck_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CancelOrderAck_Reason>(
    CancelOrderAck_Reason_descriptor(), name, value);
}
enum MassCancelAck_Reason : int {
  MassCancelAck_Reason_UNCLASSIFIED = 0,
  MassCancelAck_Reason_INVALID_MARKET_ID = 1,
  MassCancelAck_Reason_INVALID_SIDE = 2,
  MassCancelAck_Reason_MassCancelAck_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MassCancelAck_Reason_MassCancelAck_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MassCancelAck_Reason_IsValid(int value);
constexpr MassCancelAck_Reason MassCancelAck_Reason_Reason_MIN = MassCancelAck_Reason_UNCLASSIFIED;
constexpr MassCancelAck_Reason MassCancelAck_Reason_Reason_MAX = MassCancelAck_Reason_INVALID_SIDE;
constexpr int MassCancelAck_Reason_Reason_ARRAYSIZE = MassCancelAck_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MassCancelAck_Reason_descriptor();
template<typename T>
inline const std::string& MassCancelAck_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MassCancelAck_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MassCancelAck_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MassCancelAck_Reason_descriptor(), enum_t_value);
}
inline bool MassCancelAck_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MassCancelAck_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MassCancelAck_Reason>(
    MassCancelAck_Reason_descriptor(), name, value);
}
enum NewOrderReject_Reason : int {
  NewOrderReject_Reason_UNCLASSIFIED = 0,
  NewOrderReject_Reason_INVALID_QUANTITY = 1,
  NewOrderReject_Reason_INVALID_MARKET_ID = 2,
  NewOrderReject_Reason_DUPLICATE_ORDER_ID = 3,
  NewOrderReject_Reason_INVALID_SIDE = 4,
  NewOrderReject_Reason_INVALID_TIME_IN_FORCE = 5,
  NewOrderReject_Reason_INVALID_ORDER_TYPE = 6,
  NewOrderReject_Reason_INVALID_POST_ONLY = 7,
  NewOrderReject_Reason_INVALID_SELF_TRADE_PREVENTION = 8,
  NewOrderReject_Reason_UNKNOWN_TRADER = 9,
  NewOrderReject_Reason_PRICE_WITH_MARKET_ORDER = 10,
  NewOrderReject_Reason_POST_ONLY_WITH_MARKET_ORDER = 11,
  NewOrderReject_Reason_POST_ONLY_WITH_INVALID_TIF = 12,
  NewOrderReject_Reason_EXCEEDED_SPOT_POSITION = 13,
  NewOrderReject_Reason_NO_OPPOSING_LIMIT_ORDER = 14,
  NewOrderReject_Reason_POST_ONLY_WOULD_TRADE = 15,
  NewOrderReject_Reason_DID_NOT_FULLY_FILL = 16,
  NewOrderReject_Reason_NewOrderReject_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NewOrderReject_Reason_NewOrderReject_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NewOrderReject_Reason_IsValid(int value);
constexpr NewOrderReject_Reason NewOrderReject_Reason_Reason_MIN = NewOrderReject_Reason_UNCLASSIFIED;
constexpr NewOrderReject_Reason NewOrderReject_Reason_Reason_MAX = NewOrderReject_Reason_DID_NOT_FULLY_FILL;
constexpr int NewOrderReject_Reason_Reason_ARRAYSIZE = NewOrderReject_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NewOrderReject_Reason_descriptor();
template<typename T>
inline const std::string& NewOrderReject_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NewOrderReject_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NewOrderReject_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NewOrderReject_Reason_descriptor(), enum_t_value);
}
inline bool NewOrderReject_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NewOrderReject_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NewOrderReject_Reason>(
    NewOrderReject_Reason_descriptor(), name, value);
}
enum CancelOrderReject_Reason : int {
  CancelOrderReject_Reason_UNCLASSIFIED = 0,
  CancelOrderReject_Reason_INVALID_MARKET_ID = 1,
  CancelOrderReject_Reason_ORDER_NOT_FOUND = 2,
  CancelOrderReject_Reason_CancelOrderReject_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CancelOrderReject_Reason_CancelOrderReject_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CancelOrderReject_Reason_IsValid(int value);
constexpr CancelOrderReject_Reason CancelOrderReject_Reason_Reason_MIN = CancelOrderReject_Reason_UNCLASSIFIED;
constexpr CancelOrderReject_Reason CancelOrderReject_Reason_Reason_MAX = CancelOrderReject_Reason_ORDER_NOT_FOUND;
constexpr int CancelOrderReject_Reason_Reason_ARRAYSIZE = CancelOrderReject_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CancelOrderReject_Reason_descriptor();
template<typename T>
inline const std::string& CancelOrderReject_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CancelOrderReject_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CancelOrderReject_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CancelOrderReject_Reason_descriptor(), enum_t_value);
}
inline bool CancelOrderReject_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CancelOrderReject_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CancelOrderReject_Reason>(
    CancelOrderReject_Reason_descriptor(), name, value);
}
enum ModifyOrderReject_Reason : int {
  ModifyOrderReject_Reason_UNCLASSIFIED = 0,
  ModifyOrderReject_Reason_INVALID_QUANTITY = 1,
  ModifyOrderReject_Reason_INVALID_MARKET_ID = 2,
  ModifyOrderReject_Reason_ORDER_NOT_FOUND = 3,
  ModifyOrderReject_Reason_INVALID_IFM = 4,
  ModifyOrderReject_Reason_INVALID_POST_ONLY = 5,
  ModifyOrderReject_Reason_INVALID_SELF_TRADE_PREVENTION = 6,
  ModifyOrderReject_Reason_UNKNOWN_TRADER = 7,
  ModifyOrderReject_Reason_EXCEEDED_SPOT_POSITION = 8,
  ModifyOrderReject_Reason_POST_ONLY_WOULD_TRADE = 9,
  ModifyOrderReject_Reason_ModifyOrderReject_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModifyOrderReject_Reason_ModifyOrderReject_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModifyOrderReject_Reason_IsValid(int value);
constexpr ModifyOrderReject_Reason ModifyOrderReject_Reason_Reason_MIN = ModifyOrderReject_Reason_UNCLASSIFIED;
constexpr ModifyOrderReject_Reason ModifyOrderReject_Reason_Reason_MAX = ModifyOrderReject_Reason_POST_ONLY_WOULD_TRADE;
constexpr int ModifyOrderReject_Reason_Reason_ARRAYSIZE = ModifyOrderReject_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModifyOrderReject_Reason_descriptor();
template<typename T>
inline const std::string& ModifyOrderReject_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModifyOrderReject_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModifyOrderReject_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModifyOrderReject_Reason_descriptor(), enum_t_value);
}
inline bool ModifyOrderReject_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModifyOrderReject_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModifyOrderReject_Reason>(
    ModifyOrderReject_Reason_descriptor(), name, value);
}
enum Side : int {
  BID = 0,
  ASK = 1,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Side_IsValid(int value);
constexpr Side Side_MIN = BID;
constexpr Side Side_MAX = ASK;
constexpr int Side_ARRAYSIZE = Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor();
template<typename T>
inline const std::string& Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Side_descriptor(), enum_t_value);
}
inline bool Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
enum TimeInForce : int {
  IMMEDIATE_OR_CANCEL = 0,
  GOOD_FOR_SESSION = 1,
  FILL_OR_KILL = 2,
  TimeInForce_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TimeInForce_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TimeInForce_IsValid(int value);
constexpr TimeInForce TimeInForce_MIN = IMMEDIATE_OR_CANCEL;
constexpr TimeInForce TimeInForce_MAX = FILL_OR_KILL;
constexpr int TimeInForce_ARRAYSIZE = TimeInForce_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeInForce_descriptor();
template<typename T>
inline const std::string& TimeInForce_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeInForce>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeInForce_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeInForce_descriptor(), enum_t_value);
}
inline bool TimeInForce_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimeInForce* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeInForce>(
    TimeInForce_descriptor(), name, value);
}
enum OrderType : int {
  LIMIT = 0,
  MARKET_LIMIT = 1,
  MARKET_WITH_PROTECTION = 2,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderType_IsValid(int value);
constexpr OrderType OrderType_MIN = LIMIT;
constexpr OrderType OrderType_MAX = MARKET_WITH_PROTECTION;
constexpr int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor();
template<typename T>
inline const std::string& OrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderType_descriptor(), enum_t_value);
}
inline bool OrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
enum SelfTradePrevention : int {
  CANCEL_RESTING = 0,
  CANCEL_AGGRESSING = 1,
  ALLOW_SELF_TRADE = 2,
  SelfTradePrevention_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SelfTradePrevention_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SelfTradePrevention_IsValid(int value);
constexpr SelfTradePrevention SelfTradePrevention_MIN = CANCEL_RESTING;
constexpr SelfTradePrevention SelfTradePrevention_MAX = ALLOW_SELF_TRADE;
constexpr int SelfTradePrevention_ARRAYSIZE = SelfTradePrevention_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelfTradePrevention_descriptor();
template<typename T>
inline const std::string& SelfTradePrevention_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelfTradePrevention>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelfTradePrevention_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelfTradePrevention_descriptor(), enum_t_value);
}
inline bool SelfTradePrevention_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SelfTradePrevention* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelfTradePrevention>(
    SelfTradePrevention_descriptor(), name, value);
}
enum PostOnly : int {
  DISABLED = 0,
  ENABLED = 1,
  PostOnly_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PostOnly_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PostOnly_IsValid(int value);
constexpr PostOnly PostOnly_MIN = DISABLED;
constexpr PostOnly PostOnly_MAX = ENABLED;
constexpr int PostOnly_ARRAYSIZE = PostOnly_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PostOnly_descriptor();
template<typename T>
inline const std::string& PostOnly_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PostOnly>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PostOnly_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PostOnly_descriptor(), enum_t_value);
}
inline bool PostOnly_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PostOnly* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PostOnly>(
    PostOnly_descriptor(), name, value);
}
// ===================================================================

class Credentials PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.Credentials) */ {
 public:
  inline Credentials() : Credentials(nullptr) {}
  virtual ~Credentials();
  explicit constexpr Credentials(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Credentials(const Credentials& from);
  Credentials(Credentials&& from) noexcept
    : Credentials() {
    *this = ::std::move(from);
  }

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credentials& operator=(Credentials&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Credentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const Credentials* internal_default_instance() {
    return reinterpret_cast<const Credentials*>(
               &_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Credentials& a, Credentials& b) {
    a.Swap(&b);
  }
  inline void Swap(Credentials* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Credentials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Credentials* New() const final {
    return CreateMaybeMessage<Credentials>(nullptr);
  }

  Credentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Credentials>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Credentials& from);
  void MergeFrom(const Credentials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credentials* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.Credentials";
  }
  protected:
  explicit Credentials(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessKeyIdFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // string access_key_id = 1;
  void clear_access_key_id();
  const std::string& access_key_id() const;
  void set_access_key_id(const std::string& value);
  void set_access_key_id(std::string&& value);
  void set_access_key_id(const char* value);
  void set_access_key_id(const char* value, size_t size);
  std::string* mutable_access_key_id();
  std::string* release_access_key_id();
  void set_allocated_access_key_id(std::string* access_key_id);
  private:
  const std::string& _internal_access_key_id() const;
  void _internal_set_access_key_id(const std::string& value);
  std::string* _internal_mutable_access_key_id();
  public:

  // string signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.Credentials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_key_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class OrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.OrderRequest) */ {
 public:
  inline OrderRequest() : OrderRequest(nullptr) {}
  virtual ~OrderRequest();
  explicit constexpr OrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderRequest(const OrderRequest& from);
  OrderRequest(OrderRequest&& from) noexcept
    : OrderRequest() {
    *this = ::std::move(from);
  }

  inline OrderRequest& operator=(const OrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRequest& operator=(OrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderRequest& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kNew = 1,
    kCancel = 2,
    kModify = 3,
    kHeartbeat = 4,
    kMc = 5,
    INNER_NOT_SET = 0,
  };

  static inline const OrderRequest* internal_default_instance() {
    return reinterpret_cast<const OrderRequest*>(
               &_OrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderRequest& a, OrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderRequest* New() const final {
    return CreateMaybeMessage<OrderRequest>(nullptr);
  }

  OrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderRequest& from);
  void MergeFrom(const OrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.OrderRequest";
  }
  protected:
  explicit OrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewFieldNumber = 1,
    kCancelFieldNumber = 2,
    kModifyFieldNumber = 3,
    kHeartbeatFieldNumber = 4,
    kMcFieldNumber = 5,
  };
  // .trade.NewOrder new = 1;
  bool has_new_() const;
  private:
  bool _internal_has_new_() const;
  public:
  void clear_new_();
  const ::trade::NewOrder& new_() const;
  ::trade::NewOrder* release_new_();
  ::trade::NewOrder* mutable_new_();
  void set_allocated_new_(::trade::NewOrder* new_);
  private:
  const ::trade::NewOrder& _internal_new_() const;
  ::trade::NewOrder* _internal_mutable_new_();
  public:
  void unsafe_arena_set_allocated_new_(
      ::trade::NewOrder* new_);
  ::trade::NewOrder* unsafe_arena_release_new_();

  // .trade.CancelOrder cancel = 2;
  bool has_cancel() const;
  private:
  bool _internal_has_cancel() const;
  public:
  void clear_cancel();
  const ::trade::CancelOrder& cancel() const;
  ::trade::CancelOrder* release_cancel();
  ::trade::CancelOrder* mutable_cancel();
  void set_allocated_cancel(::trade::CancelOrder* cancel);
  private:
  const ::trade::CancelOrder& _internal_cancel() const;
  ::trade::CancelOrder* _internal_mutable_cancel();
  public:
  void unsafe_arena_set_allocated_cancel(
      ::trade::CancelOrder* cancel);
  ::trade::CancelOrder* unsafe_arena_release_cancel();

  // .trade.ModifyOrder modify = 3;
  bool has_modify() const;
  private:
  bool _internal_has_modify() const;
  public:
  void clear_modify();
  const ::trade::ModifyOrder& modify() const;
  ::trade::ModifyOrder* release_modify();
  ::trade::ModifyOrder* mutable_modify();
  void set_allocated_modify(::trade::ModifyOrder* modify);
  private:
  const ::trade::ModifyOrder& _internal_modify() const;
  ::trade::ModifyOrder* _internal_mutable_modify();
  public:
  void unsafe_arena_set_allocated_modify(
      ::trade::ModifyOrder* modify);
  ::trade::ModifyOrder* unsafe_arena_release_modify();

  // .trade.Heartbeat heartbeat = 4;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::trade::Heartbeat& heartbeat() const;
  ::trade::Heartbeat* release_heartbeat();
  ::trade::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::trade::Heartbeat* heartbeat);
  private:
  const ::trade::Heartbeat& _internal_heartbeat() const;
  ::trade::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::trade::Heartbeat* heartbeat);
  ::trade::Heartbeat* unsafe_arena_release_heartbeat();

  // .trade.MassCancel mc = 5;
  bool has_mc() const;
  private:
  bool _internal_has_mc() const;
  public:
  void clear_mc();
  const ::trade::MassCancel& mc() const;
  ::trade::MassCancel* release_mc();
  ::trade::MassCancel* mutable_mc();
  void set_allocated_mc(::trade::MassCancel* mc);
  private:
  const ::trade::MassCancel& _internal_mc() const;
  ::trade::MassCancel* _internal_mutable_mc();
  public:
  void unsafe_arena_set_allocated_mc(
      ::trade::MassCancel* mc);
  ::trade::MassCancel* unsafe_arena_release_mc();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:trade.OrderRequest)
 private:
  class _Internal;
  void set_has_new_();
  void set_has_cancel();
  void set_has_modify();
  void set_has_heartbeat();
  void set_has_mc();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::trade::NewOrder* new__;
    ::trade::CancelOrder* cancel_;
    ::trade::ModifyOrder* modify_;
    ::trade::Heartbeat* heartbeat_;
    ::trade::MassCancel* mc_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class NewOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.NewOrder) */ {
 public:
  inline NewOrder() : NewOrder(nullptr) {}
  virtual ~NewOrder();
  explicit constexpr NewOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewOrder(const NewOrder& from);
  NewOrder(NewOrder&& from) noexcept
    : NewOrder() {
    *this = ::std::move(from);
  }

  inline NewOrder& operator=(const NewOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewOrder& operator=(NewOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewOrder* internal_default_instance() {
    return reinterpret_cast<const NewOrder*>(
               &_NewOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewOrder& a, NewOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(NewOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewOrder* New() const final {
    return CreateMaybeMessage<NewOrder>(nullptr);
  }

  NewOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewOrder& from);
  void MergeFrom(const NewOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.NewOrder";
  }
  protected:
  explicit NewOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientOrderIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kPriceFieldNumber = 4,
    kQuantityFieldNumber = 5,
    kSideFieldNumber = 6,
    kTimeInForceFieldNumber = 7,
    kSubaccountIdFieldNumber = 9,
    kOrderTypeFieldNumber = 8,
    kSelfTradePreventionFieldNumber = 10,
    kPostOnlyFieldNumber = 11,
    kCancelOnDisconnectFieldNumber = 12,
  };
  // uint64 client_order_id = 1;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 2;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 3;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 4;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 5;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.Side side = 6;
  void clear_side();
  ::trade::Side side() const;
  void set_side(::trade::Side value);
  private:
  ::trade::Side _internal_side() const;
  void _internal_set_side(::trade::Side value);
  public:

  // .trade.TimeInForce time_in_force = 7;
  void clear_time_in_force();
  ::trade::TimeInForce time_in_force() const;
  void set_time_in_force(::trade::TimeInForce value);
  private:
  ::trade::TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::trade::TimeInForce value);
  public:

  // uint64 subaccount_id = 9;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.OrderType order_type = 8;
  void clear_order_type();
  ::trade::OrderType order_type() const;
  void set_order_type(::trade::OrderType value);
  private:
  ::trade::OrderType _internal_order_type() const;
  void _internal_set_order_type(::trade::OrderType value);
  public:

  // .trade.SelfTradePrevention self_trade_prevention = 10;
  bool has_self_trade_prevention() const;
  private:
  bool _internal_has_self_trade_prevention() const;
  public:
  void clear_self_trade_prevention();
  ::trade::SelfTradePrevention self_trade_prevention() const;
  void set_self_trade_prevention(::trade::SelfTradePrevention value);
  private:
  ::trade::SelfTradePrevention _internal_self_trade_prevention() const;
  void _internal_set_self_trade_prevention(::trade::SelfTradePrevention value);
  public:

  // .trade.PostOnly post_only = 11;
  void clear_post_only();
  ::trade::PostOnly post_only() const;
  void set_post_only(::trade::PostOnly value);
  private:
  ::trade::PostOnly _internal_post_only() const;
  void _internal_set_post_only(::trade::PostOnly value);
  public:

  // bool cancel_on_disconnect = 12;
  void clear_cancel_on_disconnect();
  bool cancel_on_disconnect() const;
  void set_cancel_on_disconnect(bool value);
  private:
  bool _internal_cancel_on_disconnect() const;
  void _internal_set_cancel_on_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trade.NewOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  int side_;
  int time_in_force_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  int order_type_;
  int self_trade_prevention_;
  int post_only_;
  bool cancel_on_disconnect_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class CancelOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.CancelOrder) */ {
 public:
  inline CancelOrder() : CancelOrder(nullptr) {}
  virtual ~CancelOrder();
  explicit constexpr CancelOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOrder(const CancelOrder& from);
  CancelOrder(CancelOrder&& from) noexcept
    : CancelOrder() {
    *this = ::std::move(from);
  }

  inline CancelOrder& operator=(const CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrder& operator=(CancelOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOrder* internal_default_instance() {
    return reinterpret_cast<const CancelOrder*>(
               &_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelOrder& a, CancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrder* New() const final {
    return CreateMaybeMessage<CancelOrder>(nullptr);
  }

  CancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOrder& from);
  void MergeFrom(const CancelOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.CancelOrder";
  }
  protected:
  explicit CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kClientOrderIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kSubaccountIdFieldNumber = 4,
  };
  // uint64 market_id = 1;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 2;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 4;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.CancelOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class ModifyOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.ModifyOrder) */ {
 public:
  inline ModifyOrder() : ModifyOrder(nullptr) {}
  virtual ~ModifyOrder();
  explicit constexpr ModifyOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyOrder(const ModifyOrder& from);
  ModifyOrder(ModifyOrder&& from) noexcept
    : ModifyOrder() {
    *this = ::std::move(from);
  }

  inline ModifyOrder& operator=(const ModifyOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyOrder& operator=(ModifyOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyOrder* internal_default_instance() {
    return reinterpret_cast<const ModifyOrder*>(
               &_ModifyOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModifyOrder& a, ModifyOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyOrder* New() const final {
    return CreateMaybeMessage<ModifyOrder>(nullptr);
  }

  ModifyOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyOrder& from);
  void MergeFrom(const ModifyOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.ModifyOrder";
  }
  protected:
  explicit ModifyOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kClientOrderIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kNewPriceFieldNumber = 4,
    kNewQuantityFieldNumber = 5,
    kSubaccountIdFieldNumber = 6,
    kSelfTradePreventionFieldNumber = 7,
    kPostOnlyFieldNumber = 8,
  };
  // uint64 market_id = 1;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 2;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 new_price = 4;
  void clear_new_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_price() const;
  void set_new_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_new_price() const;
  void _internal_set_new_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 new_quantity = 5;
  void clear_new_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_quantity() const;
  void set_new_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_new_quantity() const;
  void _internal_set_new_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 6;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.SelfTradePrevention self_trade_prevention = 7;
  bool has_self_trade_prevention() const;
  private:
  bool _internal_has_self_trade_prevention() const;
  public:
  void clear_self_trade_prevention();
  ::trade::SelfTradePrevention self_trade_prevention() const;
  void set_self_trade_prevention(::trade::SelfTradePrevention value);
  private:
  ::trade::SelfTradePrevention _internal_self_trade_prevention() const;
  void _internal_set_self_trade_prevention(::trade::SelfTradePrevention value);
  public:

  // .trade.PostOnly post_only = 8;
  void clear_post_only();
  ::trade::PostOnly post_only() const;
  void set_post_only(::trade::PostOnly value);
  private:
  ::trade::PostOnly _internal_post_only() const;
  void _internal_set_post_only(::trade::PostOnly value);
  public:

  // @@protoc_insertion_point(class_scope:trade.ModifyOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  int self_trade_prevention_;
  int post_only_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class MassCancel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.MassCancel) */ {
 public:
  inline MassCancel() : MassCancel(nullptr) {}
  virtual ~MassCancel();
  explicit constexpr MassCancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MassCancel(const MassCancel& from);
  MassCancel(MassCancel&& from) noexcept
    : MassCancel() {
    *this = ::std::move(from);
  }

  inline MassCancel& operator=(const MassCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MassCancel& operator=(MassCancel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MassCancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const MassCancel* internal_default_instance() {
    return reinterpret_cast<const MassCancel*>(
               &_MassCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MassCancel& a, MassCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(MassCancel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MassCancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MassCancel* New() const final {
    return CreateMaybeMessage<MassCancel>(nullptr);
  }

  MassCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MassCancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MassCancel& from);
  void MergeFrom(const MassCancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MassCancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.MassCancel";
  }
  protected:
  explicit MassCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kSideFieldNumber = 4,
  };
  // uint64 subaccount_id = 1;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 2;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 3;
  bool has_market_id() const;
  private:
  bool _internal_has_market_id() const;
  public:
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.Side side = 4;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  ::trade::Side side() const;
  void set_side(::trade::Side value);
  private:
  ::trade::Side _internal_side() const;
  void _internal_set_side(::trade::Side value);
  public:

  // @@protoc_insertion_point(class_scope:trade.MassCancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  int side_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class Heartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  virtual ~Heartbeat();
  explicit constexpr Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const final {
    return CreateMaybeMessage<Heartbeat>(nullptr);
  }

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class OrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.OrderResponse) */ {
 public:
  inline OrderResponse() : OrderResponse(nullptr) {}
  virtual ~OrderResponse();
  explicit constexpr OrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderResponse(const OrderResponse& from);
  OrderResponse(OrderResponse&& from) noexcept
    : OrderResponse() {
    *this = ::std::move(from);
  }

  inline OrderResponse& operator=(const OrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResponse& operator=(OrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderResponse& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kNewAck = 1,
    kCancelAck = 2,
    kModifyAck = 3,
    kNewReject = 4,
    kCancelReject = 5,
    kModifyReject = 6,
    kFill = 7,
    kHeartbeat = 8,
    kPosition = 9,
    kMassCancelAck = 10,
    INNER_NOT_SET = 0,
  };

  static inline const OrderResponse* internal_default_instance() {
    return reinterpret_cast<const OrderResponse*>(
               &_OrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OrderResponse& a, OrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderResponse* New() const final {
    return CreateMaybeMessage<OrderResponse>(nullptr);
  }

  OrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderResponse& from);
  void MergeFrom(const OrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.OrderResponse";
  }
  protected:
  explicit OrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAckFieldNumber = 1,
    kCancelAckFieldNumber = 2,
    kModifyAckFieldNumber = 3,
    kNewRejectFieldNumber = 4,
    kCancelRejectFieldNumber = 5,
    kModifyRejectFieldNumber = 6,
    kFillFieldNumber = 7,
    kHeartbeatFieldNumber = 8,
    kPositionFieldNumber = 9,
    kMassCancelAckFieldNumber = 10,
  };
  // .trade.NewOrderAck new_ack = 1;
  bool has_new_ack() const;
  private:
  bool _internal_has_new_ack() const;
  public:
  void clear_new_ack();
  const ::trade::NewOrderAck& new_ack() const;
  ::trade::NewOrderAck* release_new_ack();
  ::trade::NewOrderAck* mutable_new_ack();
  void set_allocated_new_ack(::trade::NewOrderAck* new_ack);
  private:
  const ::trade::NewOrderAck& _internal_new_ack() const;
  ::trade::NewOrderAck* _internal_mutable_new_ack();
  public:
  void unsafe_arena_set_allocated_new_ack(
      ::trade::NewOrderAck* new_ack);
  ::trade::NewOrderAck* unsafe_arena_release_new_ack();

  // .trade.CancelOrderAck cancel_ack = 2;
  bool has_cancel_ack() const;
  private:
  bool _internal_has_cancel_ack() const;
  public:
  void clear_cancel_ack();
  const ::trade::CancelOrderAck& cancel_ack() const;
  ::trade::CancelOrderAck* release_cancel_ack();
  ::trade::CancelOrderAck* mutable_cancel_ack();
  void set_allocated_cancel_ack(::trade::CancelOrderAck* cancel_ack);
  private:
  const ::trade::CancelOrderAck& _internal_cancel_ack() const;
  ::trade::CancelOrderAck* _internal_mutable_cancel_ack();
  public:
  void unsafe_arena_set_allocated_cancel_ack(
      ::trade::CancelOrderAck* cancel_ack);
  ::trade::CancelOrderAck* unsafe_arena_release_cancel_ack();

  // .trade.ModifyOrderAck modify_ack = 3;
  bool has_modify_ack() const;
  private:
  bool _internal_has_modify_ack() const;
  public:
  void clear_modify_ack();
  const ::trade::ModifyOrderAck& modify_ack() const;
  ::trade::ModifyOrderAck* release_modify_ack();
  ::trade::ModifyOrderAck* mutable_modify_ack();
  void set_allocated_modify_ack(::trade::ModifyOrderAck* modify_ack);
  private:
  const ::trade::ModifyOrderAck& _internal_modify_ack() const;
  ::trade::ModifyOrderAck* _internal_mutable_modify_ack();
  public:
  void unsafe_arena_set_allocated_modify_ack(
      ::trade::ModifyOrderAck* modify_ack);
  ::trade::ModifyOrderAck* unsafe_arena_release_modify_ack();

  // .trade.NewOrderReject new_reject = 4;
  bool has_new_reject() const;
  private:
  bool _internal_has_new_reject() const;
  public:
  void clear_new_reject();
  const ::trade::NewOrderReject& new_reject() const;
  ::trade::NewOrderReject* release_new_reject();
  ::trade::NewOrderReject* mutable_new_reject();
  void set_allocated_new_reject(::trade::NewOrderReject* new_reject);
  private:
  const ::trade::NewOrderReject& _internal_new_reject() const;
  ::trade::NewOrderReject* _internal_mutable_new_reject();
  public:
  void unsafe_arena_set_allocated_new_reject(
      ::trade::NewOrderReject* new_reject);
  ::trade::NewOrderReject* unsafe_arena_release_new_reject();

  // .trade.CancelOrderReject cancel_reject = 5;
  bool has_cancel_reject() const;
  private:
  bool _internal_has_cancel_reject() const;
  public:
  void clear_cancel_reject();
  const ::trade::CancelOrderReject& cancel_reject() const;
  ::trade::CancelOrderReject* release_cancel_reject();
  ::trade::CancelOrderReject* mutable_cancel_reject();
  void set_allocated_cancel_reject(::trade::CancelOrderReject* cancel_reject);
  private:
  const ::trade::CancelOrderReject& _internal_cancel_reject() const;
  ::trade::CancelOrderReject* _internal_mutable_cancel_reject();
  public:
  void unsafe_arena_set_allocated_cancel_reject(
      ::trade::CancelOrderReject* cancel_reject);
  ::trade::CancelOrderReject* unsafe_arena_release_cancel_reject();

  // .trade.ModifyOrderReject modify_reject = 6;
  bool has_modify_reject() const;
  private:
  bool _internal_has_modify_reject() const;
  public:
  void clear_modify_reject();
  const ::trade::ModifyOrderReject& modify_reject() const;
  ::trade::ModifyOrderReject* release_modify_reject();
  ::trade::ModifyOrderReject* mutable_modify_reject();
  void set_allocated_modify_reject(::trade::ModifyOrderReject* modify_reject);
  private:
  const ::trade::ModifyOrderReject& _internal_modify_reject() const;
  ::trade::ModifyOrderReject* _internal_mutable_modify_reject();
  public:
  void unsafe_arena_set_allocated_modify_reject(
      ::trade::ModifyOrderReject* modify_reject);
  ::trade::ModifyOrderReject* unsafe_arena_release_modify_reject();

  // .trade.Fill fill = 7;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  const ::trade::Fill& fill() const;
  ::trade::Fill* release_fill();
  ::trade::Fill* mutable_fill();
  void set_allocated_fill(::trade::Fill* fill);
  private:
  const ::trade::Fill& _internal_fill() const;
  ::trade::Fill* _internal_mutable_fill();
  public:
  void unsafe_arena_set_allocated_fill(
      ::trade::Fill* fill);
  ::trade::Fill* unsafe_arena_release_fill();

  // .trade.Heartbeat heartbeat = 8;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::trade::Heartbeat& heartbeat() const;
  ::trade::Heartbeat* release_heartbeat();
  ::trade::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::trade::Heartbeat* heartbeat);
  private:
  const ::trade::Heartbeat& _internal_heartbeat() const;
  ::trade::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::trade::Heartbeat* heartbeat);
  ::trade::Heartbeat* unsafe_arena_release_heartbeat();

  // .trade.AssetPosition position = 9;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::trade::AssetPosition& position() const;
  ::trade::AssetPosition* release_position();
  ::trade::AssetPosition* mutable_position();
  void set_allocated_position(::trade::AssetPosition* position);
  private:
  const ::trade::AssetPosition& _internal_position() const;
  ::trade::AssetPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::trade::AssetPosition* position);
  ::trade::AssetPosition* unsafe_arena_release_position();

  // .trade.MassCancelAck mass_cancel_ack = 10;
  bool has_mass_cancel_ack() const;
  private:
  bool _internal_has_mass_cancel_ack() const;
  public:
  void clear_mass_cancel_ack();
  const ::trade::MassCancelAck& mass_cancel_ack() const;
  ::trade::MassCancelAck* release_mass_cancel_ack();
  ::trade::MassCancelAck* mutable_mass_cancel_ack();
  void set_allocated_mass_cancel_ack(::trade::MassCancelAck* mass_cancel_ack);
  private:
  const ::trade::MassCancelAck& _internal_mass_cancel_ack() const;
  ::trade::MassCancelAck* _internal_mutable_mass_cancel_ack();
  public:
  void unsafe_arena_set_allocated_mass_cancel_ack(
      ::trade::MassCancelAck* mass_cancel_ack);
  ::trade::MassCancelAck* unsafe_arena_release_mass_cancel_ack();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:trade.OrderResponse)
 private:
  class _Internal;
  void set_has_new_ack();
  void set_has_cancel_ack();
  void set_has_modify_ack();
  void set_has_new_reject();
  void set_has_cancel_reject();
  void set_has_modify_reject();
  void set_has_fill();
  void set_has_heartbeat();
  void set_has_position();
  void set_has_mass_cancel_ack();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::trade::NewOrderAck* new_ack_;
    ::trade::CancelOrderAck* cancel_ack_;
    ::trade::ModifyOrderAck* modify_ack_;
    ::trade::NewOrderReject* new_reject_;
    ::trade::CancelOrderReject* cancel_reject_;
    ::trade::ModifyOrderReject* modify_reject_;
    ::trade::Fill* fill_;
    ::trade::Heartbeat* heartbeat_;
    ::trade::AssetPosition* position_;
    ::trade::MassCancelAck* mass_cancel_ack_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class NewOrderAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.NewOrderAck) */ {
 public:
  inline NewOrderAck() : NewOrderAck(nullptr) {}
  virtual ~NewOrderAck();
  explicit constexpr NewOrderAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewOrderAck(const NewOrderAck& from);
  NewOrderAck(NewOrderAck&& from) noexcept
    : NewOrderAck() {
    *this = ::std::move(from);
  }

  inline NewOrderAck& operator=(const NewOrderAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewOrderAck& operator=(NewOrderAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewOrderAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewOrderAck* internal_default_instance() {
    return reinterpret_cast<const NewOrderAck*>(
               &_NewOrderAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NewOrderAck& a, NewOrderAck& b) {
    a.Swap(&b);
  }
  inline void Swap(NewOrderAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewOrderAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewOrderAck* New() const final {
    return CreateMaybeMessage<NewOrderAck>(nullptr);
  }

  NewOrderAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewOrderAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewOrderAck& from);
  void MergeFrom(const NewOrderAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewOrderAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.NewOrderAck";
  }
  protected:
  explicit NewOrderAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSeqNumFieldNumber = 1,
    kClientOrderIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kExchangeOrderIdFieldNumber = 4,
    kMarketIdFieldNumber = 5,
    kPriceFieldNumber = 6,
    kQuantityFieldNumber = 7,
    kSideFieldNumber = 8,
    kTimeInForceFieldNumber = 9,
    kTransactTimeFieldNumber = 11,
    kOrderTypeFieldNumber = 10,
    kCancelOnDisconnectFieldNumber = 13,
    kSubaccountIdFieldNumber = 12,
  };
  // uint64 msg_seq_num = 1;
  void clear_msg_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num() const;
  void set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 2;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 exchange_order_id = 4;
  void clear_exchange_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id() const;
  void set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchange_order_id() const;
  void _internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 5;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 6;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 7;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.Side side = 8;
  void clear_side();
  ::trade::Side side() const;
  void set_side(::trade::Side value);
  private:
  ::trade::Side _internal_side() const;
  void _internal_set_side(::trade::Side value);
  public:

  // .trade.TimeInForce time_in_force = 9;
  void clear_time_in_force();
  ::trade::TimeInForce time_in_force() const;
  void set_time_in_force(::trade::TimeInForce value);
  private:
  ::trade::TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::trade::TimeInForce value);
  public:

  // uint64 transact_time = 11;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.OrderType order_type = 10;
  void clear_order_type();
  ::trade::OrderType order_type() const;
  void set_order_type(::trade::OrderType value);
  private:
  ::trade::OrderType _internal_order_type() const;
  void _internal_set_order_type(::trade::OrderType value);
  public:

  // bool cancel_on_disconnect = 13;
  void clear_cancel_on_disconnect();
  bool cancel_on_disconnect() const;
  void set_cancel_on_disconnect(bool value);
  private:
  bool _internal_cancel_on_disconnect() const;
  void _internal_set_cancel_on_disconnect(bool value);
  public:

  // uint64 subaccount_id = 12;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.NewOrderAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  int side_;
  int time_in_force_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  int order_type_;
  bool cancel_on_disconnect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.CancelOrderAck) */ {
 public:
  inline CancelOrderAck() : CancelOrderAck(nullptr) {}
  virtual ~CancelOrderAck();
  explicit constexpr CancelOrderAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOrderAck(const CancelOrderAck& from);
  CancelOrderAck(CancelOrderAck&& from) noexcept
    : CancelOrderAck() {
    *this = ::std::move(from);
  }

  inline CancelOrderAck& operator=(const CancelOrderAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrderAck& operator=(CancelOrderAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOrderAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOrderAck* internal_default_instance() {
    return reinterpret_cast<const CancelOrderAck*>(
               &_CancelOrderAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CancelOrderAck& a, CancelOrderAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrderAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrderAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrderAck* New() const final {
    return CreateMaybeMessage<CancelOrderAck>(nullptr);
  }

  CancelOrderAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrderAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOrderAck& from);
  void MergeFrom(const CancelOrderAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrderAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.CancelOrderAck";
  }
  protected:
  explicit CancelOrderAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CancelOrderAck_Reason Reason;
  static constexpr Reason UNCLASSIFIED =
    CancelOrderAck_Reason_UNCLASSIFIED;
  static constexpr Reason DISCONNECT =
    CancelOrderAck_Reason_DISCONNECT;
  static constexpr Reason REQUESTED =
    CancelOrderAck_Reason_REQUESTED;
  static constexpr Reason IOC =
    CancelOrderAck_Reason_IOC;
  static constexpr Reason STP_RESTING =
    CancelOrderAck_Reason_STP_RESTING;
  static constexpr Reason STP_AGGRESSING =
    CancelOrderAck_Reason_STP_AGGRESSING;
  static constexpr Reason MASS_CANCEL =
    CancelOrderAck_Reason_MASS_CANCEL;
  static inline bool Reason_IsValid(int value) {
    return CancelOrderAck_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    CancelOrderAck_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    CancelOrderAck_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    CancelOrderAck_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return CancelOrderAck_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return CancelOrderAck_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return CancelOrderAck_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSeqNumFieldNumber = 1,
    kClientOrderIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kTransactTimeFieldNumber = 4,
    kSubaccountIdFieldNumber = 5,
    kMarketIdFieldNumber = 7,
    kReasonFieldNumber = 6,
  };
  // uint64 msg_seq_num = 1;
  void clear_msg_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num() const;
  void set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 2;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 4;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 5;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 7;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.CancelOrderAck.Reason reason = 6;
  void clear_reason();
  ::trade::CancelOrderAck_Reason reason() const;
  void set_reason(::trade::CancelOrderAck_Reason value);
  private:
  ::trade::CancelOrderAck_Reason _internal_reason() const;
  void _internal_set_reason(::trade::CancelOrderAck_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:trade.CancelOrderAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class ModifyOrderAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.ModifyOrderAck) */ {
 public:
  inline ModifyOrderAck() : ModifyOrderAck(nullptr) {}
  virtual ~ModifyOrderAck();
  explicit constexpr ModifyOrderAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyOrderAck(const ModifyOrderAck& from);
  ModifyOrderAck(ModifyOrderAck&& from) noexcept
    : ModifyOrderAck() {
    *this = ::std::move(from);
  }

  inline ModifyOrderAck& operator=(const ModifyOrderAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyOrderAck& operator=(ModifyOrderAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyOrderAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyOrderAck* internal_default_instance() {
    return reinterpret_cast<const ModifyOrderAck*>(
               &_ModifyOrderAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ModifyOrderAck& a, ModifyOrderAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyOrderAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyOrderAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyOrderAck* New() const final {
    return CreateMaybeMessage<ModifyOrderAck>(nullptr);
  }

  ModifyOrderAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyOrderAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyOrderAck& from);
  void MergeFrom(const ModifyOrderAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyOrderAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.ModifyOrderAck";
  }
  protected:
  explicit ModifyOrderAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSeqNumFieldNumber = 1,
    kClientOrderIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kTransactTimeFieldNumber = 4,
    kRemainingQuantityFieldNumber = 5,
    kSubaccountIdFieldNumber = 6,
    kMarketIdFieldNumber = 7,
    kPriceFieldNumber = 8,
    kQuantityFieldNumber = 9,
    kCumulativeQuantityFieldNumber = 10,
  };
  // uint64 msg_seq_num = 1;
  void clear_msg_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num() const;
  void set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 2;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 4;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 remaining_quantity = 5;
  void clear_remaining_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_quantity() const;
  void set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remaining_quantity() const;
  void _internal_set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 6;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 7;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 8;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 9;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cumulative_quantity = 10;
  void clear_cumulative_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 cumulative_quantity() const;
  void set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cumulative_quantity() const;
  void _internal_set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.ModifyOrderAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cumulative_quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class MassCancelAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.MassCancelAck) */ {
 public:
  inline MassCancelAck() : MassCancelAck(nullptr) {}
  virtual ~MassCancelAck();
  explicit constexpr MassCancelAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MassCancelAck(const MassCancelAck& from);
  MassCancelAck(MassCancelAck&& from) noexcept
    : MassCancelAck() {
    *this = ::std::move(from);
  }

  inline MassCancelAck& operator=(const MassCancelAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline MassCancelAck& operator=(MassCancelAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MassCancelAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const MassCancelAck* internal_default_instance() {
    return reinterpret_cast<const MassCancelAck*>(
               &_MassCancelAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MassCancelAck& a, MassCancelAck& b) {
    a.Swap(&b);
  }
  inline void Swap(MassCancelAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MassCancelAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MassCancelAck* New() const final {
    return CreateMaybeMessage<MassCancelAck>(nullptr);
  }

  MassCancelAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MassCancelAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MassCancelAck& from);
  void MergeFrom(const MassCancelAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MassCancelAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.MassCancelAck";
  }
  protected:
  explicit MassCancelAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MassCancelAck_Reason Reason;
  static constexpr Reason UNCLASSIFIED =
    MassCancelAck_Reason_UNCLASSIFIED;
  static constexpr Reason INVALID_MARKET_ID =
    MassCancelAck_Reason_INVALID_MARKET_ID;
  static constexpr Reason INVALID_SIDE =
    MassCancelAck_Reason_INVALID_SIDE;
  static inline bool Reason_IsValid(int value) {
    return MassCancelAck_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    MassCancelAck_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    MassCancelAck_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    MassCancelAck_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return MassCancelAck_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return MassCancelAck_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return MassCancelAck_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSeqNumFieldNumber = 1,
    kSubaccountIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kTransactTimeFieldNumber = 4,
    kReasonFieldNumber = 6,
    kTotalAffectedOrdersFieldNumber = 7,
  };
  // uint64 msg_seq_num = 1;
  void clear_msg_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num() const;
  void set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 2;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 4;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.MassCancelAck.Reason reason = 6;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::trade::MassCancelAck_Reason reason() const;
  void set_reason(::trade::MassCancelAck_Reason value);
  private:
  ::trade::MassCancelAck_Reason _internal_reason() const;
  void _internal_set_reason(::trade::MassCancelAck_Reason value);
  public:

  // uint32 total_affected_orders = 7;
  void clear_total_affected_orders();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_affected_orders() const;
  void set_total_affected_orders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_affected_orders() const;
  void _internal_set_total_affected_orders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.MassCancelAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  int reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_affected_orders_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class NewOrderReject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.NewOrderReject) */ {
 public:
  inline NewOrderReject() : NewOrderReject(nullptr) {}
  virtual ~NewOrderReject();
  explicit constexpr NewOrderReject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewOrderReject(const NewOrderReject& from);
  NewOrderReject(NewOrderReject&& from) noexcept
    : NewOrderReject() {
    *this = ::std::move(from);
  }

  inline NewOrderReject& operator=(const NewOrderReject& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewOrderReject& operator=(NewOrderReject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewOrderReject& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewOrderReject* internal_default_instance() {
    return reinterpret_cast<const NewOrderReject*>(
               &_NewOrderReject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(NewOrderReject& a, NewOrderReject& b) {
    a.Swap(&b);
  }
  inline void Swap(NewOrderReject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewOrderReject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewOrderReject* New() const final {
    return CreateMaybeMessage<NewOrderReject>(nullptr);
  }

  NewOrderReject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewOrderReject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewOrderReject& from);
  void MergeFrom(const NewOrderReject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewOrderReject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.NewOrderReject";
  }
  protected:
  explicit NewOrderReject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef NewOrderReject_Reason Reason;
  static constexpr Reason UNCLASSIFIED =
    NewOrderReject_Reason_UNCLASSIFIED;
  static constexpr Reason INVALID_QUANTITY =
    NewOrderReject_Reason_INVALID_QUANTITY;
  static constexpr Reason INVALID_MARKET_ID =
    NewOrderReject_Reason_INVALID_MARKET_ID;
  static constexpr Reason DUPLICATE_ORDER_ID =
    NewOrderReject_Reason_DUPLICATE_ORDER_ID;
  static constexpr Reason INVALID_SIDE =
    NewOrderReject_Reason_INVALID_SIDE;
  static constexpr Reason INVALID_TIME_IN_FORCE =
    NewOrderReject_Reason_INVALID_TIME_IN_FORCE;
  static constexpr Reason INVALID_ORDER_TYPE =
    NewOrderReject_Reason_INVALID_ORDER_TYPE;
  static constexpr Reason INVALID_POST_ONLY =
    NewOrderReject_Reason_INVALID_POST_ONLY;
  static constexpr Reason INVALID_SELF_TRADE_PREVENTION =
    NewOrderReject_Reason_INVALID_SELF_TRADE_PREVENTION;
  static constexpr Reason UNKNOWN_TRADER =
    NewOrderReject_Reason_UNKNOWN_TRADER;
  static constexpr Reason PRICE_WITH_MARKET_ORDER =
    NewOrderReject_Reason_PRICE_WITH_MARKET_ORDER;
  static constexpr Reason POST_ONLY_WITH_MARKET_ORDER =
    NewOrderReject_Reason_POST_ONLY_WITH_MARKET_ORDER;
  static constexpr Reason POST_ONLY_WITH_INVALID_TIF =
    NewOrderReject_Reason_POST_ONLY_WITH_INVALID_TIF;
  static constexpr Reason EXCEEDED_SPOT_POSITION =
    NewOrderReject_Reason_EXCEEDED_SPOT_POSITION;
  static constexpr Reason NO_OPPOSING_LIMIT_ORDER =
    NewOrderReject_Reason_NO_OPPOSING_LIMIT_ORDER;
  static constexpr Reason POST_ONLY_WOULD_TRADE =
    NewOrderReject_Reason_POST_ONLY_WOULD_TRADE;
  static constexpr Reason DID_NOT_FULLY_FILL =
    NewOrderReject_Reason_DID_NOT_FULLY_FILL;
  static inline bool Reason_IsValid(int value) {
    return NewOrderReject_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    NewOrderReject_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    NewOrderReject_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    NewOrderReject_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return NewOrderReject_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return NewOrderReject_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return NewOrderReject_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSeqNumFieldNumber = 1,
    kClientOrderIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kTransactTimeFieldNumber = 4,
    kSubaccountIdFieldNumber = 5,
    kMarketIdFieldNumber = 7,
    kPriceFieldNumber = 8,
    kReasonFieldNumber = 6,
    kSideFieldNumber = 10,
    kQuantityFieldNumber = 9,
    kTimeInForceFieldNumber = 11,
    kOrderTypeFieldNumber = 12,
  };
  // uint64 msg_seq_num = 1;
  void clear_msg_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num() const;
  void set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 2;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 4;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 5;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 7;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 8;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.NewOrderReject.Reason reason = 6;
  void clear_reason();
  ::trade::NewOrderReject_Reason reason() const;
  void set_reason(::trade::NewOrderReject_Reason value);
  private:
  ::trade::NewOrderReject_Reason _internal_reason() const;
  void _internal_set_reason(::trade::NewOrderReject_Reason value);
  public:

  // .trade.Side side = 10;
  void clear_side();
  ::trade::Side side() const;
  void set_side(::trade::Side value);
  private:
  ::trade::Side _internal_side() const;
  void _internal_set_side(::trade::Side value);
  public:

  // uint64 quantity = 9;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.TimeInForce time_in_force = 11;
  void clear_time_in_force();
  ::trade::TimeInForce time_in_force() const;
  void set_time_in_force(::trade::TimeInForce value);
  private:
  ::trade::TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::trade::TimeInForce value);
  public:

  // .trade.OrderType order_type = 12;
  void clear_order_type();
  ::trade::OrderType order_type() const;
  void set_order_type(::trade::OrderType value);
  private:
  ::trade::OrderType _internal_order_type() const;
  void _internal_set_order_type(::trade::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:trade.NewOrderReject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  int reason_;
  int side_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  int time_in_force_;
  int order_type_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderReject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.CancelOrderReject) */ {
 public:
  inline CancelOrderReject() : CancelOrderReject(nullptr) {}
  virtual ~CancelOrderReject();
  explicit constexpr CancelOrderReject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOrderReject(const CancelOrderReject& from);
  CancelOrderReject(CancelOrderReject&& from) noexcept
    : CancelOrderReject() {
    *this = ::std::move(from);
  }

  inline CancelOrderReject& operator=(const CancelOrderReject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrderReject& operator=(CancelOrderReject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOrderReject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOrderReject* internal_default_instance() {
    return reinterpret_cast<const CancelOrderReject*>(
               &_CancelOrderReject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CancelOrderReject& a, CancelOrderReject& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrderReject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrderReject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrderReject* New() const final {
    return CreateMaybeMessage<CancelOrderReject>(nullptr);
  }

  CancelOrderReject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrderReject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOrderReject& from);
  void MergeFrom(const CancelOrderReject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrderReject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.CancelOrderReject";
  }
  protected:
  explicit CancelOrderReject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CancelOrderReject_Reason Reason;
  static constexpr Reason UNCLASSIFIED =
    CancelOrderReject_Reason_UNCLASSIFIED;
  static constexpr Reason INVALID_MARKET_ID =
    CancelOrderReject_Reason_INVALID_MARKET_ID;
  static constexpr Reason ORDER_NOT_FOUND =
    CancelOrderReject_Reason_ORDER_NOT_FOUND;
  static inline bool Reason_IsValid(int value) {
    return CancelOrderReject_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    CancelOrderReject_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    CancelOrderReject_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    CancelOrderReject_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return CancelOrderReject_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return CancelOrderReject_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return CancelOrderReject_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSeqNumFieldNumber = 1,
    kClientOrderIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kTransactTimeFieldNumber = 4,
    kSubaccountIdFieldNumber = 5,
    kMarketIdFieldNumber = 7,
    kReasonFieldNumber = 6,
  };
  // uint64 msg_seq_num = 1;
  void clear_msg_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num() const;
  void set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 2;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 4;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 5;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 7;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.CancelOrderReject.Reason reason = 6;
  void clear_reason();
  ::trade::CancelOrderReject_Reason reason() const;
  void set_reason(::trade::CancelOrderReject_Reason value);
  private:
  ::trade::CancelOrderReject_Reason _internal_reason() const;
  void _internal_set_reason(::trade::CancelOrderReject_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:trade.CancelOrderReject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class ModifyOrderReject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.ModifyOrderReject) */ {
 public:
  inline ModifyOrderReject() : ModifyOrderReject(nullptr) {}
  virtual ~ModifyOrderReject();
  explicit constexpr ModifyOrderReject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyOrderReject(const ModifyOrderReject& from);
  ModifyOrderReject(ModifyOrderReject&& from) noexcept
    : ModifyOrderReject() {
    *this = ::std::move(from);
  }

  inline ModifyOrderReject& operator=(const ModifyOrderReject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyOrderReject& operator=(ModifyOrderReject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyOrderReject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyOrderReject* internal_default_instance() {
    return reinterpret_cast<const ModifyOrderReject*>(
               &_ModifyOrderReject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ModifyOrderReject& a, ModifyOrderReject& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyOrderReject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyOrderReject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyOrderReject* New() const final {
    return CreateMaybeMessage<ModifyOrderReject>(nullptr);
  }

  ModifyOrderReject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyOrderReject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyOrderReject& from);
  void MergeFrom(const ModifyOrderReject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyOrderReject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.ModifyOrderReject";
  }
  protected:
  explicit ModifyOrderReject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ModifyOrderReject_Reason Reason;
  static constexpr Reason UNCLASSIFIED =
    ModifyOrderReject_Reason_UNCLASSIFIED;
  static constexpr Reason INVALID_QUANTITY =
    ModifyOrderReject_Reason_INVALID_QUANTITY;
  static constexpr Reason INVALID_MARKET_ID =
    ModifyOrderReject_Reason_INVALID_MARKET_ID;
  static constexpr Reason ORDER_NOT_FOUND =
    ModifyOrderReject_Reason_ORDER_NOT_FOUND;
  static constexpr Reason INVALID_IFM =
    ModifyOrderReject_Reason_INVALID_IFM;
  static constexpr Reason INVALID_POST_ONLY =
    ModifyOrderReject_Reason_INVALID_POST_ONLY;
  static constexpr Reason INVALID_SELF_TRADE_PREVENTION =
    ModifyOrderReject_Reason_INVALID_SELF_TRADE_PREVENTION;
  static constexpr Reason UNKNOWN_TRADER =
    ModifyOrderReject_Reason_UNKNOWN_TRADER;
  static constexpr Reason EXCEEDED_SPOT_POSITION =
    ModifyOrderReject_Reason_EXCEEDED_SPOT_POSITION;
  static constexpr Reason POST_ONLY_WOULD_TRADE =
    ModifyOrderReject_Reason_POST_ONLY_WOULD_TRADE;
  static inline bool Reason_IsValid(int value) {
    return ModifyOrderReject_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    ModifyOrderReject_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    ModifyOrderReject_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    ModifyOrderReject_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return ModifyOrderReject_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return ModifyOrderReject_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return ModifyOrderReject_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSeqNumFieldNumber = 1,
    kClientOrderIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
    kTransactTimeFieldNumber = 4,
    kSubaccountIdFieldNumber = 5,
    kMarketIdFieldNumber = 7,
    kReasonFieldNumber = 6,
  };
  // uint64 msg_seq_num = 1;
  void clear_msg_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num() const;
  void set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 2;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 3;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 4;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 5;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 7;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.ModifyOrderReject.Reason reason = 6;
  void clear_reason();
  ::trade::ModifyOrderReject_Reason reason() const;
  void set_reason(::trade::ModifyOrderReject_Reason value);
  private:
  ::trade::ModifyOrderReject_Reason _internal_reason() const;
  void _internal_set_reason(::trade::ModifyOrderReject_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:trade.ModifyOrderReject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class Fill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.Fill) */ {
 public:
  inline Fill() : Fill(nullptr) {}
  virtual ~Fill();
  explicit constexpr Fill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fill(const Fill& from);
  Fill(Fill&& from) noexcept
    : Fill() {
    *this = ::std::move(from);
  }

  inline Fill& operator=(const Fill& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fill& operator=(Fill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fill& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fill* internal_default_instance() {
    return reinterpret_cast<const Fill*>(
               &_Fill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Fill& a, Fill& b) {
    a.Swap(&b);
  }
  inline void Swap(Fill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fill* New() const final {
    return CreateMaybeMessage<Fill>(nullptr);
  }

  Fill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fill& from);
  void MergeFrom(const Fill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.Fill";
  }
  protected:
  explicit Fill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSeqNumFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kClientOrderIdFieldNumber = 3,
    kExchangeOrderIdFieldNumber = 4,
    kFillPriceFieldNumber = 5,
    kFillQuantityFieldNumber = 6,
    kLeavesQuantityFieldNumber = 7,
    kTransactTimeFieldNumber = 8,
    kSubaccountIdFieldNumber = 9,
    kCumulativeQuantityFieldNumber = 10,
  };
  // uint64 msg_seq_num = 1;
  void clear_msg_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num() const;
  void set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 2;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 client_order_id = 3;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 exchange_order_id = 4;
  void clear_exchange_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id() const;
  void set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchange_order_id() const;
  void _internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fill_price = 5;
  void clear_fill_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 fill_price() const;
  void set_fill_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fill_price() const;
  void _internal_set_fill_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fill_quantity = 6;
  void clear_fill_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 fill_quantity() const;
  void set_fill_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fill_quantity() const;
  void _internal_set_fill_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 leaves_quantity = 7;
  void clear_leaves_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 leaves_quantity() const;
  void set_leaves_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leaves_quantity() const;
  void _internal_set_leaves_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 8;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 9;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cumulative_quantity = 10;
  void clear_cumulative_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 cumulative_quantity() const;
  void set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cumulative_quantity() const;
  void _internal_set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.Fill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fill_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fill_quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leaves_quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cumulative_quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class AssetPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.AssetPosition) */ {
 public:
  inline AssetPosition() : AssetPosition(nullptr) {}
  virtual ~AssetPosition();
  explicit constexpr AssetPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetPosition(const AssetPosition& from);
  AssetPosition(AssetPosition&& from) noexcept
    : AssetPosition() {
    *this = ::std::move(from);
  }

  inline AssetPosition& operator=(const AssetPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetPosition& operator=(AssetPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetPosition* internal_default_instance() {
    return reinterpret_cast<const AssetPosition*>(
               &_AssetPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AssetPosition& a, AssetPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetPosition* New() const final {
    return CreateMaybeMessage<AssetPosition>(nullptr);
  }

  AssetPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetPosition& from);
  void MergeFrom(const AssetPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.AssetPosition";
  }
  protected:
  explicit AssetPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 3,
    kAvailableFieldNumber = 4,
    kSubaccountIdFieldNumber = 1,
    kAssetIdFieldNumber = 2,
  };
  // .trade.RawUnits total = 3;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  const ::trade::RawUnits& total() const;
  ::trade::RawUnits* release_total();
  ::trade::RawUnits* mutable_total();
  void set_allocated_total(::trade::RawUnits* total);
  private:
  const ::trade::RawUnits& _internal_total() const;
  ::trade::RawUnits* _internal_mutable_total();
  public:
  void unsafe_arena_set_allocated_total(
      ::trade::RawUnits* total);
  ::trade::RawUnits* unsafe_arena_release_total();

  // .trade.RawUnits available = 4;
  bool has_available() const;
  private:
  bool _internal_has_available() const;
  public:
  void clear_available();
  const ::trade::RawUnits& available() const;
  ::trade::RawUnits* release_available();
  ::trade::RawUnits* mutable_available();
  void set_allocated_available(::trade::RawUnits* available);
  private:
  const ::trade::RawUnits& _internal_available() const;
  ::trade::RawUnits* _internal_mutable_available();
  public:
  void unsafe_arena_set_allocated_available(
      ::trade::RawUnits* available);
  ::trade::RawUnits* unsafe_arena_release_available();

  // uint64 subaccount_id = 1;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 asset_id = 2;
  void clear_asset_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 asset_id() const;
  void set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_asset_id() const;
  void _internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.AssetPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::trade::RawUnits* total_;
  ::trade::RawUnits* available_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 asset_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class RawUnits PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.RawUnits) */ {
 public:
  inline RawUnits() : RawUnits(nullptr) {}
  virtual ~RawUnits();
  explicit constexpr RawUnits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawUnits(const RawUnits& from);
  RawUnits(RawUnits&& from) noexcept
    : RawUnits() {
    *this = ::std::move(from);
  }

  inline RawUnits& operator=(const RawUnits& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawUnits& operator=(RawUnits&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawUnits& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawUnits* internal_default_instance() {
    return reinterpret_cast<const RawUnits*>(
               &_RawUnits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RawUnits& a, RawUnits& b) {
    a.Swap(&b);
  }
  inline void Swap(RawUnits* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawUnits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawUnits* New() const final {
    return CreateMaybeMessage<RawUnits>(nullptr);
  }

  RawUnits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawUnits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawUnits& from);
  void MergeFrom(const RawUnits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawUnits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.RawUnits";
  }
  protected:
  explicit RawUnits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWord0FieldNumber = 1,
    kWord1FieldNumber = 2,
    kWord2FieldNumber = 3,
    kWord3FieldNumber = 4,
  };
  // uint64 word0 = 1;
  void clear_word0();
  ::PROTOBUF_NAMESPACE_ID::uint64 word0() const;
  void set_word0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_word0() const;
  void _internal_set_word0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 word1 = 2;
  void clear_word1();
  ::PROTOBUF_NAMESPACE_ID::uint64 word1() const;
  void set_word1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_word1() const;
  void _internal_set_word1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 word2 = 3;
  void clear_word2();
  ::PROTOBUF_NAMESPACE_ID::uint64 word2() const;
  void set_word2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_word2() const;
  void _internal_set_word2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 word3 = 4;
  void clear_word3();
  ::PROTOBUF_NAMESPACE_ID::uint64 word3() const;
  void set_word3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_word3() const;
  void _internal_set_word3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.RawUnits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 word0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 word1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 word2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 word3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class Bootstrap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.Bootstrap) */ {
 public:
  inline Bootstrap() : Bootstrap(nullptr) {}
  virtual ~Bootstrap();
  explicit constexpr Bootstrap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bootstrap(const Bootstrap& from);
  Bootstrap(Bootstrap&& from) noexcept
    : Bootstrap() {
    *this = ::std::move(from);
  }

  inline Bootstrap& operator=(const Bootstrap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bootstrap& operator=(Bootstrap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bootstrap& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kDone = 1,
    kResting = 2,
    kPosition = 3,
    INNER_NOT_SET = 0,
  };

  static inline const Bootstrap* internal_default_instance() {
    return reinterpret_cast<const Bootstrap*>(
               &_Bootstrap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Bootstrap& a, Bootstrap& b) {
    a.Swap(&b);
  }
  inline void Swap(Bootstrap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bootstrap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bootstrap* New() const final {
    return CreateMaybeMessage<Bootstrap>(nullptr);
  }

  Bootstrap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bootstrap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bootstrap& from);
  void MergeFrom(const Bootstrap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bootstrap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.Bootstrap";
  }
  protected:
  explicit Bootstrap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoneFieldNumber = 1,
    kRestingFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // .trade.Done done = 1;
  bool has_done() const;
  private:
  bool _internal_has_done() const;
  public:
  void clear_done();
  const ::trade::Done& done() const;
  ::trade::Done* release_done();
  ::trade::Done* mutable_done();
  void set_allocated_done(::trade::Done* done);
  private:
  const ::trade::Done& _internal_done() const;
  ::trade::Done* _internal_mutable_done();
  public:
  void unsafe_arena_set_allocated_done(
      ::trade::Done* done);
  ::trade::Done* unsafe_arena_release_done();

  // .trade.RestingOrders resting = 2;
  bool has_resting() const;
  private:
  bool _internal_has_resting() const;
  public:
  void clear_resting();
  const ::trade::RestingOrders& resting() const;
  ::trade::RestingOrders* release_resting();
  ::trade::RestingOrders* mutable_resting();
  void set_allocated_resting(::trade::RestingOrders* resting);
  private:
  const ::trade::RestingOrders& _internal_resting() const;
  ::trade::RestingOrders* _internal_mutable_resting();
  public:
  void unsafe_arena_set_allocated_resting(
      ::trade::RestingOrders* resting);
  ::trade::RestingOrders* unsafe_arena_release_resting();

  // .trade.AssetPositions position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::trade::AssetPositions& position() const;
  ::trade::AssetPositions* release_position();
  ::trade::AssetPositions* mutable_position();
  void set_allocated_position(::trade::AssetPositions* position);
  private:
  const ::trade::AssetPositions& _internal_position() const;
  ::trade::AssetPositions* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::trade::AssetPositions* position);
  ::trade::AssetPositions* unsafe_arena_release_position();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:trade.Bootstrap)
 private:
  class _Internal;
  void set_has_done();
  void set_has_resting();
  void set_has_position();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::trade::Done* done_;
    ::trade::RestingOrders* resting_;
    ::trade::AssetPositions* position_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class RestingOrders PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.RestingOrders) */ {
 public:
  inline RestingOrders() : RestingOrders(nullptr) {}
  virtual ~RestingOrders();
  explicit constexpr RestingOrders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestingOrders(const RestingOrders& from);
  RestingOrders(RestingOrders&& from) noexcept
    : RestingOrders() {
    *this = ::std::move(from);
  }

  inline RestingOrders& operator=(const RestingOrders& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestingOrders& operator=(RestingOrders&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestingOrders& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestingOrders* internal_default_instance() {
    return reinterpret_cast<const RestingOrders*>(
               &_RestingOrders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RestingOrders& a, RestingOrders& b) {
    a.Swap(&b);
  }
  inline void Swap(RestingOrders* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestingOrders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestingOrders* New() const final {
    return CreateMaybeMessage<RestingOrders>(nullptr);
  }

  RestingOrders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestingOrders>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestingOrders& from);
  void MergeFrom(const RestingOrders& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestingOrders* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.RestingOrders";
  }
  protected:
  explicit RestingOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .trade.RestingOrder orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::trade::RestingOrder* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::RestingOrder >*
      mutable_orders();
  private:
  const ::trade::RestingOrder& _internal_orders(int index) const;
  ::trade::RestingOrder* _internal_add_orders();
  public:
  const ::trade::RestingOrder& orders(int index) const;
  ::trade::RestingOrder* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::RestingOrder >&
      orders() const;

  // @@protoc_insertion_point(class_scope:trade.RestingOrders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::RestingOrder > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class AssetPositions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.AssetPositions) */ {
 public:
  inline AssetPositions() : AssetPositions(nullptr) {}
  virtual ~AssetPositions();
  explicit constexpr AssetPositions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetPositions(const AssetPositions& from);
  AssetPositions(AssetPositions&& from) noexcept
    : AssetPositions() {
    *this = ::std::move(from);
  }

  inline AssetPositions& operator=(const AssetPositions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetPositions& operator=(AssetPositions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetPositions& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetPositions* internal_default_instance() {
    return reinterpret_cast<const AssetPositions*>(
               &_AssetPositions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AssetPositions& a, AssetPositions& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetPositions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetPositions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetPositions* New() const final {
    return CreateMaybeMessage<AssetPositions>(nullptr);
  }

  AssetPositions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetPositions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetPositions& from);
  void MergeFrom(const AssetPositions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetPositions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.AssetPositions";
  }
  protected:
  explicit AssetPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
  };
  // repeated .trade.AssetPosition positions = 1;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::trade::AssetPosition* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::AssetPosition >*
      mutable_positions();
  private:
  const ::trade::AssetPosition& _internal_positions(int index) const;
  ::trade::AssetPosition* _internal_add_positions();
  public:
  const ::trade::AssetPosition& positions(int index) const;
  ::trade::AssetPosition* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::AssetPosition >&
      positions() const;

  // @@protoc_insertion_point(class_scope:trade.AssetPositions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::AssetPosition > positions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class Done PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.Done) */ {
 public:
  inline Done() : Done(nullptr) {}
  virtual ~Done();
  explicit constexpr Done(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Done(const Done& from);
  Done(Done&& from) noexcept
    : Done() {
    *this = ::std::move(from);
  }

  inline Done& operator=(const Done& from) {
    CopyFrom(from);
    return *this;
  }
  inline Done& operator=(Done&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Done& default_instance() {
    return *internal_default_instance();
  }
  static inline const Done* internal_default_instance() {
    return reinterpret_cast<const Done*>(
               &_Done_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Done& a, Done& b) {
    a.Swap(&b);
  }
  inline void Swap(Done* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Done* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Done* New() const final {
    return CreateMaybeMessage<Done>(nullptr);
  }

  Done* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Done>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Done& from);
  void MergeFrom(const Done& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Done* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.Done";
  }
  protected:
  explicit Done(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestTransactTimeFieldNumber = 1,
  };
  // uint64 latest_transact_time = 1;
  void clear_latest_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_transact_time() const;
  void set_latest_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest_transact_time() const;
  void _internal_set_latest_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.Done)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_transact_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class RestingOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.RestingOrder) */ {
 public:
  inline RestingOrder() : RestingOrder(nullptr) {}
  virtual ~RestingOrder();
  explicit constexpr RestingOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestingOrder(const RestingOrder& from);
  RestingOrder(RestingOrder&& from) noexcept
    : RestingOrder() {
    *this = ::std::move(from);
  }

  inline RestingOrder& operator=(const RestingOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestingOrder& operator=(RestingOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestingOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestingOrder* internal_default_instance() {
    return reinterpret_cast<const RestingOrder*>(
               &_RestingOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RestingOrder& a, RestingOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(RestingOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestingOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestingOrder* New() const final {
    return CreateMaybeMessage<RestingOrder>(nullptr);
  }

  RestingOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestingOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestingOrder& from);
  void MergeFrom(const RestingOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestingOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.RestingOrder";
  }
  protected:
  explicit RestingOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_trade_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientOrderIdFieldNumber = 1,
    kExchangeOrderIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kPriceFieldNumber = 4,
    kOrderQuantityFieldNumber = 5,
    kSideFieldNumber = 6,
    kTimeInForceFieldNumber = 7,
    kRemainingQuantityFieldNumber = 9,
    kRestTimeFieldNumber = 10,
    kSubaccountIdFieldNumber = 11,
    kCumulativeQuantityFieldNumber = 12,
    kOrderTypeFieldNumber = 8,
  };
  // uint64 client_order_id = 1;
  void clear_client_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id() const;
  void set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_order_id() const;
  void _internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 exchange_order_id = 2;
  void clear_exchange_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id() const;
  void set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchange_order_id() const;
  void _internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 market_id = 3;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 4;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 order_quantity = 5;
  void clear_order_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 order_quantity() const;
  void set_order_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_order_quantity() const;
  void _internal_set_order_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.Side side = 6;
  void clear_side();
  ::trade::Side side() const;
  void set_side(::trade::Side value);
  private:
  ::trade::Side _internal_side() const;
  void _internal_set_side(::trade::Side value);
  public:

  // .trade.TimeInForce time_in_force = 7;
  void clear_time_in_force();
  ::trade::TimeInForce time_in_force() const;
  void set_time_in_force(::trade::TimeInForce value);
  private:
  ::trade::TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::trade::TimeInForce value);
  public:

  // uint64 remaining_quantity = 9;
  void clear_remaining_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_quantity() const;
  void set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remaining_quantity() const;
  void _internal_set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rest_time = 10;
  void clear_rest_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 rest_time() const;
  void set_rest_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rest_time() const;
  void _internal_set_rest_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 subaccount_id = 11;
  void clear_subaccount_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id() const;
  void set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_subaccount_id() const;
  void _internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 cumulative_quantity = 12;
  void clear_cumulative_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 cumulative_quantity() const;
  void set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cumulative_quantity() const;
  void _internal_set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .trade.OrderType order_type = 8;
  void clear_order_type();
  ::trade::OrderType order_type() const;
  void set_order_type(::trade::OrderType value);
  private:
  ::trade::OrderType _internal_order_type() const;
  void _internal_set_order_type(::trade::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:trade.RestingOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 order_quantity_;
  int side_;
  int time_in_force_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rest_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 subaccount_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cumulative_quantity_;
  int order_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Credentials

// string access_key_id = 1;
inline void Credentials::clear_access_key_id() {
  access_key_id_.ClearToEmpty();
}
inline const std::string& Credentials::access_key_id() const {
  // @@protoc_insertion_point(field_get:trade.Credentials.access_key_id)
  return _internal_access_key_id();
}
inline void Credentials::set_access_key_id(const std::string& value) {
  _internal_set_access_key_id(value);
  // @@protoc_insertion_point(field_set:trade.Credentials.access_key_id)
}
inline std::string* Credentials::mutable_access_key_id() {
  // @@protoc_insertion_point(field_mutable:trade.Credentials.access_key_id)
  return _internal_mutable_access_key_id();
}
inline const std::string& Credentials::_internal_access_key_id() const {
  return access_key_id_.Get();
}
inline void Credentials::_internal_set_access_key_id(const std::string& value) {
  
  access_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Credentials::set_access_key_id(std::string&& value) {
  
  access_key_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.Credentials.access_key_id)
}
inline void Credentials::set_access_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trade.Credentials.access_key_id)
}
inline void Credentials::set_access_key_id(const char* value,
    size_t size) {
  
  access_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.Credentials.access_key_id)
}
inline std::string* Credentials::_internal_mutable_access_key_id() {
  
  return access_key_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Credentials::release_access_key_id() {
  // @@protoc_insertion_point(field_release:trade.Credentials.access_key_id)
  return access_key_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Credentials::set_allocated_access_key_id(std::string* access_key_id) {
  if (access_key_id != nullptr) {
    
  } else {
    
  }
  access_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.Credentials.access_key_id)
}

// string signature = 2;
inline void Credentials::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Credentials::signature() const {
  // @@protoc_insertion_point(field_get:trade.Credentials.signature)
  return _internal_signature();
}
inline void Credentials::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:trade.Credentials.signature)
}
inline std::string* Credentials::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:trade.Credentials.signature)
  return _internal_mutable_signature();
}
inline const std::string& Credentials::_internal_signature() const {
  return signature_.Get();
}
inline void Credentials::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Credentials::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.Credentials.signature)
}
inline void Credentials::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trade.Credentials.signature)
}
inline void Credentials::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.Credentials.signature)
}
inline std::string* Credentials::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Credentials::release_signature() {
  // @@protoc_insertion_point(field_release:trade.Credentials.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Credentials::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.Credentials.signature)
}

// uint64 timestamp = 3;
inline void Credentials::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Credentials::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Credentials::timestamp() const {
  // @@protoc_insertion_point(field_get:trade.Credentials.timestamp)
  return _internal_timestamp();
}
inline void Credentials::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Credentials::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:trade.Credentials.timestamp)
}

// -------------------------------------------------------------------

// OrderRequest

// .trade.NewOrder new = 1;
inline bool OrderRequest::_internal_has_new_() const {
  return inner_case() == kNew;
}
inline bool OrderRequest::has_new_() const {
  return _internal_has_new_();
}
inline void OrderRequest::set_has_new_() {
  _oneof_case_[0] = kNew;
}
inline void OrderRequest::clear_new_() {
  if (_internal_has_new_()) {
    if (GetArena() == nullptr) {
      delete inner_.new__;
    }
    clear_has_inner();
  }
}
inline ::trade::NewOrder* OrderRequest::release_new_() {
  // @@protoc_insertion_point(field_release:trade.OrderRequest.new)
  if (_internal_has_new_()) {
    clear_has_inner();
      ::trade::NewOrder* temp = inner_.new__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.new__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::NewOrder& OrderRequest::_internal_new_() const {
  return _internal_has_new_()
      ? *inner_.new__
      : reinterpret_cast< ::trade::NewOrder&>(::trade::_NewOrder_default_instance_);
}
inline const ::trade::NewOrder& OrderRequest::new_() const {
  // @@protoc_insertion_point(field_get:trade.OrderRequest.new)
  return _internal_new_();
}
inline ::trade::NewOrder* OrderRequest::unsafe_arena_release_new_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderRequest.new)
  if (_internal_has_new_()) {
    clear_has_inner();
    ::trade::NewOrder* temp = inner_.new__;
    inner_.new__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderRequest::unsafe_arena_set_allocated_new_(::trade::NewOrder* new_) {
  clear_inner();
  if (new_) {
    set_has_new_();
    inner_.new__ = new_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderRequest.new)
}
inline ::trade::NewOrder* OrderRequest::_internal_mutable_new_() {
  if (!_internal_has_new_()) {
    clear_inner();
    set_has_new_();
    inner_.new__ = CreateMaybeMessage< ::trade::NewOrder >(GetArena());
  }
  return inner_.new__;
}
inline ::trade::NewOrder* OrderRequest::mutable_new_() {
  // @@protoc_insertion_point(field_mutable:trade.OrderRequest.new)
  return _internal_mutable_new_();
}

// .trade.CancelOrder cancel = 2;
inline bool OrderRequest::_internal_has_cancel() const {
  return inner_case() == kCancel;
}
inline bool OrderRequest::has_cancel() const {
  return _internal_has_cancel();
}
inline void OrderRequest::set_has_cancel() {
  _oneof_case_[0] = kCancel;
}
inline void OrderRequest::clear_cancel() {
  if (_internal_has_cancel()) {
    if (GetArena() == nullptr) {
      delete inner_.cancel_;
    }
    clear_has_inner();
  }
}
inline ::trade::CancelOrder* OrderRequest::release_cancel() {
  // @@protoc_insertion_point(field_release:trade.OrderRequest.cancel)
  if (_internal_has_cancel()) {
    clear_has_inner();
      ::trade::CancelOrder* temp = inner_.cancel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::CancelOrder& OrderRequest::_internal_cancel() const {
  return _internal_has_cancel()
      ? *inner_.cancel_
      : reinterpret_cast< ::trade::CancelOrder&>(::trade::_CancelOrder_default_instance_);
}
inline const ::trade::CancelOrder& OrderRequest::cancel() const {
  // @@protoc_insertion_point(field_get:trade.OrderRequest.cancel)
  return _internal_cancel();
}
inline ::trade::CancelOrder* OrderRequest::unsafe_arena_release_cancel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderRequest.cancel)
  if (_internal_has_cancel()) {
    clear_has_inner();
    ::trade::CancelOrder* temp = inner_.cancel_;
    inner_.cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderRequest::unsafe_arena_set_allocated_cancel(::trade::CancelOrder* cancel) {
  clear_inner();
  if (cancel) {
    set_has_cancel();
    inner_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderRequest.cancel)
}
inline ::trade::CancelOrder* OrderRequest::_internal_mutable_cancel() {
  if (!_internal_has_cancel()) {
    clear_inner();
    set_has_cancel();
    inner_.cancel_ = CreateMaybeMessage< ::trade::CancelOrder >(GetArena());
  }
  return inner_.cancel_;
}
inline ::trade::CancelOrder* OrderRequest::mutable_cancel() {
  // @@protoc_insertion_point(field_mutable:trade.OrderRequest.cancel)
  return _internal_mutable_cancel();
}

// .trade.ModifyOrder modify = 3;
inline bool OrderRequest::_internal_has_modify() const {
  return inner_case() == kModify;
}
inline bool OrderRequest::has_modify() const {
  return _internal_has_modify();
}
inline void OrderRequest::set_has_modify() {
  _oneof_case_[0] = kModify;
}
inline void OrderRequest::clear_modify() {
  if (_internal_has_modify()) {
    if (GetArena() == nullptr) {
      delete inner_.modify_;
    }
    clear_has_inner();
  }
}
inline ::trade::ModifyOrder* OrderRequest::release_modify() {
  // @@protoc_insertion_point(field_release:trade.OrderRequest.modify)
  if (_internal_has_modify()) {
    clear_has_inner();
      ::trade::ModifyOrder* temp = inner_.modify_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.modify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::ModifyOrder& OrderRequest::_internal_modify() const {
  return _internal_has_modify()
      ? *inner_.modify_
      : reinterpret_cast< ::trade::ModifyOrder&>(::trade::_ModifyOrder_default_instance_);
}
inline const ::trade::ModifyOrder& OrderRequest::modify() const {
  // @@protoc_insertion_point(field_get:trade.OrderRequest.modify)
  return _internal_modify();
}
inline ::trade::ModifyOrder* OrderRequest::unsafe_arena_release_modify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderRequest.modify)
  if (_internal_has_modify()) {
    clear_has_inner();
    ::trade::ModifyOrder* temp = inner_.modify_;
    inner_.modify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderRequest::unsafe_arena_set_allocated_modify(::trade::ModifyOrder* modify) {
  clear_inner();
  if (modify) {
    set_has_modify();
    inner_.modify_ = modify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderRequest.modify)
}
inline ::trade::ModifyOrder* OrderRequest::_internal_mutable_modify() {
  if (!_internal_has_modify()) {
    clear_inner();
    set_has_modify();
    inner_.modify_ = CreateMaybeMessage< ::trade::ModifyOrder >(GetArena());
  }
  return inner_.modify_;
}
inline ::trade::ModifyOrder* OrderRequest::mutable_modify() {
  // @@protoc_insertion_point(field_mutable:trade.OrderRequest.modify)
  return _internal_mutable_modify();
}

// .trade.Heartbeat heartbeat = 4;
inline bool OrderRequest::_internal_has_heartbeat() const {
  return inner_case() == kHeartbeat;
}
inline bool OrderRequest::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void OrderRequest::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void OrderRequest::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete inner_.heartbeat_;
    }
    clear_has_inner();
  }
}
inline ::trade::Heartbeat* OrderRequest::release_heartbeat() {
  // @@protoc_insertion_point(field_release:trade.OrderRequest.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
      ::trade::Heartbeat* temp = inner_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::Heartbeat& OrderRequest::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *inner_.heartbeat_
      : reinterpret_cast< ::trade::Heartbeat&>(::trade::_Heartbeat_default_instance_);
}
inline const ::trade::Heartbeat& OrderRequest::heartbeat() const {
  // @@protoc_insertion_point(field_get:trade.OrderRequest.heartbeat)
  return _internal_heartbeat();
}
inline ::trade::Heartbeat* OrderRequest::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderRequest.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
    ::trade::Heartbeat* temp = inner_.heartbeat_;
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderRequest::unsafe_arena_set_allocated_heartbeat(::trade::Heartbeat* heartbeat) {
  clear_inner();
  if (heartbeat) {
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderRequest.heartbeat)
}
inline ::trade::Heartbeat* OrderRequest::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_inner();
    set_has_heartbeat();
    inner_.heartbeat_ = CreateMaybeMessage< ::trade::Heartbeat >(GetArena());
  }
  return inner_.heartbeat_;
}
inline ::trade::Heartbeat* OrderRequest::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:trade.OrderRequest.heartbeat)
  return _internal_mutable_heartbeat();
}

// .trade.MassCancel mc = 5;
inline bool OrderRequest::_internal_has_mc() const {
  return inner_case() == kMc;
}
inline bool OrderRequest::has_mc() const {
  return _internal_has_mc();
}
inline void OrderRequest::set_has_mc() {
  _oneof_case_[0] = kMc;
}
inline void OrderRequest::clear_mc() {
  if (_internal_has_mc()) {
    if (GetArena() == nullptr) {
      delete inner_.mc_;
    }
    clear_has_inner();
  }
}
inline ::trade::MassCancel* OrderRequest::release_mc() {
  // @@protoc_insertion_point(field_release:trade.OrderRequest.mc)
  if (_internal_has_mc()) {
    clear_has_inner();
      ::trade::MassCancel* temp = inner_.mc_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::MassCancel& OrderRequest::_internal_mc() const {
  return _internal_has_mc()
      ? *inner_.mc_
      : reinterpret_cast< ::trade::MassCancel&>(::trade::_MassCancel_default_instance_);
}
inline const ::trade::MassCancel& OrderRequest::mc() const {
  // @@protoc_insertion_point(field_get:trade.OrderRequest.mc)
  return _internal_mc();
}
inline ::trade::MassCancel* OrderRequest::unsafe_arena_release_mc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderRequest.mc)
  if (_internal_has_mc()) {
    clear_has_inner();
    ::trade::MassCancel* temp = inner_.mc_;
    inner_.mc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderRequest::unsafe_arena_set_allocated_mc(::trade::MassCancel* mc) {
  clear_inner();
  if (mc) {
    set_has_mc();
    inner_.mc_ = mc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderRequest.mc)
}
inline ::trade::MassCancel* OrderRequest::_internal_mutable_mc() {
  if (!_internal_has_mc()) {
    clear_inner();
    set_has_mc();
    inner_.mc_ = CreateMaybeMessage< ::trade::MassCancel >(GetArena());
  }
  return inner_.mc_;
}
inline ::trade::MassCancel* OrderRequest::mutable_mc() {
  // @@protoc_insertion_point(field_mutable:trade.OrderRequest.mc)
  return _internal_mutable_mc();
}

inline bool OrderRequest::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void OrderRequest::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline OrderRequest::InnerCase OrderRequest::inner_case() const {
  return OrderRequest::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NewOrder

// uint64 client_order_id = 1;
inline void NewOrder::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.client_order_id)
  return _internal_client_order_id();
}
inline void NewOrder::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void NewOrder::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.client_order_id)
}

// uint64 request_id = 2;
inline void NewOrder::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::request_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.request_id)
  return _internal_request_id();
}
inline void NewOrder::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void NewOrder::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.request_id)
}

// uint64 market_id = 3;
inline void NewOrder::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::market_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.market_id)
  return _internal_market_id();
}
inline void NewOrder::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void NewOrder::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.market_id)
}

// uint64 price = 4;
inline bool NewOrder::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewOrder::has_price() const {
  return _internal_has_price();
}
inline void NewOrder::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::price() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.price)
  return _internal_price();
}
inline void NewOrder::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  price_ = value;
}
inline void NewOrder::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.price)
}

// uint64 quantity = 5;
inline void NewOrder::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::quantity() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.quantity)
  return _internal_quantity();
}
inline void NewOrder::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void NewOrder::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.quantity)
}

// .trade.Side side = 6;
inline void NewOrder::clear_side() {
  side_ = 0;
}
inline ::trade::Side NewOrder::_internal_side() const {
  return static_cast< ::trade::Side >(side_);
}
inline ::trade::Side NewOrder::side() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.side)
  return _internal_side();
}
inline void NewOrder::_internal_set_side(::trade::Side value) {
  
  side_ = value;
}
inline void NewOrder::set_side(::trade::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.side)
}

// .trade.TimeInForce time_in_force = 7;
inline void NewOrder::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::trade::TimeInForce NewOrder::_internal_time_in_force() const {
  return static_cast< ::trade::TimeInForce >(time_in_force_);
}
inline ::trade::TimeInForce NewOrder::time_in_force() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.time_in_force)
  return _internal_time_in_force();
}
inline void NewOrder::_internal_set_time_in_force(::trade::TimeInForce value) {
  
  time_in_force_ = value;
}
inline void NewOrder::set_time_in_force(::trade::TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.time_in_force)
}

// .trade.OrderType order_type = 8;
inline void NewOrder::clear_order_type() {
  order_type_ = 0;
}
inline ::trade::OrderType NewOrder::_internal_order_type() const {
  return static_cast< ::trade::OrderType >(order_type_);
}
inline ::trade::OrderType NewOrder::order_type() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.order_type)
  return _internal_order_type();
}
inline void NewOrder::_internal_set_order_type(::trade::OrderType value) {
  
  order_type_ = value;
}
inline void NewOrder::set_order_type(::trade::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.order_type)
}

// uint64 subaccount_id = 9;
inline void NewOrder::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrder::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.subaccount_id)
  return _internal_subaccount_id();
}
inline void NewOrder::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void NewOrder::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.subaccount_id)
}

// .trade.SelfTradePrevention self_trade_prevention = 10;
inline bool NewOrder::_internal_has_self_trade_prevention() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NewOrder::has_self_trade_prevention() const {
  return _internal_has_self_trade_prevention();
}
inline void NewOrder::clear_self_trade_prevention() {
  self_trade_prevention_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::trade::SelfTradePrevention NewOrder::_internal_self_trade_prevention() const {
  return static_cast< ::trade::SelfTradePrevention >(self_trade_prevention_);
}
inline ::trade::SelfTradePrevention NewOrder::self_trade_prevention() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.self_trade_prevention)
  return _internal_self_trade_prevention();
}
inline void NewOrder::_internal_set_self_trade_prevention(::trade::SelfTradePrevention value) {
  _has_bits_[0] |= 0x00000002u;
  self_trade_prevention_ = value;
}
inline void NewOrder::set_self_trade_prevention(::trade::SelfTradePrevention value) {
  _internal_set_self_trade_prevention(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.self_trade_prevention)
}

// .trade.PostOnly post_only = 11;
inline void NewOrder::clear_post_only() {
  post_only_ = 0;
}
inline ::trade::PostOnly NewOrder::_internal_post_only() const {
  return static_cast< ::trade::PostOnly >(post_only_);
}
inline ::trade::PostOnly NewOrder::post_only() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.post_only)
  return _internal_post_only();
}
inline void NewOrder::_internal_set_post_only(::trade::PostOnly value) {
  
  post_only_ = value;
}
inline void NewOrder::set_post_only(::trade::PostOnly value) {
  _internal_set_post_only(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.post_only)
}

// bool cancel_on_disconnect = 12;
inline void NewOrder::clear_cancel_on_disconnect() {
  cancel_on_disconnect_ = false;
}
inline bool NewOrder::_internal_cancel_on_disconnect() const {
  return cancel_on_disconnect_;
}
inline bool NewOrder::cancel_on_disconnect() const {
  // @@protoc_insertion_point(field_get:trade.NewOrder.cancel_on_disconnect)
  return _internal_cancel_on_disconnect();
}
inline void NewOrder::_internal_set_cancel_on_disconnect(bool value) {
  
  cancel_on_disconnect_ = value;
}
inline void NewOrder::set_cancel_on_disconnect(bool value) {
  _internal_set_cancel_on_disconnect(value);
  // @@protoc_insertion_point(field_set:trade.NewOrder.cancel_on_disconnect)
}

// -------------------------------------------------------------------

// CancelOrder

// uint64 market_id = 1;
inline void CancelOrder::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrder::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrder::market_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrder.market_id)
  return _internal_market_id();
}
inline void CancelOrder::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void CancelOrder::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrder.market_id)
}

// uint64 client_order_id = 2;
inline void CancelOrder::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrder::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrder::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrder.client_order_id)
  return _internal_client_order_id();
}
inline void CancelOrder::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void CancelOrder::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrder.client_order_id)
}

// uint64 request_id = 3;
inline void CancelOrder::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrder::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrder::request_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrder.request_id)
  return _internal_request_id();
}
inline void CancelOrder::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void CancelOrder::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrder.request_id)
}

// uint64 subaccount_id = 4;
inline void CancelOrder::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrder::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrder::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrder.subaccount_id)
  return _internal_subaccount_id();
}
inline void CancelOrder::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void CancelOrder::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrder.subaccount_id)
}

// -------------------------------------------------------------------

// ModifyOrder

// uint64 market_id = 1;
inline void ModifyOrder::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::market_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrder.market_id)
  return _internal_market_id();
}
inline void ModifyOrder::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void ModifyOrder::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrder.market_id)
}

// uint64 client_order_id = 2;
inline void ModifyOrder::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrder.client_order_id)
  return _internal_client_order_id();
}
inline void ModifyOrder::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void ModifyOrder::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrder.client_order_id)
}

// uint64 request_id = 3;
inline void ModifyOrder::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::request_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrder.request_id)
  return _internal_request_id();
}
inline void ModifyOrder::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void ModifyOrder::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrder.request_id)
}

// uint64 new_price = 4;
inline void ModifyOrder::clear_new_price() {
  new_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::_internal_new_price() const {
  return new_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::new_price() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrder.new_price)
  return _internal_new_price();
}
inline void ModifyOrder::_internal_set_new_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  new_price_ = value;
}
inline void ModifyOrder::set_new_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_new_price(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrder.new_price)
}

// uint64 new_quantity = 5;
inline void ModifyOrder::clear_new_quantity() {
  new_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::_internal_new_quantity() const {
  return new_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::new_quantity() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrder.new_quantity)
  return _internal_new_quantity();
}
inline void ModifyOrder::_internal_set_new_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  new_quantity_ = value;
}
inline void ModifyOrder::set_new_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_new_quantity(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrder.new_quantity)
}

// uint64 subaccount_id = 6;
inline void ModifyOrder::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrder::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrder.subaccount_id)
  return _internal_subaccount_id();
}
inline void ModifyOrder::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void ModifyOrder::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrder.subaccount_id)
}

// .trade.SelfTradePrevention self_trade_prevention = 7;
inline bool ModifyOrder::_internal_has_self_trade_prevention() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModifyOrder::has_self_trade_prevention() const {
  return _internal_has_self_trade_prevention();
}
inline void ModifyOrder::clear_self_trade_prevention() {
  self_trade_prevention_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trade::SelfTradePrevention ModifyOrder::_internal_self_trade_prevention() const {
  return static_cast< ::trade::SelfTradePrevention >(self_trade_prevention_);
}
inline ::trade::SelfTradePrevention ModifyOrder::self_trade_prevention() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrder.self_trade_prevention)
  return _internal_self_trade_prevention();
}
inline void ModifyOrder::_internal_set_self_trade_prevention(::trade::SelfTradePrevention value) {
  _has_bits_[0] |= 0x00000001u;
  self_trade_prevention_ = value;
}
inline void ModifyOrder::set_self_trade_prevention(::trade::SelfTradePrevention value) {
  _internal_set_self_trade_prevention(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrder.self_trade_prevention)
}

// .trade.PostOnly post_only = 8;
inline void ModifyOrder::clear_post_only() {
  post_only_ = 0;
}
inline ::trade::PostOnly ModifyOrder::_internal_post_only() const {
  return static_cast< ::trade::PostOnly >(post_only_);
}
inline ::trade::PostOnly ModifyOrder::post_only() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrder.post_only)
  return _internal_post_only();
}
inline void ModifyOrder::_internal_set_post_only(::trade::PostOnly value) {
  
  post_only_ = value;
}
inline void ModifyOrder::set_post_only(::trade::PostOnly value) {
  _internal_set_post_only(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrder.post_only)
}

// -------------------------------------------------------------------

// MassCancel

// uint64 subaccount_id = 1;
inline void MassCancel::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancel::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancel::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.MassCancel.subaccount_id)
  return _internal_subaccount_id();
}
inline void MassCancel::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void MassCancel::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.MassCancel.subaccount_id)
}

// uint64 request_id = 2;
inline void MassCancel::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancel::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancel::request_id() const {
  // @@protoc_insertion_point(field_get:trade.MassCancel.request_id)
  return _internal_request_id();
}
inline void MassCancel::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void MassCancel::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.MassCancel.request_id)
}

// uint64 market_id = 3;
inline bool MassCancel::_internal_has_market_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MassCancel::has_market_id() const {
  return _internal_has_market_id();
}
inline void MassCancel::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancel::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancel::market_id() const {
  // @@protoc_insertion_point(field_get:trade.MassCancel.market_id)
  return _internal_market_id();
}
inline void MassCancel::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  market_id_ = value;
}
inline void MassCancel::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.MassCancel.market_id)
}

// .trade.Side side = 4;
inline bool MassCancel::_internal_has_side() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MassCancel::has_side() const {
  return _internal_has_side();
}
inline void MassCancel::clear_side() {
  side_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::trade::Side MassCancel::_internal_side() const {
  return static_cast< ::trade::Side >(side_);
}
inline ::trade::Side MassCancel::side() const {
  // @@protoc_insertion_point(field_get:trade.MassCancel.side)
  return _internal_side();
}
inline void MassCancel::_internal_set_side(::trade::Side value) {
  _has_bits_[0] |= 0x00000002u;
  side_ = value;
}
inline void MassCancel::set_side(::trade::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:trade.MassCancel.side)
}

// -------------------------------------------------------------------

// Heartbeat

// uint64 request_id = 1;
inline void Heartbeat::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::request_id() const {
  // @@protoc_insertion_point(field_get:trade.Heartbeat.request_id)
  return _internal_request_id();
}
inline void Heartbeat::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void Heartbeat::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.Heartbeat.request_id)
}

// uint64 timestamp = 2;
inline void Heartbeat::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:trade.Heartbeat.timestamp)
  return _internal_timestamp();
}
inline void Heartbeat::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Heartbeat::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:trade.Heartbeat.timestamp)
}

// -------------------------------------------------------------------

// OrderResponse

// .trade.NewOrderAck new_ack = 1;
inline bool OrderResponse::_internal_has_new_ack() const {
  return inner_case() == kNewAck;
}
inline bool OrderResponse::has_new_ack() const {
  return _internal_has_new_ack();
}
inline void OrderResponse::set_has_new_ack() {
  _oneof_case_[0] = kNewAck;
}
inline void OrderResponse::clear_new_ack() {
  if (_internal_has_new_ack()) {
    if (GetArena() == nullptr) {
      delete inner_.new_ack_;
    }
    clear_has_inner();
  }
}
inline ::trade::NewOrderAck* OrderResponse::release_new_ack() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.new_ack)
  if (_internal_has_new_ack()) {
    clear_has_inner();
      ::trade::NewOrderAck* temp = inner_.new_ack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.new_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::NewOrderAck& OrderResponse::_internal_new_ack() const {
  return _internal_has_new_ack()
      ? *inner_.new_ack_
      : reinterpret_cast< ::trade::NewOrderAck&>(::trade::_NewOrderAck_default_instance_);
}
inline const ::trade::NewOrderAck& OrderResponse::new_ack() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.new_ack)
  return _internal_new_ack();
}
inline ::trade::NewOrderAck* OrderResponse::unsafe_arena_release_new_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.new_ack)
  if (_internal_has_new_ack()) {
    clear_has_inner();
    ::trade::NewOrderAck* temp = inner_.new_ack_;
    inner_.new_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_new_ack(::trade::NewOrderAck* new_ack) {
  clear_inner();
  if (new_ack) {
    set_has_new_ack();
    inner_.new_ack_ = new_ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.new_ack)
}
inline ::trade::NewOrderAck* OrderResponse::_internal_mutable_new_ack() {
  if (!_internal_has_new_ack()) {
    clear_inner();
    set_has_new_ack();
    inner_.new_ack_ = CreateMaybeMessage< ::trade::NewOrderAck >(GetArena());
  }
  return inner_.new_ack_;
}
inline ::trade::NewOrderAck* OrderResponse::mutable_new_ack() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.new_ack)
  return _internal_mutable_new_ack();
}

// .trade.CancelOrderAck cancel_ack = 2;
inline bool OrderResponse::_internal_has_cancel_ack() const {
  return inner_case() == kCancelAck;
}
inline bool OrderResponse::has_cancel_ack() const {
  return _internal_has_cancel_ack();
}
inline void OrderResponse::set_has_cancel_ack() {
  _oneof_case_[0] = kCancelAck;
}
inline void OrderResponse::clear_cancel_ack() {
  if (_internal_has_cancel_ack()) {
    if (GetArena() == nullptr) {
      delete inner_.cancel_ack_;
    }
    clear_has_inner();
  }
}
inline ::trade::CancelOrderAck* OrderResponse::release_cancel_ack() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.cancel_ack)
  if (_internal_has_cancel_ack()) {
    clear_has_inner();
      ::trade::CancelOrderAck* temp = inner_.cancel_ack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.cancel_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::CancelOrderAck& OrderResponse::_internal_cancel_ack() const {
  return _internal_has_cancel_ack()
      ? *inner_.cancel_ack_
      : reinterpret_cast< ::trade::CancelOrderAck&>(::trade::_CancelOrderAck_default_instance_);
}
inline const ::trade::CancelOrderAck& OrderResponse::cancel_ack() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.cancel_ack)
  return _internal_cancel_ack();
}
inline ::trade::CancelOrderAck* OrderResponse::unsafe_arena_release_cancel_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.cancel_ack)
  if (_internal_has_cancel_ack()) {
    clear_has_inner();
    ::trade::CancelOrderAck* temp = inner_.cancel_ack_;
    inner_.cancel_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_cancel_ack(::trade::CancelOrderAck* cancel_ack) {
  clear_inner();
  if (cancel_ack) {
    set_has_cancel_ack();
    inner_.cancel_ack_ = cancel_ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.cancel_ack)
}
inline ::trade::CancelOrderAck* OrderResponse::_internal_mutable_cancel_ack() {
  if (!_internal_has_cancel_ack()) {
    clear_inner();
    set_has_cancel_ack();
    inner_.cancel_ack_ = CreateMaybeMessage< ::trade::CancelOrderAck >(GetArena());
  }
  return inner_.cancel_ack_;
}
inline ::trade::CancelOrderAck* OrderResponse::mutable_cancel_ack() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.cancel_ack)
  return _internal_mutable_cancel_ack();
}

// .trade.ModifyOrderAck modify_ack = 3;
inline bool OrderResponse::_internal_has_modify_ack() const {
  return inner_case() == kModifyAck;
}
inline bool OrderResponse::has_modify_ack() const {
  return _internal_has_modify_ack();
}
inline void OrderResponse::set_has_modify_ack() {
  _oneof_case_[0] = kModifyAck;
}
inline void OrderResponse::clear_modify_ack() {
  if (_internal_has_modify_ack()) {
    if (GetArena() == nullptr) {
      delete inner_.modify_ack_;
    }
    clear_has_inner();
  }
}
inline ::trade::ModifyOrderAck* OrderResponse::release_modify_ack() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.modify_ack)
  if (_internal_has_modify_ack()) {
    clear_has_inner();
      ::trade::ModifyOrderAck* temp = inner_.modify_ack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.modify_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::ModifyOrderAck& OrderResponse::_internal_modify_ack() const {
  return _internal_has_modify_ack()
      ? *inner_.modify_ack_
      : reinterpret_cast< ::trade::ModifyOrderAck&>(::trade::_ModifyOrderAck_default_instance_);
}
inline const ::trade::ModifyOrderAck& OrderResponse::modify_ack() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.modify_ack)
  return _internal_modify_ack();
}
inline ::trade::ModifyOrderAck* OrderResponse::unsafe_arena_release_modify_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.modify_ack)
  if (_internal_has_modify_ack()) {
    clear_has_inner();
    ::trade::ModifyOrderAck* temp = inner_.modify_ack_;
    inner_.modify_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_modify_ack(::trade::ModifyOrderAck* modify_ack) {
  clear_inner();
  if (modify_ack) {
    set_has_modify_ack();
    inner_.modify_ack_ = modify_ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.modify_ack)
}
inline ::trade::ModifyOrderAck* OrderResponse::_internal_mutable_modify_ack() {
  if (!_internal_has_modify_ack()) {
    clear_inner();
    set_has_modify_ack();
    inner_.modify_ack_ = CreateMaybeMessage< ::trade::ModifyOrderAck >(GetArena());
  }
  return inner_.modify_ack_;
}
inline ::trade::ModifyOrderAck* OrderResponse::mutable_modify_ack() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.modify_ack)
  return _internal_mutable_modify_ack();
}

// .trade.NewOrderReject new_reject = 4;
inline bool OrderResponse::_internal_has_new_reject() const {
  return inner_case() == kNewReject;
}
inline bool OrderResponse::has_new_reject() const {
  return _internal_has_new_reject();
}
inline void OrderResponse::set_has_new_reject() {
  _oneof_case_[0] = kNewReject;
}
inline void OrderResponse::clear_new_reject() {
  if (_internal_has_new_reject()) {
    if (GetArena() == nullptr) {
      delete inner_.new_reject_;
    }
    clear_has_inner();
  }
}
inline ::trade::NewOrderReject* OrderResponse::release_new_reject() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.new_reject)
  if (_internal_has_new_reject()) {
    clear_has_inner();
      ::trade::NewOrderReject* temp = inner_.new_reject_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.new_reject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::NewOrderReject& OrderResponse::_internal_new_reject() const {
  return _internal_has_new_reject()
      ? *inner_.new_reject_
      : reinterpret_cast< ::trade::NewOrderReject&>(::trade::_NewOrderReject_default_instance_);
}
inline const ::trade::NewOrderReject& OrderResponse::new_reject() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.new_reject)
  return _internal_new_reject();
}
inline ::trade::NewOrderReject* OrderResponse::unsafe_arena_release_new_reject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.new_reject)
  if (_internal_has_new_reject()) {
    clear_has_inner();
    ::trade::NewOrderReject* temp = inner_.new_reject_;
    inner_.new_reject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_new_reject(::trade::NewOrderReject* new_reject) {
  clear_inner();
  if (new_reject) {
    set_has_new_reject();
    inner_.new_reject_ = new_reject;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.new_reject)
}
inline ::trade::NewOrderReject* OrderResponse::_internal_mutable_new_reject() {
  if (!_internal_has_new_reject()) {
    clear_inner();
    set_has_new_reject();
    inner_.new_reject_ = CreateMaybeMessage< ::trade::NewOrderReject >(GetArena());
  }
  return inner_.new_reject_;
}
inline ::trade::NewOrderReject* OrderResponse::mutable_new_reject() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.new_reject)
  return _internal_mutable_new_reject();
}

// .trade.CancelOrderReject cancel_reject = 5;
inline bool OrderResponse::_internal_has_cancel_reject() const {
  return inner_case() == kCancelReject;
}
inline bool OrderResponse::has_cancel_reject() const {
  return _internal_has_cancel_reject();
}
inline void OrderResponse::set_has_cancel_reject() {
  _oneof_case_[0] = kCancelReject;
}
inline void OrderResponse::clear_cancel_reject() {
  if (_internal_has_cancel_reject()) {
    if (GetArena() == nullptr) {
      delete inner_.cancel_reject_;
    }
    clear_has_inner();
  }
}
inline ::trade::CancelOrderReject* OrderResponse::release_cancel_reject() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.cancel_reject)
  if (_internal_has_cancel_reject()) {
    clear_has_inner();
      ::trade::CancelOrderReject* temp = inner_.cancel_reject_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.cancel_reject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::CancelOrderReject& OrderResponse::_internal_cancel_reject() const {
  return _internal_has_cancel_reject()
      ? *inner_.cancel_reject_
      : reinterpret_cast< ::trade::CancelOrderReject&>(::trade::_CancelOrderReject_default_instance_);
}
inline const ::trade::CancelOrderReject& OrderResponse::cancel_reject() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.cancel_reject)
  return _internal_cancel_reject();
}
inline ::trade::CancelOrderReject* OrderResponse::unsafe_arena_release_cancel_reject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.cancel_reject)
  if (_internal_has_cancel_reject()) {
    clear_has_inner();
    ::trade::CancelOrderReject* temp = inner_.cancel_reject_;
    inner_.cancel_reject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_cancel_reject(::trade::CancelOrderReject* cancel_reject) {
  clear_inner();
  if (cancel_reject) {
    set_has_cancel_reject();
    inner_.cancel_reject_ = cancel_reject;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.cancel_reject)
}
inline ::trade::CancelOrderReject* OrderResponse::_internal_mutable_cancel_reject() {
  if (!_internal_has_cancel_reject()) {
    clear_inner();
    set_has_cancel_reject();
    inner_.cancel_reject_ = CreateMaybeMessage< ::trade::CancelOrderReject >(GetArena());
  }
  return inner_.cancel_reject_;
}
inline ::trade::CancelOrderReject* OrderResponse::mutable_cancel_reject() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.cancel_reject)
  return _internal_mutable_cancel_reject();
}

// .trade.ModifyOrderReject modify_reject = 6;
inline bool OrderResponse::_internal_has_modify_reject() const {
  return inner_case() == kModifyReject;
}
inline bool OrderResponse::has_modify_reject() const {
  return _internal_has_modify_reject();
}
inline void OrderResponse::set_has_modify_reject() {
  _oneof_case_[0] = kModifyReject;
}
inline void OrderResponse::clear_modify_reject() {
  if (_internal_has_modify_reject()) {
    if (GetArena() == nullptr) {
      delete inner_.modify_reject_;
    }
    clear_has_inner();
  }
}
inline ::trade::ModifyOrderReject* OrderResponse::release_modify_reject() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.modify_reject)
  if (_internal_has_modify_reject()) {
    clear_has_inner();
      ::trade::ModifyOrderReject* temp = inner_.modify_reject_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.modify_reject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::ModifyOrderReject& OrderResponse::_internal_modify_reject() const {
  return _internal_has_modify_reject()
      ? *inner_.modify_reject_
      : reinterpret_cast< ::trade::ModifyOrderReject&>(::trade::_ModifyOrderReject_default_instance_);
}
inline const ::trade::ModifyOrderReject& OrderResponse::modify_reject() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.modify_reject)
  return _internal_modify_reject();
}
inline ::trade::ModifyOrderReject* OrderResponse::unsafe_arena_release_modify_reject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.modify_reject)
  if (_internal_has_modify_reject()) {
    clear_has_inner();
    ::trade::ModifyOrderReject* temp = inner_.modify_reject_;
    inner_.modify_reject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_modify_reject(::trade::ModifyOrderReject* modify_reject) {
  clear_inner();
  if (modify_reject) {
    set_has_modify_reject();
    inner_.modify_reject_ = modify_reject;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.modify_reject)
}
inline ::trade::ModifyOrderReject* OrderResponse::_internal_mutable_modify_reject() {
  if (!_internal_has_modify_reject()) {
    clear_inner();
    set_has_modify_reject();
    inner_.modify_reject_ = CreateMaybeMessage< ::trade::ModifyOrderReject >(GetArena());
  }
  return inner_.modify_reject_;
}
inline ::trade::ModifyOrderReject* OrderResponse::mutable_modify_reject() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.modify_reject)
  return _internal_mutable_modify_reject();
}

// .trade.Fill fill = 7;
inline bool OrderResponse::_internal_has_fill() const {
  return inner_case() == kFill;
}
inline bool OrderResponse::has_fill() const {
  return _internal_has_fill();
}
inline void OrderResponse::set_has_fill() {
  _oneof_case_[0] = kFill;
}
inline void OrderResponse::clear_fill() {
  if (_internal_has_fill()) {
    if (GetArena() == nullptr) {
      delete inner_.fill_;
    }
    clear_has_inner();
  }
}
inline ::trade::Fill* OrderResponse::release_fill() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.fill)
  if (_internal_has_fill()) {
    clear_has_inner();
      ::trade::Fill* temp = inner_.fill_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.fill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::Fill& OrderResponse::_internal_fill() const {
  return _internal_has_fill()
      ? *inner_.fill_
      : reinterpret_cast< ::trade::Fill&>(::trade::_Fill_default_instance_);
}
inline const ::trade::Fill& OrderResponse::fill() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.fill)
  return _internal_fill();
}
inline ::trade::Fill* OrderResponse::unsafe_arena_release_fill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.fill)
  if (_internal_has_fill()) {
    clear_has_inner();
    ::trade::Fill* temp = inner_.fill_;
    inner_.fill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_fill(::trade::Fill* fill) {
  clear_inner();
  if (fill) {
    set_has_fill();
    inner_.fill_ = fill;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.fill)
}
inline ::trade::Fill* OrderResponse::_internal_mutable_fill() {
  if (!_internal_has_fill()) {
    clear_inner();
    set_has_fill();
    inner_.fill_ = CreateMaybeMessage< ::trade::Fill >(GetArena());
  }
  return inner_.fill_;
}
inline ::trade::Fill* OrderResponse::mutable_fill() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.fill)
  return _internal_mutable_fill();
}

// .trade.Heartbeat heartbeat = 8;
inline bool OrderResponse::_internal_has_heartbeat() const {
  return inner_case() == kHeartbeat;
}
inline bool OrderResponse::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void OrderResponse::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void OrderResponse::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete inner_.heartbeat_;
    }
    clear_has_inner();
  }
}
inline ::trade::Heartbeat* OrderResponse::release_heartbeat() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
      ::trade::Heartbeat* temp = inner_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::Heartbeat& OrderResponse::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *inner_.heartbeat_
      : reinterpret_cast< ::trade::Heartbeat&>(::trade::_Heartbeat_default_instance_);
}
inline const ::trade::Heartbeat& OrderResponse::heartbeat() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.heartbeat)
  return _internal_heartbeat();
}
inline ::trade::Heartbeat* OrderResponse::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
    ::trade::Heartbeat* temp = inner_.heartbeat_;
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_heartbeat(::trade::Heartbeat* heartbeat) {
  clear_inner();
  if (heartbeat) {
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.heartbeat)
}
inline ::trade::Heartbeat* OrderResponse::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_inner();
    set_has_heartbeat();
    inner_.heartbeat_ = CreateMaybeMessage< ::trade::Heartbeat >(GetArena());
  }
  return inner_.heartbeat_;
}
inline ::trade::Heartbeat* OrderResponse::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.heartbeat)
  return _internal_mutable_heartbeat();
}

// .trade.AssetPosition position = 9;
inline bool OrderResponse::_internal_has_position() const {
  return inner_case() == kPosition;
}
inline bool OrderResponse::has_position() const {
  return _internal_has_position();
}
inline void OrderResponse::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void OrderResponse::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete inner_.position_;
    }
    clear_has_inner();
  }
}
inline ::trade::AssetPosition* OrderResponse::release_position() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.position)
  if (_internal_has_position()) {
    clear_has_inner();
      ::trade::AssetPosition* temp = inner_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::AssetPosition& OrderResponse::_internal_position() const {
  return _internal_has_position()
      ? *inner_.position_
      : reinterpret_cast< ::trade::AssetPosition&>(::trade::_AssetPosition_default_instance_);
}
inline const ::trade::AssetPosition& OrderResponse::position() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.position)
  return _internal_position();
}
inline ::trade::AssetPosition* OrderResponse::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.position)
  if (_internal_has_position()) {
    clear_has_inner();
    ::trade::AssetPosition* temp = inner_.position_;
    inner_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_position(::trade::AssetPosition* position) {
  clear_inner();
  if (position) {
    set_has_position();
    inner_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.position)
}
inline ::trade::AssetPosition* OrderResponse::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_inner();
    set_has_position();
    inner_.position_ = CreateMaybeMessage< ::trade::AssetPosition >(GetArena());
  }
  return inner_.position_;
}
inline ::trade::AssetPosition* OrderResponse::mutable_position() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.position)
  return _internal_mutable_position();
}

// .trade.MassCancelAck mass_cancel_ack = 10;
inline bool OrderResponse::_internal_has_mass_cancel_ack() const {
  return inner_case() == kMassCancelAck;
}
inline bool OrderResponse::has_mass_cancel_ack() const {
  return _internal_has_mass_cancel_ack();
}
inline void OrderResponse::set_has_mass_cancel_ack() {
  _oneof_case_[0] = kMassCancelAck;
}
inline void OrderResponse::clear_mass_cancel_ack() {
  if (_internal_has_mass_cancel_ack()) {
    if (GetArena() == nullptr) {
      delete inner_.mass_cancel_ack_;
    }
    clear_has_inner();
  }
}
inline ::trade::MassCancelAck* OrderResponse::release_mass_cancel_ack() {
  // @@protoc_insertion_point(field_release:trade.OrderResponse.mass_cancel_ack)
  if (_internal_has_mass_cancel_ack()) {
    clear_has_inner();
      ::trade::MassCancelAck* temp = inner_.mass_cancel_ack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mass_cancel_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::MassCancelAck& OrderResponse::_internal_mass_cancel_ack() const {
  return _internal_has_mass_cancel_ack()
      ? *inner_.mass_cancel_ack_
      : reinterpret_cast< ::trade::MassCancelAck&>(::trade::_MassCancelAck_default_instance_);
}
inline const ::trade::MassCancelAck& OrderResponse::mass_cancel_ack() const {
  // @@protoc_insertion_point(field_get:trade.OrderResponse.mass_cancel_ack)
  return _internal_mass_cancel_ack();
}
inline ::trade::MassCancelAck* OrderResponse::unsafe_arena_release_mass_cancel_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.OrderResponse.mass_cancel_ack)
  if (_internal_has_mass_cancel_ack()) {
    clear_has_inner();
    ::trade::MassCancelAck* temp = inner_.mass_cancel_ack_;
    inner_.mass_cancel_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderResponse::unsafe_arena_set_allocated_mass_cancel_ack(::trade::MassCancelAck* mass_cancel_ack) {
  clear_inner();
  if (mass_cancel_ack) {
    set_has_mass_cancel_ack();
    inner_.mass_cancel_ack_ = mass_cancel_ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.OrderResponse.mass_cancel_ack)
}
inline ::trade::MassCancelAck* OrderResponse::_internal_mutable_mass_cancel_ack() {
  if (!_internal_has_mass_cancel_ack()) {
    clear_inner();
    set_has_mass_cancel_ack();
    inner_.mass_cancel_ack_ = CreateMaybeMessage< ::trade::MassCancelAck >(GetArena());
  }
  return inner_.mass_cancel_ack_;
}
inline ::trade::MassCancelAck* OrderResponse::mutable_mass_cancel_ack() {
  // @@protoc_insertion_point(field_mutable:trade.OrderResponse.mass_cancel_ack)
  return _internal_mutable_mass_cancel_ack();
}

inline bool OrderResponse::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void OrderResponse::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline OrderResponse::InnerCase OrderResponse::inner_case() const {
  return OrderResponse::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NewOrderAck

// uint64 msg_seq_num = 1;
inline void NewOrderAck::clear_msg_seq_num() {
  msg_seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void NewOrderAck::_internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_seq_num_ = value;
}
inline void NewOrderAck::set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.msg_seq_num)
}

// uint64 client_order_id = 2;
inline void NewOrderAck::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.client_order_id)
  return _internal_client_order_id();
}
inline void NewOrderAck::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void NewOrderAck::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.client_order_id)
}

// uint64 request_id = 3;
inline void NewOrderAck::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::request_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.request_id)
  return _internal_request_id();
}
inline void NewOrderAck::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void NewOrderAck::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.request_id)
}

// uint64 exchange_order_id = 4;
inline void NewOrderAck::clear_exchange_order_id() {
  exchange_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_exchange_order_id() const {
  return exchange_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.exchange_order_id)
  return _internal_exchange_order_id();
}
inline void NewOrderAck::_internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exchange_order_id_ = value;
}
inline void NewOrderAck::set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchange_order_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.exchange_order_id)
}

// uint64 market_id = 5;
inline void NewOrderAck::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::market_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.market_id)
  return _internal_market_id();
}
inline void NewOrderAck::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void NewOrderAck::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.market_id)
}

// uint64 price = 6;
inline bool NewOrderAck::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewOrderAck::has_price() const {
  return _internal_has_price();
}
inline void NewOrderAck::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::price() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.price)
  return _internal_price();
}
inline void NewOrderAck::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  price_ = value;
}
inline void NewOrderAck::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.price)
}

// uint64 quantity = 7;
inline void NewOrderAck::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::quantity() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.quantity)
  return _internal_quantity();
}
inline void NewOrderAck::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void NewOrderAck::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.quantity)
}

// .trade.Side side = 8;
inline void NewOrderAck::clear_side() {
  side_ = 0;
}
inline ::trade::Side NewOrderAck::_internal_side() const {
  return static_cast< ::trade::Side >(side_);
}
inline ::trade::Side NewOrderAck::side() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.side)
  return _internal_side();
}
inline void NewOrderAck::_internal_set_side(::trade::Side value) {
  
  side_ = value;
}
inline void NewOrderAck::set_side(::trade::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.side)
}

// .trade.TimeInForce time_in_force = 9;
inline void NewOrderAck::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::trade::TimeInForce NewOrderAck::_internal_time_in_force() const {
  return static_cast< ::trade::TimeInForce >(time_in_force_);
}
inline ::trade::TimeInForce NewOrderAck::time_in_force() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.time_in_force)
  return _internal_time_in_force();
}
inline void NewOrderAck::_internal_set_time_in_force(::trade::TimeInForce value) {
  
  time_in_force_ = value;
}
inline void NewOrderAck::set_time_in_force(::trade::TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.time_in_force)
}

// .trade.OrderType order_type = 10;
inline void NewOrderAck::clear_order_type() {
  order_type_ = 0;
}
inline ::trade::OrderType NewOrderAck::_internal_order_type() const {
  return static_cast< ::trade::OrderType >(order_type_);
}
inline ::trade::OrderType NewOrderAck::order_type() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.order_type)
  return _internal_order_type();
}
inline void NewOrderAck::_internal_set_order_type(::trade::OrderType value) {
  
  order_type_ = value;
}
inline void NewOrderAck::set_order_type(::trade::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.order_type)
}

// uint64 transact_time = 11;
inline void NewOrderAck::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::transact_time() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.transact_time)
  return _internal_transact_time();
}
inline void NewOrderAck::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void NewOrderAck::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.transact_time)
}

// uint64 subaccount_id = 12;
inline void NewOrderAck::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderAck::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.subaccount_id)
  return _internal_subaccount_id();
}
inline void NewOrderAck::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void NewOrderAck::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.subaccount_id)
}

// bool cancel_on_disconnect = 13;
inline void NewOrderAck::clear_cancel_on_disconnect() {
  cancel_on_disconnect_ = false;
}
inline bool NewOrderAck::_internal_cancel_on_disconnect() const {
  return cancel_on_disconnect_;
}
inline bool NewOrderAck::cancel_on_disconnect() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderAck.cancel_on_disconnect)
  return _internal_cancel_on_disconnect();
}
inline void NewOrderAck::_internal_set_cancel_on_disconnect(bool value) {
  
  cancel_on_disconnect_ = value;
}
inline void NewOrderAck::set_cancel_on_disconnect(bool value) {
  _internal_set_cancel_on_disconnect(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderAck.cancel_on_disconnect)
}

// -------------------------------------------------------------------

// CancelOrderAck

// uint64 msg_seq_num = 1;
inline void CancelOrderAck::clear_msg_seq_num() {
  msg_seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderAck.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void CancelOrderAck::_internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_seq_num_ = value;
}
inline void CancelOrderAck::set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderAck.msg_seq_num)
}

// uint64 client_order_id = 2;
inline void CancelOrderAck::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderAck.client_order_id)
  return _internal_client_order_id();
}
inline void CancelOrderAck::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void CancelOrderAck::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderAck.client_order_id)
}

// uint64 request_id = 3;
inline void CancelOrderAck::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::request_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderAck.request_id)
  return _internal_request_id();
}
inline void CancelOrderAck::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void CancelOrderAck::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderAck.request_id)
}

// uint64 transact_time = 4;
inline void CancelOrderAck::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::transact_time() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderAck.transact_time)
  return _internal_transact_time();
}
inline void CancelOrderAck::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void CancelOrderAck::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderAck.transact_time)
}

// uint64 subaccount_id = 5;
inline void CancelOrderAck::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderAck.subaccount_id)
  return _internal_subaccount_id();
}
inline void CancelOrderAck::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void CancelOrderAck::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderAck.subaccount_id)
}

// .trade.CancelOrderAck.Reason reason = 6;
inline void CancelOrderAck::clear_reason() {
  reason_ = 0;
}
inline ::trade::CancelOrderAck_Reason CancelOrderAck::_internal_reason() const {
  return static_cast< ::trade::CancelOrderAck_Reason >(reason_);
}
inline ::trade::CancelOrderAck_Reason CancelOrderAck::reason() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderAck.reason)
  return _internal_reason();
}
inline void CancelOrderAck::_internal_set_reason(::trade::CancelOrderAck_Reason value) {
  
  reason_ = value;
}
inline void CancelOrderAck::set_reason(::trade::CancelOrderAck_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderAck.reason)
}

// uint64 market_id = 7;
inline void CancelOrderAck::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderAck::market_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderAck.market_id)
  return _internal_market_id();
}
inline void CancelOrderAck::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void CancelOrderAck::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderAck.market_id)
}

// -------------------------------------------------------------------

// ModifyOrderAck

// uint64 msg_seq_num = 1;
inline void ModifyOrderAck::clear_msg_seq_num() {
  msg_seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void ModifyOrderAck::_internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_seq_num_ = value;
}
inline void ModifyOrderAck::set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.msg_seq_num)
}

// uint64 client_order_id = 2;
inline void ModifyOrderAck::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.client_order_id)
  return _internal_client_order_id();
}
inline void ModifyOrderAck::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void ModifyOrderAck::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.client_order_id)
}

// uint64 request_id = 3;
inline void ModifyOrderAck::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::request_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.request_id)
  return _internal_request_id();
}
inline void ModifyOrderAck::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void ModifyOrderAck::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.request_id)
}

// uint64 transact_time = 4;
inline void ModifyOrderAck::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::transact_time() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.transact_time)
  return _internal_transact_time();
}
inline void ModifyOrderAck::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void ModifyOrderAck::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.transact_time)
}

// uint64 remaining_quantity = 5;
inline void ModifyOrderAck::clear_remaining_quantity() {
  remaining_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_remaining_quantity() const {
  return remaining_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::remaining_quantity() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.remaining_quantity)
  return _internal_remaining_quantity();
}
inline void ModifyOrderAck::_internal_set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remaining_quantity_ = value;
}
inline void ModifyOrderAck::set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remaining_quantity(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.remaining_quantity)
}

// uint64 subaccount_id = 6;
inline void ModifyOrderAck::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.subaccount_id)
  return _internal_subaccount_id();
}
inline void ModifyOrderAck::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void ModifyOrderAck::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.subaccount_id)
}

// uint64 market_id = 7;
inline void ModifyOrderAck::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::market_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.market_id)
  return _internal_market_id();
}
inline void ModifyOrderAck::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void ModifyOrderAck::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.market_id)
}

// uint64 price = 8;
inline void ModifyOrderAck::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::price() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.price)
  return _internal_price();
}
inline void ModifyOrderAck::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void ModifyOrderAck::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.price)
}

// uint64 quantity = 9;
inline void ModifyOrderAck::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::quantity() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.quantity)
  return _internal_quantity();
}
inline void ModifyOrderAck::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void ModifyOrderAck::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.quantity)
}

// uint64 cumulative_quantity = 10;
inline void ModifyOrderAck::clear_cumulative_quantity() {
  cumulative_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::_internal_cumulative_quantity() const {
  return cumulative_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderAck::cumulative_quantity() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderAck.cumulative_quantity)
  return _internal_cumulative_quantity();
}
inline void ModifyOrderAck::_internal_set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cumulative_quantity_ = value;
}
inline void ModifyOrderAck::set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cumulative_quantity(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderAck.cumulative_quantity)
}

// -------------------------------------------------------------------

// MassCancelAck

// uint64 msg_seq_num = 1;
inline void MassCancelAck::clear_msg_seq_num() {
  msg_seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancelAck::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancelAck::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:trade.MassCancelAck.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void MassCancelAck::_internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_seq_num_ = value;
}
inline void MassCancelAck::set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:trade.MassCancelAck.msg_seq_num)
}

// uint64 subaccount_id = 2;
inline void MassCancelAck::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancelAck::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancelAck::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.MassCancelAck.subaccount_id)
  return _internal_subaccount_id();
}
inline void MassCancelAck::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void MassCancelAck::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.MassCancelAck.subaccount_id)
}

// uint64 request_id = 3;
inline void MassCancelAck::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancelAck::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancelAck::request_id() const {
  // @@protoc_insertion_point(field_get:trade.MassCancelAck.request_id)
  return _internal_request_id();
}
inline void MassCancelAck::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void MassCancelAck::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.MassCancelAck.request_id)
}

// uint64 transact_time = 4;
inline void MassCancelAck::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancelAck::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MassCancelAck::transact_time() const {
  // @@protoc_insertion_point(field_get:trade.MassCancelAck.transact_time)
  return _internal_transact_time();
}
inline void MassCancelAck::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void MassCancelAck::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.MassCancelAck.transact_time)
}

// .trade.MassCancelAck.Reason reason = 6;
inline bool MassCancelAck::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MassCancelAck::has_reason() const {
  return _internal_has_reason();
}
inline void MassCancelAck::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trade::MassCancelAck_Reason MassCancelAck::_internal_reason() const {
  return static_cast< ::trade::MassCancelAck_Reason >(reason_);
}
inline ::trade::MassCancelAck_Reason MassCancelAck::reason() const {
  // @@protoc_insertion_point(field_get:trade.MassCancelAck.reason)
  return _internal_reason();
}
inline void MassCancelAck::_internal_set_reason(::trade::MassCancelAck_Reason value) {
  _has_bits_[0] |= 0x00000001u;
  reason_ = value;
}
inline void MassCancelAck::set_reason(::trade::MassCancelAck_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:trade.MassCancelAck.reason)
}

// uint32 total_affected_orders = 7;
inline void MassCancelAck::clear_total_affected_orders() {
  total_affected_orders_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MassCancelAck::_internal_total_affected_orders() const {
  return total_affected_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MassCancelAck::total_affected_orders() const {
  // @@protoc_insertion_point(field_get:trade.MassCancelAck.total_affected_orders)
  return _internal_total_affected_orders();
}
inline void MassCancelAck::_internal_set_total_affected_orders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_affected_orders_ = value;
}
inline void MassCancelAck::set_total_affected_orders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_affected_orders(value);
  // @@protoc_insertion_point(field_set:trade.MassCancelAck.total_affected_orders)
}

// -------------------------------------------------------------------

// NewOrderReject

// uint64 msg_seq_num = 1;
inline void NewOrderReject::clear_msg_seq_num() {
  msg_seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void NewOrderReject::_internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_seq_num_ = value;
}
inline void NewOrderReject::set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.msg_seq_num)
}

// uint64 client_order_id = 2;
inline void NewOrderReject::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.client_order_id)
  return _internal_client_order_id();
}
inline void NewOrderReject::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void NewOrderReject::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.client_order_id)
}

// uint64 request_id = 3;
inline void NewOrderReject::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::request_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.request_id)
  return _internal_request_id();
}
inline void NewOrderReject::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void NewOrderReject::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.request_id)
}

// uint64 transact_time = 4;
inline void NewOrderReject::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::transact_time() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.transact_time)
  return _internal_transact_time();
}
inline void NewOrderReject::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void NewOrderReject::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.transact_time)
}

// uint64 subaccount_id = 5;
inline void NewOrderReject::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.subaccount_id)
  return _internal_subaccount_id();
}
inline void NewOrderReject::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void NewOrderReject::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.subaccount_id)
}

// .trade.NewOrderReject.Reason reason = 6;
inline void NewOrderReject::clear_reason() {
  reason_ = 0;
}
inline ::trade::NewOrderReject_Reason NewOrderReject::_internal_reason() const {
  return static_cast< ::trade::NewOrderReject_Reason >(reason_);
}
inline ::trade::NewOrderReject_Reason NewOrderReject::reason() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.reason)
  return _internal_reason();
}
inline void NewOrderReject::_internal_set_reason(::trade::NewOrderReject_Reason value) {
  
  reason_ = value;
}
inline void NewOrderReject::set_reason(::trade::NewOrderReject_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.reason)
}

// uint64 market_id = 7;
inline void NewOrderReject::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::market_id() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.market_id)
  return _internal_market_id();
}
inline void NewOrderReject::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void NewOrderReject::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.market_id)
}

// uint64 price = 8;
inline bool NewOrderReject::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewOrderReject::has_price() const {
  return _internal_has_price();
}
inline void NewOrderReject::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::price() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.price)
  return _internal_price();
}
inline void NewOrderReject::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  price_ = value;
}
inline void NewOrderReject::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.price)
}

// uint64 quantity = 9;
inline void NewOrderReject::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewOrderReject::quantity() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.quantity)
  return _internal_quantity();
}
inline void NewOrderReject::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void NewOrderReject::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.quantity)
}

// .trade.Side side = 10;
inline void NewOrderReject::clear_side() {
  side_ = 0;
}
inline ::trade::Side NewOrderReject::_internal_side() const {
  return static_cast< ::trade::Side >(side_);
}
inline ::trade::Side NewOrderReject::side() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.side)
  return _internal_side();
}
inline void NewOrderReject::_internal_set_side(::trade::Side value) {
  
  side_ = value;
}
inline void NewOrderReject::set_side(::trade::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.side)
}

// .trade.TimeInForce time_in_force = 11;
inline void NewOrderReject::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::trade::TimeInForce NewOrderReject::_internal_time_in_force() const {
  return static_cast< ::trade::TimeInForce >(time_in_force_);
}
inline ::trade::TimeInForce NewOrderReject::time_in_force() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.time_in_force)
  return _internal_time_in_force();
}
inline void NewOrderReject::_internal_set_time_in_force(::trade::TimeInForce value) {
  
  time_in_force_ = value;
}
inline void NewOrderReject::set_time_in_force(::trade::TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.time_in_force)
}

// .trade.OrderType order_type = 12;
inline void NewOrderReject::clear_order_type() {
  order_type_ = 0;
}
inline ::trade::OrderType NewOrderReject::_internal_order_type() const {
  return static_cast< ::trade::OrderType >(order_type_);
}
inline ::trade::OrderType NewOrderReject::order_type() const {
  // @@protoc_insertion_point(field_get:trade.NewOrderReject.order_type)
  return _internal_order_type();
}
inline void NewOrderReject::_internal_set_order_type(::trade::OrderType value) {
  
  order_type_ = value;
}
inline void NewOrderReject::set_order_type(::trade::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:trade.NewOrderReject.order_type)
}

// -------------------------------------------------------------------

// CancelOrderReject

// uint64 msg_seq_num = 1;
inline void CancelOrderReject::clear_msg_seq_num() {
  msg_seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderReject.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void CancelOrderReject::_internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_seq_num_ = value;
}
inline void CancelOrderReject::set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderReject.msg_seq_num)
}

// uint64 client_order_id = 2;
inline void CancelOrderReject::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderReject.client_order_id)
  return _internal_client_order_id();
}
inline void CancelOrderReject::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void CancelOrderReject::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderReject.client_order_id)
}

// uint64 request_id = 3;
inline void CancelOrderReject::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::request_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderReject.request_id)
  return _internal_request_id();
}
inline void CancelOrderReject::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void CancelOrderReject::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderReject.request_id)
}

// uint64 transact_time = 4;
inline void CancelOrderReject::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::transact_time() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderReject.transact_time)
  return _internal_transact_time();
}
inline void CancelOrderReject::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void CancelOrderReject::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderReject.transact_time)
}

// uint64 subaccount_id = 5;
inline void CancelOrderReject::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderReject.subaccount_id)
  return _internal_subaccount_id();
}
inline void CancelOrderReject::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void CancelOrderReject::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderReject.subaccount_id)
}

// .trade.CancelOrderReject.Reason reason = 6;
inline void CancelOrderReject::clear_reason() {
  reason_ = 0;
}
inline ::trade::CancelOrderReject_Reason CancelOrderReject::_internal_reason() const {
  return static_cast< ::trade::CancelOrderReject_Reason >(reason_);
}
inline ::trade::CancelOrderReject_Reason CancelOrderReject::reason() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderReject.reason)
  return _internal_reason();
}
inline void CancelOrderReject::_internal_set_reason(::trade::CancelOrderReject_Reason value) {
  
  reason_ = value;
}
inline void CancelOrderReject::set_reason(::trade::CancelOrderReject_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderReject.reason)
}

// uint64 market_id = 7;
inline void CancelOrderReject::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CancelOrderReject::market_id() const {
  // @@protoc_insertion_point(field_get:trade.CancelOrderReject.market_id)
  return _internal_market_id();
}
inline void CancelOrderReject::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void CancelOrderReject::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.CancelOrderReject.market_id)
}

// -------------------------------------------------------------------

// ModifyOrderReject

// uint64 msg_seq_num = 1;
inline void ModifyOrderReject::clear_msg_seq_num() {
  msg_seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderReject.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void ModifyOrderReject::_internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_seq_num_ = value;
}
inline void ModifyOrderReject::set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderReject.msg_seq_num)
}

// uint64 client_order_id = 2;
inline void ModifyOrderReject::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderReject.client_order_id)
  return _internal_client_order_id();
}
inline void ModifyOrderReject::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void ModifyOrderReject::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderReject.client_order_id)
}

// uint64 request_id = 3;
inline void ModifyOrderReject::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::request_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderReject.request_id)
  return _internal_request_id();
}
inline void ModifyOrderReject::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void ModifyOrderReject::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderReject.request_id)
}

// uint64 transact_time = 4;
inline void ModifyOrderReject::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::transact_time() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderReject.transact_time)
  return _internal_transact_time();
}
inline void ModifyOrderReject::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void ModifyOrderReject::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderReject.transact_time)
}

// uint64 subaccount_id = 5;
inline void ModifyOrderReject::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderReject.subaccount_id)
  return _internal_subaccount_id();
}
inline void ModifyOrderReject::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void ModifyOrderReject::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderReject.subaccount_id)
}

// .trade.ModifyOrderReject.Reason reason = 6;
inline void ModifyOrderReject::clear_reason() {
  reason_ = 0;
}
inline ::trade::ModifyOrderReject_Reason ModifyOrderReject::_internal_reason() const {
  return static_cast< ::trade::ModifyOrderReject_Reason >(reason_);
}
inline ::trade::ModifyOrderReject_Reason ModifyOrderReject::reason() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderReject.reason)
  return _internal_reason();
}
inline void ModifyOrderReject::_internal_set_reason(::trade::ModifyOrderReject_Reason value) {
  
  reason_ = value;
}
inline void ModifyOrderReject::set_reason(::trade::ModifyOrderReject_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderReject.reason)
}

// uint64 market_id = 7;
inline void ModifyOrderReject::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyOrderReject::market_id() const {
  // @@protoc_insertion_point(field_get:trade.ModifyOrderReject.market_id)
  return _internal_market_id();
}
inline void ModifyOrderReject::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void ModifyOrderReject::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.ModifyOrderReject.market_id)
}

// -------------------------------------------------------------------

// Fill

// uint64 msg_seq_num = 1;
inline void Fill::clear_msg_seq_num() {
  msg_seq_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:trade.Fill.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void Fill::_internal_set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_seq_num_ = value;
}
inline void Fill::set_msg_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:trade.Fill.msg_seq_num)
}

// uint64 market_id = 2;
inline void Fill::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::market_id() const {
  // @@protoc_insertion_point(field_get:trade.Fill.market_id)
  return _internal_market_id();
}
inline void Fill::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void Fill::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.Fill.market_id)
}

// uint64 client_order_id = 3;
inline void Fill::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.Fill.client_order_id)
  return _internal_client_order_id();
}
inline void Fill::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void Fill::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.Fill.client_order_id)
}

// uint64 exchange_order_id = 4;
inline void Fill::clear_exchange_order_id() {
  exchange_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_exchange_order_id() const {
  return exchange_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:trade.Fill.exchange_order_id)
  return _internal_exchange_order_id();
}
inline void Fill::_internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exchange_order_id_ = value;
}
inline void Fill::set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchange_order_id(value);
  // @@protoc_insertion_point(field_set:trade.Fill.exchange_order_id)
}

// uint64 fill_price = 5;
inline void Fill::clear_fill_price() {
  fill_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_fill_price() const {
  return fill_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::fill_price() const {
  // @@protoc_insertion_point(field_get:trade.Fill.fill_price)
  return _internal_fill_price();
}
inline void Fill::_internal_set_fill_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fill_price_ = value;
}
inline void Fill::set_fill_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fill_price(value);
  // @@protoc_insertion_point(field_set:trade.Fill.fill_price)
}

// uint64 fill_quantity = 6;
inline void Fill::clear_fill_quantity() {
  fill_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_fill_quantity() const {
  return fill_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::fill_quantity() const {
  // @@protoc_insertion_point(field_get:trade.Fill.fill_quantity)
  return _internal_fill_quantity();
}
inline void Fill::_internal_set_fill_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fill_quantity_ = value;
}
inline void Fill::set_fill_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fill_quantity(value);
  // @@protoc_insertion_point(field_set:trade.Fill.fill_quantity)
}

// uint64 leaves_quantity = 7;
inline void Fill::clear_leaves_quantity() {
  leaves_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_leaves_quantity() const {
  return leaves_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::leaves_quantity() const {
  // @@protoc_insertion_point(field_get:trade.Fill.leaves_quantity)
  return _internal_leaves_quantity();
}
inline void Fill::_internal_set_leaves_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  leaves_quantity_ = value;
}
inline void Fill::set_leaves_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leaves_quantity(value);
  // @@protoc_insertion_point(field_set:trade.Fill.leaves_quantity)
}

// uint64 transact_time = 8;
inline void Fill::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::transact_time() const {
  // @@protoc_insertion_point(field_get:trade.Fill.transact_time)
  return _internal_transact_time();
}
inline void Fill::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void Fill::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.Fill.transact_time)
}

// uint64 subaccount_id = 9;
inline void Fill::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.Fill.subaccount_id)
  return _internal_subaccount_id();
}
inline void Fill::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void Fill::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.Fill.subaccount_id)
}

// uint64 cumulative_quantity = 10;
inline void Fill::clear_cumulative_quantity() {
  cumulative_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::_internal_cumulative_quantity() const {
  return cumulative_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fill::cumulative_quantity() const {
  // @@protoc_insertion_point(field_get:trade.Fill.cumulative_quantity)
  return _internal_cumulative_quantity();
}
inline void Fill::_internal_set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cumulative_quantity_ = value;
}
inline void Fill::set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cumulative_quantity(value);
  // @@protoc_insertion_point(field_set:trade.Fill.cumulative_quantity)
}

// -------------------------------------------------------------------

// AssetPosition

// uint64 subaccount_id = 1;
inline void AssetPosition::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetPosition::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetPosition::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.AssetPosition.subaccount_id)
  return _internal_subaccount_id();
}
inline void AssetPosition::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void AssetPosition::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.AssetPosition.subaccount_id)
}

// uint64 asset_id = 2;
inline void AssetPosition::clear_asset_id() {
  asset_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetPosition::_internal_asset_id() const {
  return asset_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AssetPosition::asset_id() const {
  // @@protoc_insertion_point(field_get:trade.AssetPosition.asset_id)
  return _internal_asset_id();
}
inline void AssetPosition::_internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  asset_id_ = value;
}
inline void AssetPosition::set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:trade.AssetPosition.asset_id)
}

// .trade.RawUnits total = 3;
inline bool AssetPosition::_internal_has_total() const {
  return this != internal_default_instance() && total_ != nullptr;
}
inline bool AssetPosition::has_total() const {
  return _internal_has_total();
}
inline void AssetPosition::clear_total() {
  if (GetArena() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
}
inline const ::trade::RawUnits& AssetPosition::_internal_total() const {
  const ::trade::RawUnits* p = total_;
  return p != nullptr ? *p : reinterpret_cast<const ::trade::RawUnits&>(
      ::trade::_RawUnits_default_instance_);
}
inline const ::trade::RawUnits& AssetPosition::total() const {
  // @@protoc_insertion_point(field_get:trade.AssetPosition.total)
  return _internal_total();
}
inline void AssetPosition::unsafe_arena_set_allocated_total(
    ::trade::RawUnits* total) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_);
  }
  total_ = total;
  if (total) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.AssetPosition.total)
}
inline ::trade::RawUnits* AssetPosition::release_total() {
  
  ::trade::RawUnits* temp = total_;
  total_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trade::RawUnits* AssetPosition::unsafe_arena_release_total() {
  // @@protoc_insertion_point(field_release:trade.AssetPosition.total)
  
  ::trade::RawUnits* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::trade::RawUnits* AssetPosition::_internal_mutable_total() {
  
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::trade::RawUnits>(GetArena());
    total_ = p;
  }
  return total_;
}
inline ::trade::RawUnits* AssetPosition::mutable_total() {
  // @@protoc_insertion_point(field_mutable:trade.AssetPosition.total)
  return _internal_mutable_total();
}
inline void AssetPosition::set_allocated_total(::trade::RawUnits* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(total);
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    
  } else {
    
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:trade.AssetPosition.total)
}

// .trade.RawUnits available = 4;
inline bool AssetPosition::_internal_has_available() const {
  return this != internal_default_instance() && available_ != nullptr;
}
inline bool AssetPosition::has_available() const {
  return _internal_has_available();
}
inline void AssetPosition::clear_available() {
  if (GetArena() == nullptr && available_ != nullptr) {
    delete available_;
  }
  available_ = nullptr;
}
inline const ::trade::RawUnits& AssetPosition::_internal_available() const {
  const ::trade::RawUnits* p = available_;
  return p != nullptr ? *p : reinterpret_cast<const ::trade::RawUnits&>(
      ::trade::_RawUnits_default_instance_);
}
inline const ::trade::RawUnits& AssetPosition::available() const {
  // @@protoc_insertion_point(field_get:trade.AssetPosition.available)
  return _internal_available();
}
inline void AssetPosition::unsafe_arena_set_allocated_available(
    ::trade::RawUnits* available) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(available_);
  }
  available_ = available;
  if (available) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.AssetPosition.available)
}
inline ::trade::RawUnits* AssetPosition::release_available() {
  
  ::trade::RawUnits* temp = available_;
  available_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trade::RawUnits* AssetPosition::unsafe_arena_release_available() {
  // @@protoc_insertion_point(field_release:trade.AssetPosition.available)
  
  ::trade::RawUnits* temp = available_;
  available_ = nullptr;
  return temp;
}
inline ::trade::RawUnits* AssetPosition::_internal_mutable_available() {
  
  if (available_ == nullptr) {
    auto* p = CreateMaybeMessage<::trade::RawUnits>(GetArena());
    available_ = p;
  }
  return available_;
}
inline ::trade::RawUnits* AssetPosition::mutable_available() {
  // @@protoc_insertion_point(field_mutable:trade.AssetPosition.available)
  return _internal_mutable_available();
}
inline void AssetPosition::set_allocated_available(::trade::RawUnits* available) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete available_;
  }
  if (available) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(available);
    if (message_arena != submessage_arena) {
      available = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, available, submessage_arena);
    }
    
  } else {
    
  }
  available_ = available;
  // @@protoc_insertion_point(field_set_allocated:trade.AssetPosition.available)
}

// -------------------------------------------------------------------

// RawUnits

// uint64 word0 = 1;
inline void RawUnits::clear_word0() {
  word0_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawUnits::_internal_word0() const {
  return word0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawUnits::word0() const {
  // @@protoc_insertion_point(field_get:trade.RawUnits.word0)
  return _internal_word0();
}
inline void RawUnits::_internal_set_word0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  word0_ = value;
}
inline void RawUnits::set_word0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_word0(value);
  // @@protoc_insertion_point(field_set:trade.RawUnits.word0)
}

// uint64 word1 = 2;
inline void RawUnits::clear_word1() {
  word1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawUnits::_internal_word1() const {
  return word1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawUnits::word1() const {
  // @@protoc_insertion_point(field_get:trade.RawUnits.word1)
  return _internal_word1();
}
inline void RawUnits::_internal_set_word1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  word1_ = value;
}
inline void RawUnits::set_word1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_word1(value);
  // @@protoc_insertion_point(field_set:trade.RawUnits.word1)
}

// uint64 word2 = 3;
inline void RawUnits::clear_word2() {
  word2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawUnits::_internal_word2() const {
  return word2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawUnits::word2() const {
  // @@protoc_insertion_point(field_get:trade.RawUnits.word2)
  return _internal_word2();
}
inline void RawUnits::_internal_set_word2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  word2_ = value;
}
inline void RawUnits::set_word2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_word2(value);
  // @@protoc_insertion_point(field_set:trade.RawUnits.word2)
}

// uint64 word3 = 4;
inline void RawUnits::clear_word3() {
  word3_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawUnits::_internal_word3() const {
  return word3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawUnits::word3() const {
  // @@protoc_insertion_point(field_get:trade.RawUnits.word3)
  return _internal_word3();
}
inline void RawUnits::_internal_set_word3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  word3_ = value;
}
inline void RawUnits::set_word3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_word3(value);
  // @@protoc_insertion_point(field_set:trade.RawUnits.word3)
}

// -------------------------------------------------------------------

// Bootstrap

// .trade.Done done = 1;
inline bool Bootstrap::_internal_has_done() const {
  return inner_case() == kDone;
}
inline bool Bootstrap::has_done() const {
  return _internal_has_done();
}
inline void Bootstrap::set_has_done() {
  _oneof_case_[0] = kDone;
}
inline void Bootstrap::clear_done() {
  if (_internal_has_done()) {
    if (GetArena() == nullptr) {
      delete inner_.done_;
    }
    clear_has_inner();
  }
}
inline ::trade::Done* Bootstrap::release_done() {
  // @@protoc_insertion_point(field_release:trade.Bootstrap.done)
  if (_internal_has_done()) {
    clear_has_inner();
      ::trade::Done* temp = inner_.done_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::Done& Bootstrap::_internal_done() const {
  return _internal_has_done()
      ? *inner_.done_
      : reinterpret_cast< ::trade::Done&>(::trade::_Done_default_instance_);
}
inline const ::trade::Done& Bootstrap::done() const {
  // @@protoc_insertion_point(field_get:trade.Bootstrap.done)
  return _internal_done();
}
inline ::trade::Done* Bootstrap::unsafe_arena_release_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.Bootstrap.done)
  if (_internal_has_done()) {
    clear_has_inner();
    ::trade::Done* temp = inner_.done_;
    inner_.done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Bootstrap::unsafe_arena_set_allocated_done(::trade::Done* done) {
  clear_inner();
  if (done) {
    set_has_done();
    inner_.done_ = done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.Bootstrap.done)
}
inline ::trade::Done* Bootstrap::_internal_mutable_done() {
  if (!_internal_has_done()) {
    clear_inner();
    set_has_done();
    inner_.done_ = CreateMaybeMessage< ::trade::Done >(GetArena());
  }
  return inner_.done_;
}
inline ::trade::Done* Bootstrap::mutable_done() {
  // @@protoc_insertion_point(field_mutable:trade.Bootstrap.done)
  return _internal_mutable_done();
}

// .trade.RestingOrders resting = 2;
inline bool Bootstrap::_internal_has_resting() const {
  return inner_case() == kResting;
}
inline bool Bootstrap::has_resting() const {
  return _internal_has_resting();
}
inline void Bootstrap::set_has_resting() {
  _oneof_case_[0] = kResting;
}
inline void Bootstrap::clear_resting() {
  if (_internal_has_resting()) {
    if (GetArena() == nullptr) {
      delete inner_.resting_;
    }
    clear_has_inner();
  }
}
inline ::trade::RestingOrders* Bootstrap::release_resting() {
  // @@protoc_insertion_point(field_release:trade.Bootstrap.resting)
  if (_internal_has_resting()) {
    clear_has_inner();
      ::trade::RestingOrders* temp = inner_.resting_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.resting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::RestingOrders& Bootstrap::_internal_resting() const {
  return _internal_has_resting()
      ? *inner_.resting_
      : reinterpret_cast< ::trade::RestingOrders&>(::trade::_RestingOrders_default_instance_);
}
inline const ::trade::RestingOrders& Bootstrap::resting() const {
  // @@protoc_insertion_point(field_get:trade.Bootstrap.resting)
  return _internal_resting();
}
inline ::trade::RestingOrders* Bootstrap::unsafe_arena_release_resting() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.Bootstrap.resting)
  if (_internal_has_resting()) {
    clear_has_inner();
    ::trade::RestingOrders* temp = inner_.resting_;
    inner_.resting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Bootstrap::unsafe_arena_set_allocated_resting(::trade::RestingOrders* resting) {
  clear_inner();
  if (resting) {
    set_has_resting();
    inner_.resting_ = resting;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.Bootstrap.resting)
}
inline ::trade::RestingOrders* Bootstrap::_internal_mutable_resting() {
  if (!_internal_has_resting()) {
    clear_inner();
    set_has_resting();
    inner_.resting_ = CreateMaybeMessage< ::trade::RestingOrders >(GetArena());
  }
  return inner_.resting_;
}
inline ::trade::RestingOrders* Bootstrap::mutable_resting() {
  // @@protoc_insertion_point(field_mutable:trade.Bootstrap.resting)
  return _internal_mutable_resting();
}

// .trade.AssetPositions position = 3;
inline bool Bootstrap::_internal_has_position() const {
  return inner_case() == kPosition;
}
inline bool Bootstrap::has_position() const {
  return _internal_has_position();
}
inline void Bootstrap::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void Bootstrap::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete inner_.position_;
    }
    clear_has_inner();
  }
}
inline ::trade::AssetPositions* Bootstrap::release_position() {
  // @@protoc_insertion_point(field_release:trade.Bootstrap.position)
  if (_internal_has_position()) {
    clear_has_inner();
      ::trade::AssetPositions* temp = inner_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trade::AssetPositions& Bootstrap::_internal_position() const {
  return _internal_has_position()
      ? *inner_.position_
      : reinterpret_cast< ::trade::AssetPositions&>(::trade::_AssetPositions_default_instance_);
}
inline const ::trade::AssetPositions& Bootstrap::position() const {
  // @@protoc_insertion_point(field_get:trade.Bootstrap.position)
  return _internal_position();
}
inline ::trade::AssetPositions* Bootstrap::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:trade.Bootstrap.position)
  if (_internal_has_position()) {
    clear_has_inner();
    ::trade::AssetPositions* temp = inner_.position_;
    inner_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Bootstrap::unsafe_arena_set_allocated_position(::trade::AssetPositions* position) {
  clear_inner();
  if (position) {
    set_has_position();
    inner_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.Bootstrap.position)
}
inline ::trade::AssetPositions* Bootstrap::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_inner();
    set_has_position();
    inner_.position_ = CreateMaybeMessage< ::trade::AssetPositions >(GetArena());
  }
  return inner_.position_;
}
inline ::trade::AssetPositions* Bootstrap::mutable_position() {
  // @@protoc_insertion_point(field_mutable:trade.Bootstrap.position)
  return _internal_mutable_position();
}

inline bool Bootstrap::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void Bootstrap::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline Bootstrap::InnerCase Bootstrap::inner_case() const {
  return Bootstrap::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RestingOrders

// repeated .trade.RestingOrder orders = 1;
inline int RestingOrders::_internal_orders_size() const {
  return orders_.size();
}
inline int RestingOrders::orders_size() const {
  return _internal_orders_size();
}
inline void RestingOrders::clear_orders() {
  orders_.Clear();
}
inline ::trade::RestingOrder* RestingOrders::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:trade.RestingOrders.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::RestingOrder >*
RestingOrders::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:trade.RestingOrders.orders)
  return &orders_;
}
inline const ::trade::RestingOrder& RestingOrders::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::trade::RestingOrder& RestingOrders::orders(int index) const {
  // @@protoc_insertion_point(field_get:trade.RestingOrders.orders)
  return _internal_orders(index);
}
inline ::trade::RestingOrder* RestingOrders::_internal_add_orders() {
  return orders_.Add();
}
inline ::trade::RestingOrder* RestingOrders::add_orders() {
  // @@protoc_insertion_point(field_add:trade.RestingOrders.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::RestingOrder >&
RestingOrders::orders() const {
  // @@protoc_insertion_point(field_list:trade.RestingOrders.orders)
  return orders_;
}

// -------------------------------------------------------------------

// AssetPositions

// repeated .trade.AssetPosition positions = 1;
inline int AssetPositions::_internal_positions_size() const {
  return positions_.size();
}
inline int AssetPositions::positions_size() const {
  return _internal_positions_size();
}
inline void AssetPositions::clear_positions() {
  positions_.Clear();
}
inline ::trade::AssetPosition* AssetPositions::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:trade.AssetPositions.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::AssetPosition >*
AssetPositions::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:trade.AssetPositions.positions)
  return &positions_;
}
inline const ::trade::AssetPosition& AssetPositions::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::trade::AssetPosition& AssetPositions::positions(int index) const {
  // @@protoc_insertion_point(field_get:trade.AssetPositions.positions)
  return _internal_positions(index);
}
inline ::trade::AssetPosition* AssetPositions::_internal_add_positions() {
  return positions_.Add();
}
inline ::trade::AssetPosition* AssetPositions::add_positions() {
  // @@protoc_insertion_point(field_add:trade.AssetPositions.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::AssetPosition >&
AssetPositions::positions() const {
  // @@protoc_insertion_point(field_list:trade.AssetPositions.positions)
  return positions_;
}

// -------------------------------------------------------------------

// Done

// uint64 latest_transact_time = 1;
inline void Done::clear_latest_transact_time() {
  latest_transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Done::_internal_latest_transact_time() const {
  return latest_transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Done::latest_transact_time() const {
  // @@protoc_insertion_point(field_get:trade.Done.latest_transact_time)
  return _internal_latest_transact_time();
}
inline void Done::_internal_set_latest_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latest_transact_time_ = value;
}
inline void Done::set_latest_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest_transact_time(value);
  // @@protoc_insertion_point(field_set:trade.Done.latest_transact_time)
}

// -------------------------------------------------------------------

// RestingOrder

// uint64 client_order_id = 1;
inline void RestingOrder::clear_client_order_id() {
  client_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_client_order_id() const {
  return client_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::client_order_id() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.client_order_id)
  return _internal_client_order_id();
}
inline void RestingOrder::_internal_set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_order_id_ = value;
}
inline void RestingOrder::set_client_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_order_id(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.client_order_id)
}

// uint64 exchange_order_id = 2;
inline void RestingOrder::clear_exchange_order_id() {
  exchange_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_exchange_order_id() const {
  return exchange_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.exchange_order_id)
  return _internal_exchange_order_id();
}
inline void RestingOrder::_internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exchange_order_id_ = value;
}
inline void RestingOrder::set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchange_order_id(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.exchange_order_id)
}

// uint64 market_id = 3;
inline void RestingOrder::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::market_id() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.market_id)
  return _internal_market_id();
}
inline void RestingOrder::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void RestingOrder::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.market_id)
}

// uint64 price = 4;
inline void RestingOrder::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::price() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.price)
  return _internal_price();
}
inline void RestingOrder::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void RestingOrder::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.price)
}

// uint64 order_quantity = 5;
inline void RestingOrder::clear_order_quantity() {
  order_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_order_quantity() const {
  return order_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::order_quantity() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.order_quantity)
  return _internal_order_quantity();
}
inline void RestingOrder::_internal_set_order_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  order_quantity_ = value;
}
inline void RestingOrder::set_order_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_order_quantity(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.order_quantity)
}

// .trade.Side side = 6;
inline void RestingOrder::clear_side() {
  side_ = 0;
}
inline ::trade::Side RestingOrder::_internal_side() const {
  return static_cast< ::trade::Side >(side_);
}
inline ::trade::Side RestingOrder::side() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.side)
  return _internal_side();
}
inline void RestingOrder::_internal_set_side(::trade::Side value) {
  
  side_ = value;
}
inline void RestingOrder::set_side(::trade::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.side)
}

// .trade.TimeInForce time_in_force = 7;
inline void RestingOrder::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::trade::TimeInForce RestingOrder::_internal_time_in_force() const {
  return static_cast< ::trade::TimeInForce >(time_in_force_);
}
inline ::trade::TimeInForce RestingOrder::time_in_force() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.time_in_force)
  return _internal_time_in_force();
}
inline void RestingOrder::_internal_set_time_in_force(::trade::TimeInForce value) {
  
  time_in_force_ = value;
}
inline void RestingOrder::set_time_in_force(::trade::TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.time_in_force)
}

// .trade.OrderType order_type = 8;
inline void RestingOrder::clear_order_type() {
  order_type_ = 0;
}
inline ::trade::OrderType RestingOrder::_internal_order_type() const {
  return static_cast< ::trade::OrderType >(order_type_);
}
inline ::trade::OrderType RestingOrder::order_type() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.order_type)
  return _internal_order_type();
}
inline void RestingOrder::_internal_set_order_type(::trade::OrderType value) {
  
  order_type_ = value;
}
inline void RestingOrder::set_order_type(::trade::OrderType value) {
  _internal_set_order_type(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.order_type)
}

// uint64 remaining_quantity = 9;
inline void RestingOrder::clear_remaining_quantity() {
  remaining_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_remaining_quantity() const {
  return remaining_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::remaining_quantity() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.remaining_quantity)
  return _internal_remaining_quantity();
}
inline void RestingOrder::_internal_set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remaining_quantity_ = value;
}
inline void RestingOrder::set_remaining_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remaining_quantity(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.remaining_quantity)
}

// uint64 rest_time = 10;
inline void RestingOrder::clear_rest_time() {
  rest_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_rest_time() const {
  return rest_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::rest_time() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.rest_time)
  return _internal_rest_time();
}
inline void RestingOrder::_internal_set_rest_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rest_time_ = value;
}
inline void RestingOrder::set_rest_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rest_time(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.rest_time)
}

// uint64 subaccount_id = 11;
inline void RestingOrder::clear_subaccount_id() {
  subaccount_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_subaccount_id() const {
  return subaccount_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::subaccount_id() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.subaccount_id)
  return _internal_subaccount_id();
}
inline void RestingOrder::_internal_set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  subaccount_id_ = value;
}
inline void RestingOrder::set_subaccount_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_subaccount_id(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.subaccount_id)
}

// uint64 cumulative_quantity = 12;
inline void RestingOrder::clear_cumulative_quantity() {
  cumulative_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::_internal_cumulative_quantity() const {
  return cumulative_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RestingOrder::cumulative_quantity() const {
  // @@protoc_insertion_point(field_get:trade.RestingOrder.cumulative_quantity)
  return _internal_cumulative_quantity();
}
inline void RestingOrder::_internal_set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cumulative_quantity_ = value;
}
inline void RestingOrder::set_cumulative_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cumulative_quantity(value);
  // @@protoc_insertion_point(field_set:trade.RestingOrder.cumulative_quantity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trade

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::trade::CancelOrderAck_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::CancelOrderAck_Reason>() {
  return ::trade::CancelOrderAck_Reason_descriptor();
}
template <> struct is_proto_enum< ::trade::MassCancelAck_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::MassCancelAck_Reason>() {
  return ::trade::MassCancelAck_Reason_descriptor();
}
template <> struct is_proto_enum< ::trade::NewOrderReject_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::NewOrderReject_Reason>() {
  return ::trade::NewOrderReject_Reason_descriptor();
}
template <> struct is_proto_enum< ::trade::CancelOrderReject_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::CancelOrderReject_Reason>() {
  return ::trade::CancelOrderReject_Reason_descriptor();
}
template <> struct is_proto_enum< ::trade::ModifyOrderReject_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::ModifyOrderReject_Reason>() {
  return ::trade::ModifyOrderReject_Reason_descriptor();
}
template <> struct is_proto_enum< ::trade::Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::Side>() {
  return ::trade::Side_descriptor();
}
template <> struct is_proto_enum< ::trade::TimeInForce> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::TimeInForce>() {
  return ::trade::TimeInForce_descriptor();
}
template <> struct is_proto_enum< ::trade::OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::OrderType>() {
  return ::trade::OrderType_descriptor();
}
template <> struct is_proto_enum< ::trade::SelfTradePrevention> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::SelfTradePrevention>() {
  return ::trade::SelfTradePrevention_descriptor();
}
template <> struct is_proto_enum< ::trade::PostOnly> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trade::PostOnly>() {
  return ::trade::PostOnly_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
