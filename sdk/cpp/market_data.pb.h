// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_market_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_market_5fdata_2eproto_metadata_getter(int index);
namespace market_data {
class AggMessage;
struct AggMessageDefaultTypeInternal;
extern AggMessageDefaultTypeInternal _AggMessage_default_instance_;
class ClientMessage;
struct ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class Kline;
struct KlineDefaultTypeInternal;
extern KlineDefaultTypeInternal _Kline_default_instance_;
class MarketByOrder;
struct MarketByOrderDefaultTypeInternal;
extern MarketByOrderDefaultTypeInternal _MarketByOrder_default_instance_;
class MarketByOrderDiff;
struct MarketByOrderDiffDefaultTypeInternal;
extern MarketByOrderDiffDefaultTypeInternal _MarketByOrderDiff_default_instance_;
class MarketByOrderDiff_Diff;
struct MarketByOrderDiff_DiffDefaultTypeInternal;
extern MarketByOrderDiff_DiffDefaultTypeInternal _MarketByOrderDiff_Diff_default_instance_;
class MarketByOrder_Order;
struct MarketByOrder_OrderDefaultTypeInternal;
extern MarketByOrder_OrderDefaultTypeInternal _MarketByOrder_Order_default_instance_;
class MarketByPrice;
struct MarketByPriceDefaultTypeInternal;
extern MarketByPriceDefaultTypeInternal _MarketByPrice_default_instance_;
class MarketByPriceDiff;
struct MarketByPriceDiffDefaultTypeInternal;
extern MarketByPriceDiffDefaultTypeInternal _MarketByPriceDiff_default_instance_;
class MarketByPriceDiff_Diff;
struct MarketByPriceDiff_DiffDefaultTypeInternal;
extern MarketByPriceDiff_DiffDefaultTypeInternal _MarketByPriceDiff_Diff_default_instance_;
class MarketByPrice_Level;
struct MarketByPrice_LevelDefaultTypeInternal;
extern MarketByPrice_LevelDefaultTypeInternal _MarketByPrice_Level_default_instance_;
class MdMessage;
struct MdMessageDefaultTypeInternal;
extern MdMessageDefaultTypeInternal _MdMessage_default_instance_;
class MdMessages;
struct MdMessagesDefaultTypeInternal;
extern MdMessagesDefaultTypeInternal _MdMessages_default_instance_;
class RateUpdate;
struct RateUpdateDefaultTypeInternal;
extern RateUpdateDefaultTypeInternal _RateUpdate_default_instance_;
class RateUpdates;
struct RateUpdatesDefaultTypeInternal;
extern RateUpdatesDefaultTypeInternal _RateUpdates_default_instance_;
class Summary;
struct SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
class TopOfBook;
struct TopOfBookDefaultTypeInternal;
extern TopOfBookDefaultTypeInternal _TopOfBook_default_instance_;
class TopOfBooks;
struct TopOfBooksDefaultTypeInternal;
extern TopOfBooksDefaultTypeInternal _TopOfBooks_default_instance_;
class Trades;
struct TradesDefaultTypeInternal;
extern TradesDefaultTypeInternal _Trades_default_instance_;
class Trades_Trade;
struct Trades_TradeDefaultTypeInternal;
extern Trades_TradeDefaultTypeInternal _Trades_Trade_default_instance_;
}  // namespace market_data
PROTOBUF_NAMESPACE_OPEN
template<> ::market_data::AggMessage* Arena::CreateMaybeMessage<::market_data::AggMessage>(Arena*);
template<> ::market_data::ClientMessage* Arena::CreateMaybeMessage<::market_data::ClientMessage>(Arena*);
template<> ::market_data::Config* Arena::CreateMaybeMessage<::market_data::Config>(Arena*);
template<> ::market_data::Heartbeat* Arena::CreateMaybeMessage<::market_data::Heartbeat>(Arena*);
template<> ::market_data::Kline* Arena::CreateMaybeMessage<::market_data::Kline>(Arena*);
template<> ::market_data::MarketByOrder* Arena::CreateMaybeMessage<::market_data::MarketByOrder>(Arena*);
template<> ::market_data::MarketByOrderDiff* Arena::CreateMaybeMessage<::market_data::MarketByOrderDiff>(Arena*);
template<> ::market_data::MarketByOrderDiff_Diff* Arena::CreateMaybeMessage<::market_data::MarketByOrderDiff_Diff>(Arena*);
template<> ::market_data::MarketByOrder_Order* Arena::CreateMaybeMessage<::market_data::MarketByOrder_Order>(Arena*);
template<> ::market_data::MarketByPrice* Arena::CreateMaybeMessage<::market_data::MarketByPrice>(Arena*);
template<> ::market_data::MarketByPriceDiff* Arena::CreateMaybeMessage<::market_data::MarketByPriceDiff>(Arena*);
template<> ::market_data::MarketByPriceDiff_Diff* Arena::CreateMaybeMessage<::market_data::MarketByPriceDiff_Diff>(Arena*);
template<> ::market_data::MarketByPrice_Level* Arena::CreateMaybeMessage<::market_data::MarketByPrice_Level>(Arena*);
template<> ::market_data::MdMessage* Arena::CreateMaybeMessage<::market_data::MdMessage>(Arena*);
template<> ::market_data::MdMessages* Arena::CreateMaybeMessage<::market_data::MdMessages>(Arena*);
template<> ::market_data::RateUpdate* Arena::CreateMaybeMessage<::market_data::RateUpdate>(Arena*);
template<> ::market_data::RateUpdates* Arena::CreateMaybeMessage<::market_data::RateUpdates>(Arena*);
template<> ::market_data::Summary* Arena::CreateMaybeMessage<::market_data::Summary>(Arena*);
template<> ::market_data::TopOfBook* Arena::CreateMaybeMessage<::market_data::TopOfBook>(Arena*);
template<> ::market_data::TopOfBooks* Arena::CreateMaybeMessage<::market_data::TopOfBooks>(Arena*);
template<> ::market_data::Trades* Arena::CreateMaybeMessage<::market_data::Trades>(Arena*);
template<> ::market_data::Trades_Trade* Arena::CreateMaybeMessage<::market_data::Trades_Trade>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace market_data {

enum MarketByPriceDiff_DiffOp : int {
  MarketByPriceDiff_DiffOp_ADD = 0,
  MarketByPriceDiff_DiffOp_REMOVE = 1,
  MarketByPriceDiff_DiffOp_REPLACE = 2,
  MarketByPriceDiff_DiffOp_MarketByPriceDiff_DiffOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MarketByPriceDiff_DiffOp_MarketByPriceDiff_DiffOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MarketByPriceDiff_DiffOp_IsValid(int value);
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff_DiffOp_DiffOp_MIN = MarketByPriceDiff_DiffOp_ADD;
constexpr MarketByPriceDiff_DiffOp MarketByPriceDiff_DiffOp_DiffOp_MAX = MarketByPriceDiff_DiffOp_REPLACE;
constexpr int MarketByPriceDiff_DiffOp_DiffOp_ARRAYSIZE = MarketByPriceDiff_DiffOp_DiffOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByPriceDiff_DiffOp_descriptor();
template<typename T>
inline const std::string& MarketByPriceDiff_DiffOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarketByPriceDiff_DiffOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarketByPriceDiff_DiffOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarketByPriceDiff_DiffOp_descriptor(), enum_t_value);
}
inline bool MarketByPriceDiff_DiffOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarketByPriceDiff_DiffOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarketByPriceDiff_DiffOp>(
    MarketByPriceDiff_DiffOp_descriptor(), name, value);
}
enum MarketByOrderDiff_DiffOp : int {
  MarketByOrderDiff_DiffOp_ADD = 0,
  MarketByOrderDiff_DiffOp_REMOVE = 1,
  MarketByOrderDiff_DiffOp_REPLACE = 2,
  MarketByOrderDiff_DiffOp_MarketByOrderDiff_DiffOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MarketByOrderDiff_DiffOp_MarketByOrderDiff_DiffOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MarketByOrderDiff_DiffOp_IsValid(int value);
constexpr MarketByOrderDiff_DiffOp MarketByOrderDiff_DiffOp_DiffOp_MIN = MarketByOrderDiff_DiffOp_ADD;
constexpr MarketByOrderDiff_DiffOp MarketByOrderDiff_DiffOp_DiffOp_MAX = MarketByOrderDiff_DiffOp_REPLACE;
constexpr int MarketByOrderDiff_DiffOp_DiffOp_ARRAYSIZE = MarketByOrderDiff_DiffOp_DiffOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByOrderDiff_DiffOp_descriptor();
template<typename T>
inline const std::string& MarketByOrderDiff_DiffOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarketByOrderDiff_DiffOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarketByOrderDiff_DiffOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarketByOrderDiff_DiffOp_descriptor(), enum_t_value);
}
inline bool MarketByOrderDiff_DiffOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarketByOrderDiff_DiffOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarketByOrderDiff_DiffOp>(
    MarketByOrderDiff_DiffOp_descriptor(), name, value);
}
enum Side : int {
  BID = 0,
  ASK = 1,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Side_IsValid(int value);
constexpr Side Side_MIN = BID;
constexpr Side Side_MAX = ASK;
constexpr int Side_ARRAYSIZE = Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor();
template<typename T>
inline const std::string& Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Side_descriptor(), enum_t_value);
}
inline bool Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
enum KlineInterval : int {
  S1 = 0,
  M1 = 1,
  M15 = 2,
  H1 = 3,
  H4 = 4,
  D1 = 5,
  KlineInterval_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KlineInterval_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KlineInterval_IsValid(int value);
constexpr KlineInterval KlineInterval_MIN = S1;
constexpr KlineInterval KlineInterval_MAX = D1;
constexpr int KlineInterval_ARRAYSIZE = KlineInterval_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KlineInterval_descriptor();
template<typename T>
inline const std::string& KlineInterval_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KlineInterval>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KlineInterval_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KlineInterval_descriptor(), enum_t_value);
}
inline bool KlineInterval_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KlineInterval* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KlineInterval>(
    KlineInterval_descriptor(), name, value);
}
enum RateUpdateSide : int {
  BASE = 0,
  QUOTE = 1,
  RateUpdateSide_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RateUpdateSide_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RateUpdateSide_IsValid(int value);
constexpr RateUpdateSide RateUpdateSide_MIN = BASE;
constexpr RateUpdateSide RateUpdateSide_MAX = QUOTE;
constexpr int RateUpdateSide_ARRAYSIZE = RateUpdateSide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RateUpdateSide_descriptor();
template<typename T>
inline const std::string& RateUpdateSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RateUpdateSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RateUpdateSide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RateUpdateSide_descriptor(), enum_t_value);
}
inline bool RateUpdateSide_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RateUpdateSide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RateUpdateSide>(
    RateUpdateSide_descriptor(), name, value);
}
// ===================================================================

class MdMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MdMessage) */ {
 public:
  inline MdMessage() : MdMessage(nullptr) {}
  virtual ~MdMessage();
  explicit constexpr MdMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdMessage(const MdMessage& from);
  MdMessage(MdMessage&& from) noexcept
    : MdMessage() {
    *this = ::std::move(from);
  }

  inline MdMessage& operator=(const MdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdMessage& operator=(MdMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MdMessage& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kHeartbeat = 1,
    kSummary = 2,
    kTrades = 3,
    kMboSnapshot = 4,
    kMboDiff = 5,
    kMbpSnapshot = 6,
    kMbpDiff = 7,
    kKline = 8,
    INNER_NOT_SET = 0,
  };

  static inline const MdMessage* internal_default_instance() {
    return reinterpret_cast<const MdMessage*>(
               &_MdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MdMessage& a, MdMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MdMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdMessage* New() const final {
    return CreateMaybeMessage<MdMessage>(nullptr);
  }

  MdMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MdMessage& from);
  void MergeFrom(const MdMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MdMessage";
  }
  protected:
  explicit MdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatFieldNumber = 1,
    kSummaryFieldNumber = 2,
    kTradesFieldNumber = 3,
    kMboSnapshotFieldNumber = 4,
    kMboDiffFieldNumber = 5,
    kMbpSnapshotFieldNumber = 6,
    kMbpDiffFieldNumber = 7,
    kKlineFieldNumber = 8,
  };
  // .market_data.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::market_data::Heartbeat& heartbeat() const;
  ::market_data::Heartbeat* release_heartbeat();
  ::market_data::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::market_data::Heartbeat* heartbeat);
  private:
  const ::market_data::Heartbeat& _internal_heartbeat() const;
  ::market_data::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::market_data::Heartbeat* heartbeat);
  ::market_data::Heartbeat* unsafe_arena_release_heartbeat();

  // .market_data.Summary summary = 2;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::market_data::Summary& summary() const;
  ::market_data::Summary* release_summary();
  ::market_data::Summary* mutable_summary();
  void set_allocated_summary(::market_data::Summary* summary);
  private:
  const ::market_data::Summary& _internal_summary() const;
  ::market_data::Summary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::market_data::Summary* summary);
  ::market_data::Summary* unsafe_arena_release_summary();

  // .market_data.Trades trades = 3;
  bool has_trades() const;
  private:
  bool _internal_has_trades() const;
  public:
  void clear_trades();
  const ::market_data::Trades& trades() const;
  ::market_data::Trades* release_trades();
  ::market_data::Trades* mutable_trades();
  void set_allocated_trades(::market_data::Trades* trades);
  private:
  const ::market_data::Trades& _internal_trades() const;
  ::market_data::Trades* _internal_mutable_trades();
  public:
  void unsafe_arena_set_allocated_trades(
      ::market_data::Trades* trades);
  ::market_data::Trades* unsafe_arena_release_trades();

  // .market_data.MarketByOrder mbo_snapshot = 4;
  bool has_mbo_snapshot() const;
  private:
  bool _internal_has_mbo_snapshot() const;
  public:
  void clear_mbo_snapshot();
  const ::market_data::MarketByOrder& mbo_snapshot() const;
  ::market_data::MarketByOrder* release_mbo_snapshot();
  ::market_data::MarketByOrder* mutable_mbo_snapshot();
  void set_allocated_mbo_snapshot(::market_data::MarketByOrder* mbo_snapshot);
  private:
  const ::market_data::MarketByOrder& _internal_mbo_snapshot() const;
  ::market_data::MarketByOrder* _internal_mutable_mbo_snapshot();
  public:
  void unsafe_arena_set_allocated_mbo_snapshot(
      ::market_data::MarketByOrder* mbo_snapshot);
  ::market_data::MarketByOrder* unsafe_arena_release_mbo_snapshot();

  // .market_data.MarketByOrderDiff mbo_diff = 5;
  bool has_mbo_diff() const;
  private:
  bool _internal_has_mbo_diff() const;
  public:
  void clear_mbo_diff();
  const ::market_data::MarketByOrderDiff& mbo_diff() const;
  ::market_data::MarketByOrderDiff* release_mbo_diff();
  ::market_data::MarketByOrderDiff* mutable_mbo_diff();
  void set_allocated_mbo_diff(::market_data::MarketByOrderDiff* mbo_diff);
  private:
  const ::market_data::MarketByOrderDiff& _internal_mbo_diff() const;
  ::market_data::MarketByOrderDiff* _internal_mutable_mbo_diff();
  public:
  void unsafe_arena_set_allocated_mbo_diff(
      ::market_data::MarketByOrderDiff* mbo_diff);
  ::market_data::MarketByOrderDiff* unsafe_arena_release_mbo_diff();

  // .market_data.MarketByPrice mbp_snapshot = 6;
  bool has_mbp_snapshot() const;
  private:
  bool _internal_has_mbp_snapshot() const;
  public:
  void clear_mbp_snapshot();
  const ::market_data::MarketByPrice& mbp_snapshot() const;
  ::market_data::MarketByPrice* release_mbp_snapshot();
  ::market_data::MarketByPrice* mutable_mbp_snapshot();
  void set_allocated_mbp_snapshot(::market_data::MarketByPrice* mbp_snapshot);
  private:
  const ::market_data::MarketByPrice& _internal_mbp_snapshot() const;
  ::market_data::MarketByPrice* _internal_mutable_mbp_snapshot();
  public:
  void unsafe_arena_set_allocated_mbp_snapshot(
      ::market_data::MarketByPrice* mbp_snapshot);
  ::market_data::MarketByPrice* unsafe_arena_release_mbp_snapshot();

  // .market_data.MarketByPriceDiff mbp_diff = 7;
  bool has_mbp_diff() const;
  private:
  bool _internal_has_mbp_diff() const;
  public:
  void clear_mbp_diff();
  const ::market_data::MarketByPriceDiff& mbp_diff() const;
  ::market_data::MarketByPriceDiff* release_mbp_diff();
  ::market_data::MarketByPriceDiff* mutable_mbp_diff();
  void set_allocated_mbp_diff(::market_data::MarketByPriceDiff* mbp_diff);
  private:
  const ::market_data::MarketByPriceDiff& _internal_mbp_diff() const;
  ::market_data::MarketByPriceDiff* _internal_mutable_mbp_diff();
  public:
  void unsafe_arena_set_allocated_mbp_diff(
      ::market_data::MarketByPriceDiff* mbp_diff);
  ::market_data::MarketByPriceDiff* unsafe_arena_release_mbp_diff();

  // .market_data.Kline kline = 8;
  bool has_kline() const;
  private:
  bool _internal_has_kline() const;
  public:
  void clear_kline();
  const ::market_data::Kline& kline() const;
  ::market_data::Kline* release_kline();
  ::market_data::Kline* mutable_kline();
  void set_allocated_kline(::market_data::Kline* kline);
  private:
  const ::market_data::Kline& _internal_kline() const;
  ::market_data::Kline* _internal_mutable_kline();
  public:
  void unsafe_arena_set_allocated_kline(
      ::market_data::Kline* kline);
  ::market_data::Kline* unsafe_arena_release_kline();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:market_data.MdMessage)
 private:
  class _Internal;
  void set_has_heartbeat();
  void set_has_summary();
  void set_has_trades();
  void set_has_mbo_snapshot();
  void set_has_mbo_diff();
  void set_has_mbp_snapshot();
  void set_has_mbp_diff();
  void set_has_kline();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::market_data::Heartbeat* heartbeat_;
    ::market_data::Summary* summary_;
    ::market_data::Trades* trades_;
    ::market_data::MarketByOrder* mbo_snapshot_;
    ::market_data::MarketByOrderDiff* mbo_diff_;
    ::market_data::MarketByPrice* mbp_snapshot_;
    ::market_data::MarketByPriceDiff* mbp_diff_;
    ::market_data::Kline* kline_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByPrice_Level PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MarketByPrice.Level) */ {
 public:
  inline MarketByPrice_Level() : MarketByPrice_Level(nullptr) {}
  virtual ~MarketByPrice_Level();
  explicit constexpr MarketByPrice_Level(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByPrice_Level(const MarketByPrice_Level& from);
  MarketByPrice_Level(MarketByPrice_Level&& from) noexcept
    : MarketByPrice_Level() {
    *this = ::std::move(from);
  }

  inline MarketByPrice_Level& operator=(const MarketByPrice_Level& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByPrice_Level& operator=(MarketByPrice_Level&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByPrice_Level& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByPrice_Level* internal_default_instance() {
    return reinterpret_cast<const MarketByPrice_Level*>(
               &_MarketByPrice_Level_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MarketByPrice_Level& a, MarketByPrice_Level& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByPrice_Level* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByPrice_Level* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByPrice_Level* New() const final {
    return CreateMaybeMessage<MarketByPrice_Level>(nullptr);
  }

  MarketByPrice_Level* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByPrice_Level>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByPrice_Level& from);
  void MergeFrom(const MarketByPrice_Level& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByPrice_Level* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MarketByPrice.Level";
  }
  protected:
  explicit MarketByPrice_Level(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kSideFieldNumber = 3,
  };
  // uint64 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .market_data.Side side = 3;
  void clear_side();
  ::market_data::Side side() const;
  void set_side(::market_data::Side value);
  private:
  ::market_data::Side _internal_side() const;
  void _internal_set_side(::market_data::Side value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.MarketByPrice.Level)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByPrice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MarketByPrice) */ {
 public:
  inline MarketByPrice() : MarketByPrice(nullptr) {}
  virtual ~MarketByPrice();
  explicit constexpr MarketByPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByPrice(const MarketByPrice& from);
  MarketByPrice(MarketByPrice&& from) noexcept
    : MarketByPrice() {
    *this = ::std::move(from);
  }

  inline MarketByPrice& operator=(const MarketByPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByPrice& operator=(MarketByPrice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByPrice* internal_default_instance() {
    return reinterpret_cast<const MarketByPrice*>(
               &_MarketByPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MarketByPrice& a, MarketByPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByPrice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByPrice* New() const final {
    return CreateMaybeMessage<MarketByPrice>(nullptr);
  }

  MarketByPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByPrice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByPrice& from);
  void MergeFrom(const MarketByPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByPrice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MarketByPrice";
  }
  protected:
  explicit MarketByPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketByPrice_Level Level;

  // accessors -------------------------------------------------------

  enum : int {
    kLevelsFieldNumber = 1,
    kChunkFieldNumber = 2,
    kNumChunksFieldNumber = 3,
  };
  // repeated .market_data.MarketByPrice.Level levels = 1;
  int levels_size() const;
  private:
  int _internal_levels_size() const;
  public:
  void clear_levels();
  ::market_data::MarketByPrice_Level* mutable_levels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPrice_Level >*
      mutable_levels();
  private:
  const ::market_data::MarketByPrice_Level& _internal_levels(int index) const;
  ::market_data::MarketByPrice_Level* _internal_add_levels();
  public:
  const ::market_data::MarketByPrice_Level& levels(int index) const;
  ::market_data::MarketByPrice_Level* add_levels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPrice_Level >&
      levels() const;

  // uint32 chunk = 2;
  void clear_chunk();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk() const;
  void set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk() const;
  void _internal_set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_chunks = 3;
  void clear_num_chunks();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_chunks() const;
  void set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_chunks() const;
  void _internal_set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.MarketByPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPrice_Level > levels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByPriceDiff_Diff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MarketByPriceDiff.Diff) */ {
 public:
  inline MarketByPriceDiff_Diff() : MarketByPriceDiff_Diff(nullptr) {}
  virtual ~MarketByPriceDiff_Diff();
  explicit constexpr MarketByPriceDiff_Diff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByPriceDiff_Diff(const MarketByPriceDiff_Diff& from);
  MarketByPriceDiff_Diff(MarketByPriceDiff_Diff&& from) noexcept
    : MarketByPriceDiff_Diff() {
    *this = ::std::move(from);
  }

  inline MarketByPriceDiff_Diff& operator=(const MarketByPriceDiff_Diff& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByPriceDiff_Diff& operator=(MarketByPriceDiff_Diff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByPriceDiff_Diff& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByPriceDiff_Diff* internal_default_instance() {
    return reinterpret_cast<const MarketByPriceDiff_Diff*>(
               &_MarketByPriceDiff_Diff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MarketByPriceDiff_Diff& a, MarketByPriceDiff_Diff& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByPriceDiff_Diff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByPriceDiff_Diff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByPriceDiff_Diff* New() const final {
    return CreateMaybeMessage<MarketByPriceDiff_Diff>(nullptr);
  }

  MarketByPriceDiff_Diff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByPriceDiff_Diff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByPriceDiff_Diff& from);
  void MergeFrom(const MarketByPriceDiff_Diff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByPriceDiff_Diff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MarketByPriceDiff.Diff";
  }
  protected:
  explicit MarketByPriceDiff_Diff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kSideFieldNumber = 3,
    kOpFieldNumber = 4,
  };
  // uint64 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .market_data.Side side = 3;
  void clear_side();
  ::market_data::Side side() const;
  void set_side(::market_data::Side value);
  private:
  ::market_data::Side _internal_side() const;
  void _internal_set_side(::market_data::Side value);
  public:

  // .market_data.MarketByPriceDiff.DiffOp op = 4;
  void clear_op();
  ::market_data::MarketByPriceDiff_DiffOp op() const;
  void set_op(::market_data::MarketByPriceDiff_DiffOp value);
  private:
  ::market_data::MarketByPriceDiff_DiffOp _internal_op() const;
  void _internal_set_op(::market_data::MarketByPriceDiff_DiffOp value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.MarketByPriceDiff.Diff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  int side_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByPriceDiff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MarketByPriceDiff) */ {
 public:
  inline MarketByPriceDiff() : MarketByPriceDiff(nullptr) {}
  virtual ~MarketByPriceDiff();
  explicit constexpr MarketByPriceDiff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByPriceDiff(const MarketByPriceDiff& from);
  MarketByPriceDiff(MarketByPriceDiff&& from) noexcept
    : MarketByPriceDiff() {
    *this = ::std::move(from);
  }

  inline MarketByPriceDiff& operator=(const MarketByPriceDiff& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByPriceDiff& operator=(MarketByPriceDiff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByPriceDiff& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByPriceDiff* internal_default_instance() {
    return reinterpret_cast<const MarketByPriceDiff*>(
               &_MarketByPriceDiff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MarketByPriceDiff& a, MarketByPriceDiff& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByPriceDiff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByPriceDiff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByPriceDiff* New() const final {
    return CreateMaybeMessage<MarketByPriceDiff>(nullptr);
  }

  MarketByPriceDiff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByPriceDiff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByPriceDiff& from);
  void MergeFrom(const MarketByPriceDiff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByPriceDiff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MarketByPriceDiff";
  }
  protected:
  explicit MarketByPriceDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketByPriceDiff_Diff Diff;

  typedef MarketByPriceDiff_DiffOp DiffOp;
  static constexpr DiffOp ADD =
    MarketByPriceDiff_DiffOp_ADD;
  static constexpr DiffOp REMOVE =
    MarketByPriceDiff_DiffOp_REMOVE;
  static constexpr DiffOp REPLACE =
    MarketByPriceDiff_DiffOp_REPLACE;
  static inline bool DiffOp_IsValid(int value) {
    return MarketByPriceDiff_DiffOp_IsValid(value);
  }
  static constexpr DiffOp DiffOp_MIN =
    MarketByPriceDiff_DiffOp_DiffOp_MIN;
  static constexpr DiffOp DiffOp_MAX =
    MarketByPriceDiff_DiffOp_DiffOp_MAX;
  static constexpr int DiffOp_ARRAYSIZE =
    MarketByPriceDiff_DiffOp_DiffOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DiffOp_descriptor() {
    return MarketByPriceDiff_DiffOp_descriptor();
  }
  template<typename T>
  static inline const std::string& DiffOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DiffOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DiffOp_Name.");
    return MarketByPriceDiff_DiffOp_Name(enum_t_value);
  }
  static inline bool DiffOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DiffOp* value) {
    return MarketByPriceDiff_DiffOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDiffsFieldNumber = 1,
    kTotalBidLevelsFieldNumber = 2,
    kTotalAskLevelsFieldNumber = 3,
  };
  // repeated .market_data.MarketByPriceDiff.Diff diffs = 1;
  int diffs_size() const;
  private:
  int _internal_diffs_size() const;
  public:
  void clear_diffs();
  ::market_data::MarketByPriceDiff_Diff* mutable_diffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPriceDiff_Diff >*
      mutable_diffs();
  private:
  const ::market_data::MarketByPriceDiff_Diff& _internal_diffs(int index) const;
  ::market_data::MarketByPriceDiff_Diff* _internal_add_diffs();
  public:
  const ::market_data::MarketByPriceDiff_Diff& diffs(int index) const;
  ::market_data::MarketByPriceDiff_Diff* add_diffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPriceDiff_Diff >&
      diffs() const;

  // uint32 total_bid_levels = 2;
  void clear_total_bid_levels();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_bid_levels() const;
  void set_total_bid_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_bid_levels() const;
  void _internal_set_total_bid_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_ask_levels = 3;
  void clear_total_ask_levels();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_ask_levels() const;
  void set_total_ask_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_ask_levels() const;
  void _internal_set_total_ask_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.MarketByPriceDiff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPriceDiff_Diff > diffs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_bid_levels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_ask_levels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByOrder_Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MarketByOrder.Order) */ {
 public:
  inline MarketByOrder_Order() : MarketByOrder_Order(nullptr) {}
  virtual ~MarketByOrder_Order();
  explicit constexpr MarketByOrder_Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrder_Order(const MarketByOrder_Order& from);
  MarketByOrder_Order(MarketByOrder_Order&& from) noexcept
    : MarketByOrder_Order() {
    *this = ::std::move(from);
  }

  inline MarketByOrder_Order& operator=(const MarketByOrder_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrder_Order& operator=(MarketByOrder_Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByOrder_Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrder_Order* internal_default_instance() {
    return reinterpret_cast<const MarketByOrder_Order*>(
               &_MarketByOrder_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MarketByOrder_Order& a, MarketByOrder_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrder_Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrder_Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByOrder_Order* New() const final {
    return CreateMaybeMessage<MarketByOrder_Order>(nullptr);
  }

  MarketByOrder_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByOrder_Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByOrder_Order& from);
  void MergeFrom(const MarketByOrder_Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrder_Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MarketByOrder.Order";
  }
  protected:
  explicit MarketByOrder_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kExchangeOrderIdFieldNumber = 3,
    kPriorityFieldNumber = 5,
    kSideFieldNumber = 4,
  };
  // uint64 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 exchange_order_id = 3;
  void clear_exchange_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id() const;
  void set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchange_order_id() const;
  void _internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 priority = 5;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint64 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .market_data.Side side = 4;
  void clear_side();
  ::market_data::Side side() const;
  void set_side(::market_data::Side value);
  private:
  ::market_data::Side _internal_side() const;
  void _internal_set_side(::market_data::Side value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.MarketByOrder.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 priority_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MarketByOrder) */ {
 public:
  inline MarketByOrder() : MarketByOrder(nullptr) {}
  virtual ~MarketByOrder();
  explicit constexpr MarketByOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrder(const MarketByOrder& from);
  MarketByOrder(MarketByOrder&& from) noexcept
    : MarketByOrder() {
    *this = ::std::move(from);
  }

  inline MarketByOrder& operator=(const MarketByOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrder& operator=(MarketByOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrder* internal_default_instance() {
    return reinterpret_cast<const MarketByOrder*>(
               &_MarketByOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MarketByOrder& a, MarketByOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByOrder* New() const final {
    return CreateMaybeMessage<MarketByOrder>(nullptr);
  }

  MarketByOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByOrder& from);
  void MergeFrom(const MarketByOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MarketByOrder";
  }
  protected:
  explicit MarketByOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketByOrder_Order Order;

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
    kChunkFieldNumber = 2,
    kNumChunksFieldNumber = 3,
  };
  // repeated .market_data.MarketByOrder.Order orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::market_data::MarketByOrder_Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrder_Order >*
      mutable_orders();
  private:
  const ::market_data::MarketByOrder_Order& _internal_orders(int index) const;
  ::market_data::MarketByOrder_Order* _internal_add_orders();
  public:
  const ::market_data::MarketByOrder_Order& orders(int index) const;
  ::market_data::MarketByOrder_Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrder_Order >&
      orders() const;

  // uint32 chunk = 2;
  void clear_chunk();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk() const;
  void set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk() const;
  void _internal_set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_chunks = 3;
  void clear_num_chunks();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_chunks() const;
  void set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_chunks() const;
  void _internal_set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.MarketByOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrder_Order > orders_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByOrderDiff_Diff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MarketByOrderDiff.Diff) */ {
 public:
  inline MarketByOrderDiff_Diff() : MarketByOrderDiff_Diff(nullptr) {}
  virtual ~MarketByOrderDiff_Diff();
  explicit constexpr MarketByOrderDiff_Diff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderDiff_Diff(const MarketByOrderDiff_Diff& from);
  MarketByOrderDiff_Diff(MarketByOrderDiff_Diff&& from) noexcept
    : MarketByOrderDiff_Diff() {
    *this = ::std::move(from);
  }

  inline MarketByOrderDiff_Diff& operator=(const MarketByOrderDiff_Diff& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderDiff_Diff& operator=(MarketByOrderDiff_Diff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByOrderDiff_Diff& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderDiff_Diff* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderDiff_Diff*>(
               &_MarketByOrderDiff_Diff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MarketByOrderDiff_Diff& a, MarketByOrderDiff_Diff& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderDiff_Diff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderDiff_Diff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByOrderDiff_Diff* New() const final {
    return CreateMaybeMessage<MarketByOrderDiff_Diff>(nullptr);
  }

  MarketByOrderDiff_Diff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByOrderDiff_Diff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByOrderDiff_Diff& from);
  void MergeFrom(const MarketByOrderDiff_Diff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderDiff_Diff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MarketByOrderDiff.Diff";
  }
  protected:
  explicit MarketByOrderDiff_Diff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kExchangeOrderIdFieldNumber = 3,
    kSideFieldNumber = 4,
    kOpFieldNumber = 5,
    kPriorityFieldNumber = 6,
  };
  // uint64 price = 1;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 exchange_order_id = 3;
  void clear_exchange_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id() const;
  void set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchange_order_id() const;
  void _internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .market_data.Side side = 4;
  void clear_side();
  ::market_data::Side side() const;
  void set_side(::market_data::Side value);
  private:
  ::market_data::Side _internal_side() const;
  void _internal_set_side(::market_data::Side value);
  public:

  // .market_data.MarketByOrderDiff.DiffOp op = 5;
  void clear_op();
  ::market_data::MarketByOrderDiff_DiffOp op() const;
  void set_op(::market_data::MarketByOrderDiff_DiffOp value);
  private:
  ::market_data::MarketByOrderDiff_DiffOp _internal_op() const;
  void _internal_set_op(::market_data::MarketByOrderDiff_DiffOp value);
  public:

  // uint64 priority = 6;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint64 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.MarketByOrderDiff.Diff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_order_id_;
  int side_;
  int op_;
  ::PROTOBUF_NAMESPACE_ID::uint64 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketByOrderDiff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MarketByOrderDiff) */ {
 public:
  inline MarketByOrderDiff() : MarketByOrderDiff(nullptr) {}
  virtual ~MarketByOrderDiff();
  explicit constexpr MarketByOrderDiff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderDiff(const MarketByOrderDiff& from);
  MarketByOrderDiff(MarketByOrderDiff&& from) noexcept
    : MarketByOrderDiff() {
    *this = ::std::move(from);
  }

  inline MarketByOrderDiff& operator=(const MarketByOrderDiff& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderDiff& operator=(MarketByOrderDiff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByOrderDiff& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderDiff* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderDiff*>(
               &_MarketByOrderDiff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MarketByOrderDiff& a, MarketByOrderDiff& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderDiff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderDiff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByOrderDiff* New() const final {
    return CreateMaybeMessage<MarketByOrderDiff>(nullptr);
  }

  MarketByOrderDiff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByOrderDiff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByOrderDiff& from);
  void MergeFrom(const MarketByOrderDiff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderDiff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MarketByOrderDiff";
  }
  protected:
  explicit MarketByOrderDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarketByOrderDiff_Diff Diff;

  typedef MarketByOrderDiff_DiffOp DiffOp;
  static constexpr DiffOp ADD =
    MarketByOrderDiff_DiffOp_ADD;
  static constexpr DiffOp REMOVE =
    MarketByOrderDiff_DiffOp_REMOVE;
  static constexpr DiffOp REPLACE =
    MarketByOrderDiff_DiffOp_REPLACE;
  static inline bool DiffOp_IsValid(int value) {
    return MarketByOrderDiff_DiffOp_IsValid(value);
  }
  static constexpr DiffOp DiffOp_MIN =
    MarketByOrderDiff_DiffOp_DiffOp_MIN;
  static constexpr DiffOp DiffOp_MAX =
    MarketByOrderDiff_DiffOp_DiffOp_MAX;
  static constexpr int DiffOp_ARRAYSIZE =
    MarketByOrderDiff_DiffOp_DiffOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DiffOp_descriptor() {
    return MarketByOrderDiff_DiffOp_descriptor();
  }
  template<typename T>
  static inline const std::string& DiffOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DiffOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DiffOp_Name.");
    return MarketByOrderDiff_DiffOp_Name(enum_t_value);
  }
  static inline bool DiffOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DiffOp* value) {
    return MarketByOrderDiff_DiffOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDiffsFieldNumber = 1,
    kTotalBidLevelsFieldNumber = 2,
    kTotalAskLevelsFieldNumber = 3,
    kTotalBidOrdersFieldNumber = 4,
    kTotalAskOrdersFieldNumber = 5,
  };
  // repeated .market_data.MarketByOrderDiff.Diff diffs = 1;
  int diffs_size() const;
  private:
  int _internal_diffs_size() const;
  public:
  void clear_diffs();
  ::market_data::MarketByOrderDiff_Diff* mutable_diffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrderDiff_Diff >*
      mutable_diffs();
  private:
  const ::market_data::MarketByOrderDiff_Diff& _internal_diffs(int index) const;
  ::market_data::MarketByOrderDiff_Diff* _internal_add_diffs();
  public:
  const ::market_data::MarketByOrderDiff_Diff& diffs(int index) const;
  ::market_data::MarketByOrderDiff_Diff* add_diffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrderDiff_Diff >&
      diffs() const;

  // uint32 total_bid_levels = 2;
  void clear_total_bid_levels();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_bid_levels() const;
  void set_total_bid_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_bid_levels() const;
  void _internal_set_total_bid_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_ask_levels = 3;
  void clear_total_ask_levels();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_ask_levels() const;
  void set_total_ask_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_ask_levels() const;
  void _internal_set_total_ask_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_bid_orders = 4;
  void clear_total_bid_orders();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_bid_orders() const;
  void set_total_bid_orders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_bid_orders() const;
  void _internal_set_total_bid_orders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_ask_orders = 5;
  void clear_total_ask_orders();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_ask_orders() const;
  void set_total_ask_orders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_ask_orders() const;
  void _internal_set_total_ask_orders(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.MarketByOrderDiff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrderDiff_Diff > diffs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_bid_levels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_ask_levels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_bid_orders_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_ask_orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Trades_Trade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.Trades.Trade) */ {
 public:
  inline Trades_Trade() : Trades_Trade(nullptr) {}
  virtual ~Trades_Trade();
  explicit constexpr Trades_Trade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trades_Trade(const Trades_Trade& from);
  Trades_Trade(Trades_Trade&& from) noexcept
    : Trades_Trade() {
    *this = ::std::move(from);
  }

  inline Trades_Trade& operator=(const Trades_Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trades_Trade& operator=(Trades_Trade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trades_Trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trades_Trade* internal_default_instance() {
    return reinterpret_cast<const Trades_Trade*>(
               &_Trades_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Trades_Trade& a, Trades_Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trades_Trade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trades_Trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trades_Trade* New() const final {
    return CreateMaybeMessage<Trades_Trade>(nullptr);
  }

  Trades_Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trades_Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trades_Trade& from);
  void MergeFrom(const Trades_Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trades_Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.Trades.Trade";
  }
  protected:
  explicit Trades_Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeIdFieldNumber = 1,
    kPriceFieldNumber = 2,
    kRestingExchangeOrderIdFieldNumber = 4,
    kFillQuantityFieldNumber = 5,
    kTransactTimeFieldNumber = 6,
    kAggressingExchangeOrderIdFieldNumber = 7,
    kAggressingSideFieldNumber = 3,
  };
  // uint64 tradeId = 1;
  void clear_tradeid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tradeid() const;
  void set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tradeid() const;
  void _internal_set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 2;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 resting_exchange_order_id = 4;
  void clear_resting_exchange_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 resting_exchange_order_id() const;
  void set_resting_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_resting_exchange_order_id() const;
  void _internal_set_resting_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fill_quantity = 5;
  void clear_fill_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 fill_quantity() const;
  void set_fill_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fill_quantity() const;
  void _internal_set_fill_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 6;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 aggressing_exchange_order_id = 7;
  void clear_aggressing_exchange_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 aggressing_exchange_order_id() const;
  void set_aggressing_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_aggressing_exchange_order_id() const;
  void _internal_set_aggressing_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .market_data.Side aggressing_side = 3;
  void clear_aggressing_side();
  ::market_data::Side aggressing_side() const;
  void set_aggressing_side(::market_data::Side value);
  private:
  ::market_data::Side _internal_aggressing_side() const;
  void _internal_set_aggressing_side(::market_data::Side value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.Trades.Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tradeid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resting_exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fill_quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 aggressing_exchange_order_id_;
  int aggressing_side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Trades PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.Trades) */ {
 public:
  inline Trades() : Trades(nullptr) {}
  virtual ~Trades();
  explicit constexpr Trades(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trades(const Trades& from);
  Trades(Trades&& from) noexcept
    : Trades() {
    *this = ::std::move(from);
  }

  inline Trades& operator=(const Trades& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trades& operator=(Trades&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trades& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trades* internal_default_instance() {
    return reinterpret_cast<const Trades*>(
               &_Trades_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Trades& a, Trades& b) {
    a.Swap(&b);
  }
  inline void Swap(Trades* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trades* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trades* New() const final {
    return CreateMaybeMessage<Trades>(nullptr);
  }

  Trades* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trades>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trades& from);
  void MergeFrom(const Trades& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trades* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.Trades";
  }
  protected:
  explicit Trades(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Trades_Trade Trade;

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .market_data.Trades.Trade trades = 1;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::market_data::Trades_Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::Trades_Trade >*
      mutable_trades();
  private:
  const ::market_data::Trades_Trade& _internal_trades(int index) const;
  ::market_data::Trades_Trade* _internal_add_trades();
  public:
  const ::market_data::Trades_Trade& trades(int index) const;
  ::market_data::Trades_Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::Trades_Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:market_data.Trades)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::Trades_Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Summary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.Summary) */ {
 public:
  inline Summary() : Summary(nullptr) {}
  virtual ~Summary();
  explicit constexpr Summary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Summary(const Summary& from);
  Summary(Summary&& from) noexcept
    : Summary() {
    *this = ::std::move(from);
  }

  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary& operator=(Summary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary& default_instance() {
    return *internal_default_instance();
  }
  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
               &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Summary& a, Summary& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary* New() const final {
    return CreateMaybeMessage<Summary>(nullptr);
  }

  Summary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary& from);
  void MergeFrom(const Summary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.Summary";
  }
  protected:
  explicit Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
    kCloseFieldNumber = 2,
    kLowFieldNumber = 3,
    kHighFieldNumber = 4,
    kBaseVolumeLoFieldNumber = 5,
    kBaseVolumeHiFieldNumber = 6,
    kQuoteVolumeLoFieldNumber = 7,
    kQuoteVolumeHiFieldNumber = 8,
  };
  // uint64 open = 1;
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::uint64 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 close = 2;
  void clear_close();
  ::PROTOBUF_NAMESPACE_ID::uint64 close() const;
  void set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_close() const;
  void _internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 low = 3;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 high = 4;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 base_volume_lo = 5;
  void clear_base_volume_lo();
  ::PROTOBUF_NAMESPACE_ID::uint64 base_volume_lo() const;
  void set_base_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_base_volume_lo() const;
  void _internal_set_base_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 base_volume_hi = 6;
  void clear_base_volume_hi();
  ::PROTOBUF_NAMESPACE_ID::uint64 base_volume_hi() const;
  void set_base_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_base_volume_hi() const;
  void _internal_set_base_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quote_volume_lo = 7;
  void clear_quote_volume_lo();
  ::PROTOBUF_NAMESPACE_ID::uint64 quote_volume_lo() const;
  void set_quote_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quote_volume_lo() const;
  void _internal_set_quote_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quote_volume_hi = 8;
  void clear_quote_volume_hi();
  ::PROTOBUF_NAMESPACE_ID::uint64 quote_volume_hi() const;
  void set_quote_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quote_volume_hi() const;
  void _internal_set_quote_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.Summary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_;
  ::PROTOBUF_NAMESPACE_ID::uint64 close_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 base_volume_lo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 base_volume_hi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quote_volume_lo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quote_volume_hi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Kline PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.Kline) */ {
 public:
  inline Kline() : Kline(nullptr) {}
  virtual ~Kline();
  explicit constexpr Kline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Kline(const Kline& from);
  Kline(Kline&& from) noexcept
    : Kline() {
    *this = ::std::move(from);
  }

  inline Kline& operator=(const Kline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kline& operator=(Kline&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Kline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kline* internal_default_instance() {
    return reinterpret_cast<const Kline*>(
               &_Kline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Kline& a, Kline& b) {
    a.Swap(&b);
  }
  inline void Swap(Kline* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Kline* New() const final {
    return CreateMaybeMessage<Kline>(nullptr);
  }

  Kline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Kline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Kline& from);
  void MergeFrom(const Kline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.Kline";
  }
  protected:
  explicit Kline(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 2,
    kOpenFieldNumber = 3,
    kCloseFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kVolumeLoFieldNumber = 7,
    kVolumeHiFieldNumber = 8,
    kIntervalFieldNumber = 1,
  };
  // uint64 start_time = 2;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 open = 3;
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::uint64 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 close = 4;
  void clear_close();
  ::PROTOBUF_NAMESPACE_ID::uint64 close() const;
  void set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_close() const;
  void _internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 high = 5;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 low = 6;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volume_lo = 7;
  void clear_volume_lo();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_lo() const;
  void set_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume_lo() const;
  void _internal_set_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volume_hi = 8;
  void clear_volume_hi();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_hi() const;
  void set_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume_hi() const;
  void _internal_set_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .market_data.KlineInterval interval = 1;
  void clear_interval();
  ::market_data::KlineInterval interval() const;
  void set_interval(::market_data::KlineInterval value);
  private:
  ::market_data::KlineInterval _internal_interval() const;
  void _internal_set_interval(::market_data::KlineInterval value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.Kline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_;
  ::PROTOBUF_NAMESPACE_ID::uint64 close_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_lo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_hi_;
  int interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Heartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  virtual ~Heartbeat();
  explicit constexpr Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const final {
    return CreateMaybeMessage<Heartbeat>(nullptr);
  }

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MdMessages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.MdMessages) */ {
 public:
  inline MdMessages() : MdMessages(nullptr) {}
  virtual ~MdMessages();
  explicit constexpr MdMessages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdMessages(const MdMessages& from);
  MdMessages(MdMessages&& from) noexcept
    : MdMessages() {
    *this = ::std::move(from);
  }

  inline MdMessages& operator=(const MdMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdMessages& operator=(MdMessages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MdMessages& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdMessages* internal_default_instance() {
    return reinterpret_cast<const MdMessages*>(
               &_MdMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MdMessages& a, MdMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(MdMessages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MdMessages* New() const final {
    return CreateMaybeMessage<MdMessages>(nullptr);
  }

  MdMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MdMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MdMessages& from);
  void MergeFrom(const MdMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.MdMessages";
  }
  protected:
  explicit MdMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .market_data.MdMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::market_data::MdMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MdMessage >*
      mutable_messages();
  private:
  const ::market_data::MdMessage& _internal_messages(int index) const;
  ::market_data::MdMessage* _internal_add_messages();
  public:
  const ::market_data::MdMessage& messages(int index) const;
  ::market_data::MdMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MdMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:market_data.MdMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MdMessage > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AggMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.AggMessage) */ {
 public:
  inline AggMessage() : AggMessage(nullptr) {}
  virtual ~AggMessage();
  explicit constexpr AggMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggMessage(const AggMessage& from);
  AggMessage(AggMessage&& from) noexcept
    : AggMessage() {
    *this = ::std::move(from);
  }

  inline AggMessage& operator=(const AggMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggMessage& operator=(AggMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggMessage& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kHeartbeat = 1,
    kTopOfBooks = 2,
    kRateUpdates = 3,
    INNER_NOT_SET = 0,
  };

  static inline const AggMessage* internal_default_instance() {
    return reinterpret_cast<const AggMessage*>(
               &_AggMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AggMessage& a, AggMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AggMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggMessage* New() const final {
    return CreateMaybeMessage<AggMessage>(nullptr);
  }

  AggMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggMessage& from);
  void MergeFrom(const AggMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.AggMessage";
  }
  protected:
  explicit AggMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatFieldNumber = 1,
    kTopOfBooksFieldNumber = 2,
    kRateUpdatesFieldNumber = 3,
  };
  // .market_data.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::market_data::Heartbeat& heartbeat() const;
  ::market_data::Heartbeat* release_heartbeat();
  ::market_data::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::market_data::Heartbeat* heartbeat);
  private:
  const ::market_data::Heartbeat& _internal_heartbeat() const;
  ::market_data::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::market_data::Heartbeat* heartbeat);
  ::market_data::Heartbeat* unsafe_arena_release_heartbeat();

  // .market_data.TopOfBooks top_of_books = 2;
  bool has_top_of_books() const;
  private:
  bool _internal_has_top_of_books() const;
  public:
  void clear_top_of_books();
  const ::market_data::TopOfBooks& top_of_books() const;
  ::market_data::TopOfBooks* release_top_of_books();
  ::market_data::TopOfBooks* mutable_top_of_books();
  void set_allocated_top_of_books(::market_data::TopOfBooks* top_of_books);
  private:
  const ::market_data::TopOfBooks& _internal_top_of_books() const;
  ::market_data::TopOfBooks* _internal_mutable_top_of_books();
  public:
  void unsafe_arena_set_allocated_top_of_books(
      ::market_data::TopOfBooks* top_of_books);
  ::market_data::TopOfBooks* unsafe_arena_release_top_of_books();

  // .market_data.RateUpdates rate_updates = 3;
  bool has_rate_updates() const;
  private:
  bool _internal_has_rate_updates() const;
  public:
  void clear_rate_updates();
  const ::market_data::RateUpdates& rate_updates() const;
  ::market_data::RateUpdates* release_rate_updates();
  ::market_data::RateUpdates* mutable_rate_updates();
  void set_allocated_rate_updates(::market_data::RateUpdates* rate_updates);
  private:
  const ::market_data::RateUpdates& _internal_rate_updates() const;
  ::market_data::RateUpdates* _internal_mutable_rate_updates();
  public:
  void unsafe_arena_set_allocated_rate_updates(
      ::market_data::RateUpdates* rate_updates);
  ::market_data::RateUpdates* unsafe_arena_release_rate_updates();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:market_data.AggMessage)
 private:
  class _Internal;
  void set_has_heartbeat();
  void set_has_top_of_books();
  void set_has_rate_updates();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::market_data::Heartbeat* heartbeat_;
    ::market_data::TopOfBooks* top_of_books_;
    ::market_data::RateUpdates* rate_updates_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TopOfBook PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.TopOfBook) */ {
 public:
  inline TopOfBook() : TopOfBook(nullptr) {}
  virtual ~TopOfBook();
  explicit constexpr TopOfBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopOfBook(const TopOfBook& from);
  TopOfBook(TopOfBook&& from) noexcept
    : TopOfBook() {
    *this = ::std::move(from);
  }

  inline TopOfBook& operator=(const TopOfBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopOfBook& operator=(TopOfBook&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopOfBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopOfBook* internal_default_instance() {
    return reinterpret_cast<const TopOfBook*>(
               &_TopOfBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TopOfBook& a, TopOfBook& b) {
    a.Swap(&b);
  }
  inline void Swap(TopOfBook* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopOfBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopOfBook* New() const final {
    return CreateMaybeMessage<TopOfBook>(nullptr);
  }

  TopOfBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopOfBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopOfBook& from);
  void MergeFrom(const TopOfBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopOfBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.TopOfBook";
  }
  protected:
  explicit TopOfBook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kTransactTimeFieldNumber = 2,
    kBidPriceFieldNumber = 3,
    kBidQuantityFieldNumber = 4,
    kAskPriceFieldNumber = 5,
    kAskQuantityFieldNumber = 6,
    kLastPriceFieldNumber = 7,
    kRolling24HPriceFieldNumber = 8,
  };
  // uint64 market_id = 1;
  void clear_market_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id() const;
  void set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_market_id() const;
  void _internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transact_time = 2;
  void clear_transact_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time() const;
  void set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transact_time() const;
  void _internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bid_price = 3;
  void clear_bid_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 bid_price() const;
  void set_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bid_price() const;
  void _internal_set_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bid_quantity = 4;
  void clear_bid_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 bid_quantity() const;
  void set_bid_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bid_quantity() const;
  void _internal_set_bid_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ask_price = 5;
  void clear_ask_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 ask_price() const;
  void set_ask_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ask_price() const;
  void _internal_set_ask_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ask_quantity = 6;
  void clear_ask_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 ask_quantity() const;
  void set_ask_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ask_quantity() const;
  void _internal_set_ask_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_price = 7;
  void clear_last_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_price() const;
  void set_last_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_price() const;
  void _internal_set_last_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rolling24h_price = 8;
  void clear_rolling24h_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 rolling24h_price() const;
  void set_rolling24h_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rolling24h_price() const;
  void _internal_set_rolling24h_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.TopOfBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 market_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transact_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bid_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bid_quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ask_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ask_quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rolling24h_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TopOfBooks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.TopOfBooks) */ {
 public:
  inline TopOfBooks() : TopOfBooks(nullptr) {}
  virtual ~TopOfBooks();
  explicit constexpr TopOfBooks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopOfBooks(const TopOfBooks& from);
  TopOfBooks(TopOfBooks&& from) noexcept
    : TopOfBooks() {
    *this = ::std::move(from);
  }

  inline TopOfBooks& operator=(const TopOfBooks& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopOfBooks& operator=(TopOfBooks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopOfBooks& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopOfBooks* internal_default_instance() {
    return reinterpret_cast<const TopOfBooks*>(
               &_TopOfBooks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TopOfBooks& a, TopOfBooks& b) {
    a.Swap(&b);
  }
  inline void Swap(TopOfBooks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopOfBooks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopOfBooks* New() const final {
    return CreateMaybeMessage<TopOfBooks>(nullptr);
  }

  TopOfBooks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopOfBooks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopOfBooks& from);
  void MergeFrom(const TopOfBooks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopOfBooks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.TopOfBooks";
  }
  protected:
  explicit TopOfBooks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopsFieldNumber = 1,
  };
  // repeated .market_data.TopOfBook tops = 1;
  int tops_size() const;
  private:
  int _internal_tops_size() const;
  public:
  void clear_tops();
  ::market_data::TopOfBook* mutable_tops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::TopOfBook >*
      mutable_tops();
  private:
  const ::market_data::TopOfBook& _internal_tops(int index) const;
  ::market_data::TopOfBook* _internal_add_tops();
  public:
  const ::market_data::TopOfBook& tops(int index) const;
  ::market_data::TopOfBook* add_tops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::TopOfBook >&
      tops() const;

  // @@protoc_insertion_point(class_scope:market_data.TopOfBooks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::TopOfBook > tops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class RateUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.RateUpdate) */ {
 public:
  inline RateUpdate() : RateUpdate(nullptr) {}
  virtual ~RateUpdate();
  explicit constexpr RateUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateUpdate(const RateUpdate& from);
  RateUpdate(RateUpdate&& from) noexcept
    : RateUpdate() {
    *this = ::std::move(from);
  }

  inline RateUpdate& operator=(const RateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateUpdate& operator=(RateUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RateUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateUpdate* internal_default_instance() {
    return reinterpret_cast<const RateUpdate*>(
               &_RateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RateUpdate& a, RateUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(RateUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RateUpdate* New() const final {
    return CreateMaybeMessage<RateUpdate>(nullptr);
  }

  RateUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RateUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RateUpdate& from);
  void MergeFrom(const RateUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.RateUpdate";
  }
  protected:
  explicit RateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kRateFieldNumber = 3,
    kSideFieldNumber = 4,
  };
  // uint64 asset_id = 1;
  void clear_asset_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 asset_id() const;
  void set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_asset_id() const;
  void _internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rate = 3;
  void clear_rate();
  ::PROTOBUF_NAMESPACE_ID::uint64 rate() const;
  void set_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rate() const;
  void _internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .market_data.RateUpdateSide side = 4;
  void clear_side();
  ::market_data::RateUpdateSide side() const;
  void set_side(::market_data::RateUpdateSide value);
  private:
  ::market_data::RateUpdateSide _internal_side() const;
  void _internal_set_side(::market_data::RateUpdateSide value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.RateUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 asset_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rate_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class RateUpdates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.RateUpdates) */ {
 public:
  inline RateUpdates() : RateUpdates(nullptr) {}
  virtual ~RateUpdates();
  explicit constexpr RateUpdates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateUpdates(const RateUpdates& from);
  RateUpdates(RateUpdates&& from) noexcept
    : RateUpdates() {
    *this = ::std::move(from);
  }

  inline RateUpdates& operator=(const RateUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateUpdates& operator=(RateUpdates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RateUpdates& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateUpdates* internal_default_instance() {
    return reinterpret_cast<const RateUpdates*>(
               &_RateUpdates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RateUpdates& a, RateUpdates& b) {
    a.Swap(&b);
  }
  inline void Swap(RateUpdates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateUpdates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RateUpdates* New() const final {
    return CreateMaybeMessage<RateUpdates>(nullptr);
  }

  RateUpdates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RateUpdates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RateUpdates& from);
  void MergeFrom(const RateUpdates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateUpdates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.RateUpdates";
  }
  protected:
  explicit RateUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .market_data.RateUpdate updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::market_data::RateUpdate* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::RateUpdate >*
      mutable_updates();
  private:
  const ::market_data::RateUpdate& _internal_updates(int index) const;
  ::market_data::RateUpdate* _internal_add_updates();
  public:
  const ::market_data::RateUpdate& updates(int index) const;
  ::market_data::RateUpdate* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::RateUpdate >&
      updates() const;

  // @@protoc_insertion_point(class_scope:market_data.RateUpdates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::RateUpdate > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.ClientMessage) */ {
 public:
  inline ClientMessage() : ClientMessage(nullptr) {}
  virtual ~ClientMessage();
  explicit constexpr ClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance() {
    return *internal_default_instance();
  }
  enum InnerCase {
    kHeartbeat = 1,
    kConfig = 2,
    INNER_NOT_SET = 0,
  };

  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.ClientMessage";
  }
  protected:
  explicit ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // .market_data.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::market_data::Heartbeat& heartbeat() const;
  ::market_data::Heartbeat* release_heartbeat();
  ::market_data::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::market_data::Heartbeat* heartbeat);
  private:
  const ::market_data::Heartbeat& _internal_heartbeat() const;
  ::market_data::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::market_data::Heartbeat* heartbeat);
  ::market_data::Heartbeat* unsafe_arena_release_heartbeat();

  // .market_data.Config config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::market_data::Config& config() const;
  ::market_data::Config* release_config();
  ::market_data::Config* mutable_config();
  void set_allocated_config(::market_data::Config* config);
  private:
  const ::market_data::Config& _internal_config() const;
  ::market_data::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::market_data::Config* config);
  ::market_data::Config* unsafe_arena_release_config();

  void clear_inner();
  InnerCase inner_case() const;
  // @@protoc_insertion_point(class_scope:market_data.ClientMessage)
 private:
  class _Internal;
  void set_has_heartbeat();
  void set_has_config();

  inline bool has_inner() const;
  inline void clear_has_inner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union InnerUnion {
    constexpr InnerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::market_data::Heartbeat* heartbeat_;
    ::market_data::Config* config_;
  } inner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:market_data.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "market_data.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_market_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKlinesFieldNumber = 5,
    kMbpFieldNumber = 1,
    kMboFieldNumber = 2,
    kTradesFieldNumber = 3,
    kSummaryFieldNumber = 4,
  };
  // repeated .market_data.KlineInterval klines = 5;
  int klines_size() const;
  private:
  int _internal_klines_size() const;
  public:
  void clear_klines();
  private:
  ::market_data::KlineInterval _internal_klines(int index) const;
  void _internal_add_klines(::market_data::KlineInterval value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_klines();
  public:
  ::market_data::KlineInterval klines(int index) const;
  void set_klines(int index, ::market_data::KlineInterval value);
  void add_klines(::market_data::KlineInterval value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& klines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_klines();

  // bool mbp = 1;
  void clear_mbp();
  bool mbp() const;
  void set_mbp(bool value);
  private:
  bool _internal_mbp() const;
  void _internal_set_mbp(bool value);
  public:

  // bool mbo = 2;
  void clear_mbo();
  bool mbo() const;
  void set_mbo(bool value);
  private:
  bool _internal_mbo() const;
  void _internal_set_mbo(bool value);
  public:

  // bool trades = 3;
  void clear_trades();
  bool trades() const;
  void set_trades(bool value);
  private:
  bool _internal_trades() const;
  void _internal_set_trades(bool value);
  public:

  // bool summary = 4;
  void clear_summary();
  bool summary() const;
  void set_summary(bool value);
  private:
  bool _internal_summary() const;
  void _internal_set_summary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:market_data.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> klines_;
  mutable std::atomic<int> _klines_cached_byte_size_;
  bool mbp_;
  bool mbo_;
  bool trades_;
  bool summary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MdMessage

// .market_data.Heartbeat heartbeat = 1;
inline bool MdMessage::_internal_has_heartbeat() const {
  return inner_case() == kHeartbeat;
}
inline bool MdMessage::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void MdMessage::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void MdMessage::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete inner_.heartbeat_;
    }
    clear_has_inner();
  }
}
inline ::market_data::Heartbeat* MdMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:market_data.MdMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
      ::market_data::Heartbeat* temp = inner_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::Heartbeat& MdMessage::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *inner_.heartbeat_
      : reinterpret_cast< ::market_data::Heartbeat&>(::market_data::_Heartbeat_default_instance_);
}
inline const ::market_data::Heartbeat& MdMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:market_data.MdMessage.heartbeat)
  return _internal_heartbeat();
}
inline ::market_data::Heartbeat* MdMessage::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.MdMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
    ::market_data::Heartbeat* temp = inner_.heartbeat_;
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_heartbeat(::market_data::Heartbeat* heartbeat) {
  clear_inner();
  if (heartbeat) {
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.MdMessage.heartbeat)
}
inline ::market_data::Heartbeat* MdMessage::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_inner();
    set_has_heartbeat();
    inner_.heartbeat_ = CreateMaybeMessage< ::market_data::Heartbeat >(GetArena());
  }
  return inner_.heartbeat_;
}
inline ::market_data::Heartbeat* MdMessage::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessage.heartbeat)
  return _internal_mutable_heartbeat();
}

// .market_data.Summary summary = 2;
inline bool MdMessage::_internal_has_summary() const {
  return inner_case() == kSummary;
}
inline bool MdMessage::has_summary() const {
  return _internal_has_summary();
}
inline void MdMessage::set_has_summary() {
  _oneof_case_[0] = kSummary;
}
inline void MdMessage::clear_summary() {
  if (_internal_has_summary()) {
    if (GetArena() == nullptr) {
      delete inner_.summary_;
    }
    clear_has_inner();
  }
}
inline ::market_data::Summary* MdMessage::release_summary() {
  // @@protoc_insertion_point(field_release:market_data.MdMessage.summary)
  if (_internal_has_summary()) {
    clear_has_inner();
      ::market_data::Summary* temp = inner_.summary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::Summary& MdMessage::_internal_summary() const {
  return _internal_has_summary()
      ? *inner_.summary_
      : reinterpret_cast< ::market_data::Summary&>(::market_data::_Summary_default_instance_);
}
inline const ::market_data::Summary& MdMessage::summary() const {
  // @@protoc_insertion_point(field_get:market_data.MdMessage.summary)
  return _internal_summary();
}
inline ::market_data::Summary* MdMessage::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.MdMessage.summary)
  if (_internal_has_summary()) {
    clear_has_inner();
    ::market_data::Summary* temp = inner_.summary_;
    inner_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_summary(::market_data::Summary* summary) {
  clear_inner();
  if (summary) {
    set_has_summary();
    inner_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.MdMessage.summary)
}
inline ::market_data::Summary* MdMessage::_internal_mutable_summary() {
  if (!_internal_has_summary()) {
    clear_inner();
    set_has_summary();
    inner_.summary_ = CreateMaybeMessage< ::market_data::Summary >(GetArena());
  }
  return inner_.summary_;
}
inline ::market_data::Summary* MdMessage::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessage.summary)
  return _internal_mutable_summary();
}

// .market_data.Trades trades = 3;
inline bool MdMessage::_internal_has_trades() const {
  return inner_case() == kTrades;
}
inline bool MdMessage::has_trades() const {
  return _internal_has_trades();
}
inline void MdMessage::set_has_trades() {
  _oneof_case_[0] = kTrades;
}
inline void MdMessage::clear_trades() {
  if (_internal_has_trades()) {
    if (GetArena() == nullptr) {
      delete inner_.trades_;
    }
    clear_has_inner();
  }
}
inline ::market_data::Trades* MdMessage::release_trades() {
  // @@protoc_insertion_point(field_release:market_data.MdMessage.trades)
  if (_internal_has_trades()) {
    clear_has_inner();
      ::market_data::Trades* temp = inner_.trades_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.trades_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::Trades& MdMessage::_internal_trades() const {
  return _internal_has_trades()
      ? *inner_.trades_
      : reinterpret_cast< ::market_data::Trades&>(::market_data::_Trades_default_instance_);
}
inline const ::market_data::Trades& MdMessage::trades() const {
  // @@protoc_insertion_point(field_get:market_data.MdMessage.trades)
  return _internal_trades();
}
inline ::market_data::Trades* MdMessage::unsafe_arena_release_trades() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.MdMessage.trades)
  if (_internal_has_trades()) {
    clear_has_inner();
    ::market_data::Trades* temp = inner_.trades_;
    inner_.trades_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_trades(::market_data::Trades* trades) {
  clear_inner();
  if (trades) {
    set_has_trades();
    inner_.trades_ = trades;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.MdMessage.trades)
}
inline ::market_data::Trades* MdMessage::_internal_mutable_trades() {
  if (!_internal_has_trades()) {
    clear_inner();
    set_has_trades();
    inner_.trades_ = CreateMaybeMessage< ::market_data::Trades >(GetArena());
  }
  return inner_.trades_;
}
inline ::market_data::Trades* MdMessage::mutable_trades() {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessage.trades)
  return _internal_mutable_trades();
}

// .market_data.MarketByOrder mbo_snapshot = 4;
inline bool MdMessage::_internal_has_mbo_snapshot() const {
  return inner_case() == kMboSnapshot;
}
inline bool MdMessage::has_mbo_snapshot() const {
  return _internal_has_mbo_snapshot();
}
inline void MdMessage::set_has_mbo_snapshot() {
  _oneof_case_[0] = kMboSnapshot;
}
inline void MdMessage::clear_mbo_snapshot() {
  if (_internal_has_mbo_snapshot()) {
    if (GetArena() == nullptr) {
      delete inner_.mbo_snapshot_;
    }
    clear_has_inner();
  }
}
inline ::market_data::MarketByOrder* MdMessage::release_mbo_snapshot() {
  // @@protoc_insertion_point(field_release:market_data.MdMessage.mbo_snapshot)
  if (_internal_has_mbo_snapshot()) {
    clear_has_inner();
      ::market_data::MarketByOrder* temp = inner_.mbo_snapshot_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mbo_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::MarketByOrder& MdMessage::_internal_mbo_snapshot() const {
  return _internal_has_mbo_snapshot()
      ? *inner_.mbo_snapshot_
      : reinterpret_cast< ::market_data::MarketByOrder&>(::market_data::_MarketByOrder_default_instance_);
}
inline const ::market_data::MarketByOrder& MdMessage::mbo_snapshot() const {
  // @@protoc_insertion_point(field_get:market_data.MdMessage.mbo_snapshot)
  return _internal_mbo_snapshot();
}
inline ::market_data::MarketByOrder* MdMessage::unsafe_arena_release_mbo_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.MdMessage.mbo_snapshot)
  if (_internal_has_mbo_snapshot()) {
    clear_has_inner();
    ::market_data::MarketByOrder* temp = inner_.mbo_snapshot_;
    inner_.mbo_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_mbo_snapshot(::market_data::MarketByOrder* mbo_snapshot) {
  clear_inner();
  if (mbo_snapshot) {
    set_has_mbo_snapshot();
    inner_.mbo_snapshot_ = mbo_snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.MdMessage.mbo_snapshot)
}
inline ::market_data::MarketByOrder* MdMessage::_internal_mutable_mbo_snapshot() {
  if (!_internal_has_mbo_snapshot()) {
    clear_inner();
    set_has_mbo_snapshot();
    inner_.mbo_snapshot_ = CreateMaybeMessage< ::market_data::MarketByOrder >(GetArena());
  }
  return inner_.mbo_snapshot_;
}
inline ::market_data::MarketByOrder* MdMessage::mutable_mbo_snapshot() {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessage.mbo_snapshot)
  return _internal_mutable_mbo_snapshot();
}

// .market_data.MarketByOrderDiff mbo_diff = 5;
inline bool MdMessage::_internal_has_mbo_diff() const {
  return inner_case() == kMboDiff;
}
inline bool MdMessage::has_mbo_diff() const {
  return _internal_has_mbo_diff();
}
inline void MdMessage::set_has_mbo_diff() {
  _oneof_case_[0] = kMboDiff;
}
inline void MdMessage::clear_mbo_diff() {
  if (_internal_has_mbo_diff()) {
    if (GetArena() == nullptr) {
      delete inner_.mbo_diff_;
    }
    clear_has_inner();
  }
}
inline ::market_data::MarketByOrderDiff* MdMessage::release_mbo_diff() {
  // @@protoc_insertion_point(field_release:market_data.MdMessage.mbo_diff)
  if (_internal_has_mbo_diff()) {
    clear_has_inner();
      ::market_data::MarketByOrderDiff* temp = inner_.mbo_diff_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mbo_diff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::MarketByOrderDiff& MdMessage::_internal_mbo_diff() const {
  return _internal_has_mbo_diff()
      ? *inner_.mbo_diff_
      : reinterpret_cast< ::market_data::MarketByOrderDiff&>(::market_data::_MarketByOrderDiff_default_instance_);
}
inline const ::market_data::MarketByOrderDiff& MdMessage::mbo_diff() const {
  // @@protoc_insertion_point(field_get:market_data.MdMessage.mbo_diff)
  return _internal_mbo_diff();
}
inline ::market_data::MarketByOrderDiff* MdMessage::unsafe_arena_release_mbo_diff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.MdMessage.mbo_diff)
  if (_internal_has_mbo_diff()) {
    clear_has_inner();
    ::market_data::MarketByOrderDiff* temp = inner_.mbo_diff_;
    inner_.mbo_diff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_mbo_diff(::market_data::MarketByOrderDiff* mbo_diff) {
  clear_inner();
  if (mbo_diff) {
    set_has_mbo_diff();
    inner_.mbo_diff_ = mbo_diff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.MdMessage.mbo_diff)
}
inline ::market_data::MarketByOrderDiff* MdMessage::_internal_mutable_mbo_diff() {
  if (!_internal_has_mbo_diff()) {
    clear_inner();
    set_has_mbo_diff();
    inner_.mbo_diff_ = CreateMaybeMessage< ::market_data::MarketByOrderDiff >(GetArena());
  }
  return inner_.mbo_diff_;
}
inline ::market_data::MarketByOrderDiff* MdMessage::mutable_mbo_diff() {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessage.mbo_diff)
  return _internal_mutable_mbo_diff();
}

// .market_data.MarketByPrice mbp_snapshot = 6;
inline bool MdMessage::_internal_has_mbp_snapshot() const {
  return inner_case() == kMbpSnapshot;
}
inline bool MdMessage::has_mbp_snapshot() const {
  return _internal_has_mbp_snapshot();
}
inline void MdMessage::set_has_mbp_snapshot() {
  _oneof_case_[0] = kMbpSnapshot;
}
inline void MdMessage::clear_mbp_snapshot() {
  if (_internal_has_mbp_snapshot()) {
    if (GetArena() == nullptr) {
      delete inner_.mbp_snapshot_;
    }
    clear_has_inner();
  }
}
inline ::market_data::MarketByPrice* MdMessage::release_mbp_snapshot() {
  // @@protoc_insertion_point(field_release:market_data.MdMessage.mbp_snapshot)
  if (_internal_has_mbp_snapshot()) {
    clear_has_inner();
      ::market_data::MarketByPrice* temp = inner_.mbp_snapshot_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mbp_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::MarketByPrice& MdMessage::_internal_mbp_snapshot() const {
  return _internal_has_mbp_snapshot()
      ? *inner_.mbp_snapshot_
      : reinterpret_cast< ::market_data::MarketByPrice&>(::market_data::_MarketByPrice_default_instance_);
}
inline const ::market_data::MarketByPrice& MdMessage::mbp_snapshot() const {
  // @@protoc_insertion_point(field_get:market_data.MdMessage.mbp_snapshot)
  return _internal_mbp_snapshot();
}
inline ::market_data::MarketByPrice* MdMessage::unsafe_arena_release_mbp_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.MdMessage.mbp_snapshot)
  if (_internal_has_mbp_snapshot()) {
    clear_has_inner();
    ::market_data::MarketByPrice* temp = inner_.mbp_snapshot_;
    inner_.mbp_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_mbp_snapshot(::market_data::MarketByPrice* mbp_snapshot) {
  clear_inner();
  if (mbp_snapshot) {
    set_has_mbp_snapshot();
    inner_.mbp_snapshot_ = mbp_snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.MdMessage.mbp_snapshot)
}
inline ::market_data::MarketByPrice* MdMessage::_internal_mutable_mbp_snapshot() {
  if (!_internal_has_mbp_snapshot()) {
    clear_inner();
    set_has_mbp_snapshot();
    inner_.mbp_snapshot_ = CreateMaybeMessage< ::market_data::MarketByPrice >(GetArena());
  }
  return inner_.mbp_snapshot_;
}
inline ::market_data::MarketByPrice* MdMessage::mutable_mbp_snapshot() {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessage.mbp_snapshot)
  return _internal_mutable_mbp_snapshot();
}

// .market_data.MarketByPriceDiff mbp_diff = 7;
inline bool MdMessage::_internal_has_mbp_diff() const {
  return inner_case() == kMbpDiff;
}
inline bool MdMessage::has_mbp_diff() const {
  return _internal_has_mbp_diff();
}
inline void MdMessage::set_has_mbp_diff() {
  _oneof_case_[0] = kMbpDiff;
}
inline void MdMessage::clear_mbp_diff() {
  if (_internal_has_mbp_diff()) {
    if (GetArena() == nullptr) {
      delete inner_.mbp_diff_;
    }
    clear_has_inner();
  }
}
inline ::market_data::MarketByPriceDiff* MdMessage::release_mbp_diff() {
  // @@protoc_insertion_point(field_release:market_data.MdMessage.mbp_diff)
  if (_internal_has_mbp_diff()) {
    clear_has_inner();
      ::market_data::MarketByPriceDiff* temp = inner_.mbp_diff_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.mbp_diff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::MarketByPriceDiff& MdMessage::_internal_mbp_diff() const {
  return _internal_has_mbp_diff()
      ? *inner_.mbp_diff_
      : reinterpret_cast< ::market_data::MarketByPriceDiff&>(::market_data::_MarketByPriceDiff_default_instance_);
}
inline const ::market_data::MarketByPriceDiff& MdMessage::mbp_diff() const {
  // @@protoc_insertion_point(field_get:market_data.MdMessage.mbp_diff)
  return _internal_mbp_diff();
}
inline ::market_data::MarketByPriceDiff* MdMessage::unsafe_arena_release_mbp_diff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.MdMessage.mbp_diff)
  if (_internal_has_mbp_diff()) {
    clear_has_inner();
    ::market_data::MarketByPriceDiff* temp = inner_.mbp_diff_;
    inner_.mbp_diff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_mbp_diff(::market_data::MarketByPriceDiff* mbp_diff) {
  clear_inner();
  if (mbp_diff) {
    set_has_mbp_diff();
    inner_.mbp_diff_ = mbp_diff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.MdMessage.mbp_diff)
}
inline ::market_data::MarketByPriceDiff* MdMessage::_internal_mutable_mbp_diff() {
  if (!_internal_has_mbp_diff()) {
    clear_inner();
    set_has_mbp_diff();
    inner_.mbp_diff_ = CreateMaybeMessage< ::market_data::MarketByPriceDiff >(GetArena());
  }
  return inner_.mbp_diff_;
}
inline ::market_data::MarketByPriceDiff* MdMessage::mutable_mbp_diff() {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessage.mbp_diff)
  return _internal_mutable_mbp_diff();
}

// .market_data.Kline kline = 8;
inline bool MdMessage::_internal_has_kline() const {
  return inner_case() == kKline;
}
inline bool MdMessage::has_kline() const {
  return _internal_has_kline();
}
inline void MdMessage::set_has_kline() {
  _oneof_case_[0] = kKline;
}
inline void MdMessage::clear_kline() {
  if (_internal_has_kline()) {
    if (GetArena() == nullptr) {
      delete inner_.kline_;
    }
    clear_has_inner();
  }
}
inline ::market_data::Kline* MdMessage::release_kline() {
  // @@protoc_insertion_point(field_release:market_data.MdMessage.kline)
  if (_internal_has_kline()) {
    clear_has_inner();
      ::market_data::Kline* temp = inner_.kline_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.kline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::Kline& MdMessage::_internal_kline() const {
  return _internal_has_kline()
      ? *inner_.kline_
      : reinterpret_cast< ::market_data::Kline&>(::market_data::_Kline_default_instance_);
}
inline const ::market_data::Kline& MdMessage::kline() const {
  // @@protoc_insertion_point(field_get:market_data.MdMessage.kline)
  return _internal_kline();
}
inline ::market_data::Kline* MdMessage::unsafe_arena_release_kline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.MdMessage.kline)
  if (_internal_has_kline()) {
    clear_has_inner();
    ::market_data::Kline* temp = inner_.kline_;
    inner_.kline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MdMessage::unsafe_arena_set_allocated_kline(::market_data::Kline* kline) {
  clear_inner();
  if (kline) {
    set_has_kline();
    inner_.kline_ = kline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.MdMessage.kline)
}
inline ::market_data::Kline* MdMessage::_internal_mutable_kline() {
  if (!_internal_has_kline()) {
    clear_inner();
    set_has_kline();
    inner_.kline_ = CreateMaybeMessage< ::market_data::Kline >(GetArena());
  }
  return inner_.kline_;
}
inline ::market_data::Kline* MdMessage::mutable_kline() {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessage.kline)
  return _internal_mutable_kline();
}

inline bool MdMessage::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void MdMessage::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline MdMessage::InnerCase MdMessage::inner_case() const {
  return MdMessage::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MarketByPrice_Level

// uint64 price = 1;
inline void MarketByPrice_Level::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPrice_Level::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPrice_Level::price() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPrice.Level.price)
  return _internal_price();
}
inline void MarketByPrice_Level::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void MarketByPrice_Level::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPrice.Level.price)
}

// uint64 quantity = 2;
inline void MarketByPrice_Level::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPrice_Level::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPrice_Level::quantity() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPrice.Level.quantity)
  return _internal_quantity();
}
inline void MarketByPrice_Level::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void MarketByPrice_Level::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPrice.Level.quantity)
}

// .market_data.Side side = 3;
inline void MarketByPrice_Level::clear_side() {
  side_ = 0;
}
inline ::market_data::Side MarketByPrice_Level::_internal_side() const {
  return static_cast< ::market_data::Side >(side_);
}
inline ::market_data::Side MarketByPrice_Level::side() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPrice.Level.side)
  return _internal_side();
}
inline void MarketByPrice_Level::_internal_set_side(::market_data::Side value) {
  
  side_ = value;
}
inline void MarketByPrice_Level::set_side(::market_data::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPrice.Level.side)
}

// -------------------------------------------------------------------

// MarketByPrice

// repeated .market_data.MarketByPrice.Level levels = 1;
inline int MarketByPrice::_internal_levels_size() const {
  return levels_.size();
}
inline int MarketByPrice::levels_size() const {
  return _internal_levels_size();
}
inline void MarketByPrice::clear_levels() {
  levels_.Clear();
}
inline ::market_data::MarketByPrice_Level* MarketByPrice::mutable_levels(int index) {
  // @@protoc_insertion_point(field_mutable:market_data.MarketByPrice.levels)
  return levels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPrice_Level >*
MarketByPrice::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:market_data.MarketByPrice.levels)
  return &levels_;
}
inline const ::market_data::MarketByPrice_Level& MarketByPrice::_internal_levels(int index) const {
  return levels_.Get(index);
}
inline const ::market_data::MarketByPrice_Level& MarketByPrice::levels(int index) const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPrice.levels)
  return _internal_levels(index);
}
inline ::market_data::MarketByPrice_Level* MarketByPrice::_internal_add_levels() {
  return levels_.Add();
}
inline ::market_data::MarketByPrice_Level* MarketByPrice::add_levels() {
  // @@protoc_insertion_point(field_add:market_data.MarketByPrice.levels)
  return _internal_add_levels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPrice_Level >&
MarketByPrice::levels() const {
  // @@protoc_insertion_point(field_list:market_data.MarketByPrice.levels)
  return levels_;
}

// uint32 chunk = 2;
inline void MarketByPrice::clear_chunk() {
  chunk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPrice::_internal_chunk() const {
  return chunk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPrice::chunk() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPrice.chunk)
  return _internal_chunk();
}
inline void MarketByPrice::_internal_set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_ = value;
}
inline void MarketByPrice::set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPrice.chunk)
}

// uint32 num_chunks = 3;
inline void MarketByPrice::clear_num_chunks() {
  num_chunks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPrice::_internal_num_chunks() const {
  return num_chunks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPrice::num_chunks() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPrice.num_chunks)
  return _internal_num_chunks();
}
inline void MarketByPrice::_internal_set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_chunks_ = value;
}
inline void MarketByPrice::set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_chunks(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPrice.num_chunks)
}

// -------------------------------------------------------------------

// MarketByPriceDiff_Diff

// uint64 price = 1;
inline void MarketByPriceDiff_Diff::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPriceDiff_Diff::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPriceDiff_Diff::price() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPriceDiff.Diff.price)
  return _internal_price();
}
inline void MarketByPriceDiff_Diff::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void MarketByPriceDiff_Diff::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPriceDiff.Diff.price)
}

// uint64 quantity = 2;
inline void MarketByPriceDiff_Diff::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPriceDiff_Diff::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByPriceDiff_Diff::quantity() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPriceDiff.Diff.quantity)
  return _internal_quantity();
}
inline void MarketByPriceDiff_Diff::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void MarketByPriceDiff_Diff::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPriceDiff.Diff.quantity)
}

// .market_data.Side side = 3;
inline void MarketByPriceDiff_Diff::clear_side() {
  side_ = 0;
}
inline ::market_data::Side MarketByPriceDiff_Diff::_internal_side() const {
  return static_cast< ::market_data::Side >(side_);
}
inline ::market_data::Side MarketByPriceDiff_Diff::side() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPriceDiff.Diff.side)
  return _internal_side();
}
inline void MarketByPriceDiff_Diff::_internal_set_side(::market_data::Side value) {
  
  side_ = value;
}
inline void MarketByPriceDiff_Diff::set_side(::market_data::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPriceDiff.Diff.side)
}

// .market_data.MarketByPriceDiff.DiffOp op = 4;
inline void MarketByPriceDiff_Diff::clear_op() {
  op_ = 0;
}
inline ::market_data::MarketByPriceDiff_DiffOp MarketByPriceDiff_Diff::_internal_op() const {
  return static_cast< ::market_data::MarketByPriceDiff_DiffOp >(op_);
}
inline ::market_data::MarketByPriceDiff_DiffOp MarketByPriceDiff_Diff::op() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPriceDiff.Diff.op)
  return _internal_op();
}
inline void MarketByPriceDiff_Diff::_internal_set_op(::market_data::MarketByPriceDiff_DiffOp value) {
  
  op_ = value;
}
inline void MarketByPriceDiff_Diff::set_op(::market_data::MarketByPriceDiff_DiffOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPriceDiff.Diff.op)
}

// -------------------------------------------------------------------

// MarketByPriceDiff

// repeated .market_data.MarketByPriceDiff.Diff diffs = 1;
inline int MarketByPriceDiff::_internal_diffs_size() const {
  return diffs_.size();
}
inline int MarketByPriceDiff::diffs_size() const {
  return _internal_diffs_size();
}
inline void MarketByPriceDiff::clear_diffs() {
  diffs_.Clear();
}
inline ::market_data::MarketByPriceDiff_Diff* MarketByPriceDiff::mutable_diffs(int index) {
  // @@protoc_insertion_point(field_mutable:market_data.MarketByPriceDiff.diffs)
  return diffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPriceDiff_Diff >*
MarketByPriceDiff::mutable_diffs() {
  // @@protoc_insertion_point(field_mutable_list:market_data.MarketByPriceDiff.diffs)
  return &diffs_;
}
inline const ::market_data::MarketByPriceDiff_Diff& MarketByPriceDiff::_internal_diffs(int index) const {
  return diffs_.Get(index);
}
inline const ::market_data::MarketByPriceDiff_Diff& MarketByPriceDiff::diffs(int index) const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPriceDiff.diffs)
  return _internal_diffs(index);
}
inline ::market_data::MarketByPriceDiff_Diff* MarketByPriceDiff::_internal_add_diffs() {
  return diffs_.Add();
}
inline ::market_data::MarketByPriceDiff_Diff* MarketByPriceDiff::add_diffs() {
  // @@protoc_insertion_point(field_add:market_data.MarketByPriceDiff.diffs)
  return _internal_add_diffs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByPriceDiff_Diff >&
MarketByPriceDiff::diffs() const {
  // @@protoc_insertion_point(field_list:market_data.MarketByPriceDiff.diffs)
  return diffs_;
}

// uint32 total_bid_levels = 2;
inline void MarketByPriceDiff::clear_total_bid_levels() {
  total_bid_levels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPriceDiff::_internal_total_bid_levels() const {
  return total_bid_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPriceDiff::total_bid_levels() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPriceDiff.total_bid_levels)
  return _internal_total_bid_levels();
}
inline void MarketByPriceDiff::_internal_set_total_bid_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_bid_levels_ = value;
}
inline void MarketByPriceDiff::set_total_bid_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_bid_levels(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPriceDiff.total_bid_levels)
}

// uint32 total_ask_levels = 3;
inline void MarketByPriceDiff::clear_total_ask_levels() {
  total_ask_levels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPriceDiff::_internal_total_ask_levels() const {
  return total_ask_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByPriceDiff::total_ask_levels() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByPriceDiff.total_ask_levels)
  return _internal_total_ask_levels();
}
inline void MarketByPriceDiff::_internal_set_total_ask_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_ask_levels_ = value;
}
inline void MarketByPriceDiff::set_total_ask_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_ask_levels(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByPriceDiff.total_ask_levels)
}

// -------------------------------------------------------------------

// MarketByOrder_Order

// uint64 price = 1;
inline void MarketByOrder_Order::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::price() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrder.Order.price)
  return _internal_price();
}
inline void MarketByOrder_Order::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void MarketByOrder_Order::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrder.Order.price)
}

// uint64 quantity = 2;
inline void MarketByOrder_Order::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::quantity() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrder.Order.quantity)
  return _internal_quantity();
}
inline void MarketByOrder_Order::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void MarketByOrder_Order::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrder.Order.quantity)
}

// uint64 exchange_order_id = 3;
inline void MarketByOrder_Order::clear_exchange_order_id() {
  exchange_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::_internal_exchange_order_id() const {
  return exchange_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrder.Order.exchange_order_id)
  return _internal_exchange_order_id();
}
inline void MarketByOrder_Order::_internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exchange_order_id_ = value;
}
inline void MarketByOrder_Order::set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchange_order_id(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrder.Order.exchange_order_id)
}

// .market_data.Side side = 4;
inline void MarketByOrder_Order::clear_side() {
  side_ = 0;
}
inline ::market_data::Side MarketByOrder_Order::_internal_side() const {
  return static_cast< ::market_data::Side >(side_);
}
inline ::market_data::Side MarketByOrder_Order::side() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrder.Order.side)
  return _internal_side();
}
inline void MarketByOrder_Order::_internal_set_side(::market_data::Side value) {
  
  side_ = value;
}
inline void MarketByOrder_Order::set_side(::market_data::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrder.Order.side)
}

// uint64 priority = 5;
inline void MarketByOrder_Order::clear_priority() {
  priority_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrder_Order::priority() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrder.Order.priority)
  return _internal_priority();
}
inline void MarketByOrder_Order::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  priority_ = value;
}
inline void MarketByOrder_Order::set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrder.Order.priority)
}

// -------------------------------------------------------------------

// MarketByOrder

// repeated .market_data.MarketByOrder.Order orders = 1;
inline int MarketByOrder::_internal_orders_size() const {
  return orders_.size();
}
inline int MarketByOrder::orders_size() const {
  return _internal_orders_size();
}
inline void MarketByOrder::clear_orders() {
  orders_.Clear();
}
inline ::market_data::MarketByOrder_Order* MarketByOrder::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:market_data.MarketByOrder.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrder_Order >*
MarketByOrder::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:market_data.MarketByOrder.orders)
  return &orders_;
}
inline const ::market_data::MarketByOrder_Order& MarketByOrder::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::market_data::MarketByOrder_Order& MarketByOrder::orders(int index) const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrder.orders)
  return _internal_orders(index);
}
inline ::market_data::MarketByOrder_Order* MarketByOrder::_internal_add_orders() {
  return orders_.Add();
}
inline ::market_data::MarketByOrder_Order* MarketByOrder::add_orders() {
  // @@protoc_insertion_point(field_add:market_data.MarketByOrder.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrder_Order >&
MarketByOrder::orders() const {
  // @@protoc_insertion_point(field_list:market_data.MarketByOrder.orders)
  return orders_;
}

// uint32 chunk = 2;
inline void MarketByOrder::clear_chunk() {
  chunk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrder::_internal_chunk() const {
  return chunk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrder::chunk() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrder.chunk)
  return _internal_chunk();
}
inline void MarketByOrder::_internal_set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_ = value;
}
inline void MarketByOrder::set_chunk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrder.chunk)
}

// uint32 num_chunks = 3;
inline void MarketByOrder::clear_num_chunks() {
  num_chunks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrder::_internal_num_chunks() const {
  return num_chunks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrder::num_chunks() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrder.num_chunks)
  return _internal_num_chunks();
}
inline void MarketByOrder::_internal_set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_chunks_ = value;
}
inline void MarketByOrder::set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_chunks(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrder.num_chunks)
}

// -------------------------------------------------------------------

// MarketByOrderDiff_Diff

// uint64 price = 1;
inline void MarketByOrderDiff_Diff::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::price() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.Diff.price)
  return _internal_price();
}
inline void MarketByOrderDiff_Diff::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void MarketByOrderDiff_Diff::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.Diff.price)
}

// uint64 quantity = 2;
inline void MarketByOrderDiff_Diff::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::quantity() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.Diff.quantity)
  return _internal_quantity();
}
inline void MarketByOrderDiff_Diff::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void MarketByOrderDiff_Diff::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.Diff.quantity)
}

// uint64 exchange_order_id = 3;
inline void MarketByOrderDiff_Diff::clear_exchange_order_id() {
  exchange_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::_internal_exchange_order_id() const {
  return exchange_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.Diff.exchange_order_id)
  return _internal_exchange_order_id();
}
inline void MarketByOrderDiff_Diff::_internal_set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exchange_order_id_ = value;
}
inline void MarketByOrderDiff_Diff::set_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchange_order_id(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.Diff.exchange_order_id)
}

// .market_data.Side side = 4;
inline void MarketByOrderDiff_Diff::clear_side() {
  side_ = 0;
}
inline ::market_data::Side MarketByOrderDiff_Diff::_internal_side() const {
  return static_cast< ::market_data::Side >(side_);
}
inline ::market_data::Side MarketByOrderDiff_Diff::side() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.Diff.side)
  return _internal_side();
}
inline void MarketByOrderDiff_Diff::_internal_set_side(::market_data::Side value) {
  
  side_ = value;
}
inline void MarketByOrderDiff_Diff::set_side(::market_data::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.Diff.side)
}

// .market_data.MarketByOrderDiff.DiffOp op = 5;
inline void MarketByOrderDiff_Diff::clear_op() {
  op_ = 0;
}
inline ::market_data::MarketByOrderDiff_DiffOp MarketByOrderDiff_Diff::_internal_op() const {
  return static_cast< ::market_data::MarketByOrderDiff_DiffOp >(op_);
}
inline ::market_data::MarketByOrderDiff_DiffOp MarketByOrderDiff_Diff::op() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.Diff.op)
  return _internal_op();
}
inline void MarketByOrderDiff_Diff::_internal_set_op(::market_data::MarketByOrderDiff_DiffOp value) {
  
  op_ = value;
}
inline void MarketByOrderDiff_Diff::set_op(::market_data::MarketByOrderDiff_DiffOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.Diff.op)
}

// uint64 priority = 6;
inline void MarketByOrderDiff_Diff::clear_priority() {
  priority_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketByOrderDiff_Diff::priority() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.Diff.priority)
  return _internal_priority();
}
inline void MarketByOrderDiff_Diff::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  priority_ = value;
}
inline void MarketByOrderDiff_Diff::set_priority(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.Diff.priority)
}

// -------------------------------------------------------------------

// MarketByOrderDiff

// repeated .market_data.MarketByOrderDiff.Diff diffs = 1;
inline int MarketByOrderDiff::_internal_diffs_size() const {
  return diffs_.size();
}
inline int MarketByOrderDiff::diffs_size() const {
  return _internal_diffs_size();
}
inline void MarketByOrderDiff::clear_diffs() {
  diffs_.Clear();
}
inline ::market_data::MarketByOrderDiff_Diff* MarketByOrderDiff::mutable_diffs(int index) {
  // @@protoc_insertion_point(field_mutable:market_data.MarketByOrderDiff.diffs)
  return diffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrderDiff_Diff >*
MarketByOrderDiff::mutable_diffs() {
  // @@protoc_insertion_point(field_mutable_list:market_data.MarketByOrderDiff.diffs)
  return &diffs_;
}
inline const ::market_data::MarketByOrderDiff_Diff& MarketByOrderDiff::_internal_diffs(int index) const {
  return diffs_.Get(index);
}
inline const ::market_data::MarketByOrderDiff_Diff& MarketByOrderDiff::diffs(int index) const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.diffs)
  return _internal_diffs(index);
}
inline ::market_data::MarketByOrderDiff_Diff* MarketByOrderDiff::_internal_add_diffs() {
  return diffs_.Add();
}
inline ::market_data::MarketByOrderDiff_Diff* MarketByOrderDiff::add_diffs() {
  // @@protoc_insertion_point(field_add:market_data.MarketByOrderDiff.diffs)
  return _internal_add_diffs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MarketByOrderDiff_Diff >&
MarketByOrderDiff::diffs() const {
  // @@protoc_insertion_point(field_list:market_data.MarketByOrderDiff.diffs)
  return diffs_;
}

// uint32 total_bid_levels = 2;
inline void MarketByOrderDiff::clear_total_bid_levels() {
  total_bid_levels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::_internal_total_bid_levels() const {
  return total_bid_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::total_bid_levels() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.total_bid_levels)
  return _internal_total_bid_levels();
}
inline void MarketByOrderDiff::_internal_set_total_bid_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_bid_levels_ = value;
}
inline void MarketByOrderDiff::set_total_bid_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_bid_levels(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.total_bid_levels)
}

// uint32 total_ask_levels = 3;
inline void MarketByOrderDiff::clear_total_ask_levels() {
  total_ask_levels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::_internal_total_ask_levels() const {
  return total_ask_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::total_ask_levels() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.total_ask_levels)
  return _internal_total_ask_levels();
}
inline void MarketByOrderDiff::_internal_set_total_ask_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_ask_levels_ = value;
}
inline void MarketByOrderDiff::set_total_ask_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_ask_levels(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.total_ask_levels)
}

// uint32 total_bid_orders = 4;
inline void MarketByOrderDiff::clear_total_bid_orders() {
  total_bid_orders_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::_internal_total_bid_orders() const {
  return total_bid_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::total_bid_orders() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.total_bid_orders)
  return _internal_total_bid_orders();
}
inline void MarketByOrderDiff::_internal_set_total_bid_orders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_bid_orders_ = value;
}
inline void MarketByOrderDiff::set_total_bid_orders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_bid_orders(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.total_bid_orders)
}

// uint32 total_ask_orders = 5;
inline void MarketByOrderDiff::clear_total_ask_orders() {
  total_ask_orders_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::_internal_total_ask_orders() const {
  return total_ask_orders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MarketByOrderDiff::total_ask_orders() const {
  // @@protoc_insertion_point(field_get:market_data.MarketByOrderDiff.total_ask_orders)
  return _internal_total_ask_orders();
}
inline void MarketByOrderDiff::_internal_set_total_ask_orders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_ask_orders_ = value;
}
inline void MarketByOrderDiff::set_total_ask_orders(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_ask_orders(value);
  // @@protoc_insertion_point(field_set:market_data.MarketByOrderDiff.total_ask_orders)
}

// -------------------------------------------------------------------

// Trades_Trade

// uint64 tradeId = 1;
inline void Trades_Trade::clear_tradeid() {
  tradeid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_tradeid() const {
  return tradeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::tradeid() const {
  // @@protoc_insertion_point(field_get:market_data.Trades.Trade.tradeId)
  return _internal_tradeid();
}
inline void Trades_Trade::_internal_set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tradeid_ = value;
}
inline void Trades_Trade::set_tradeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tradeid(value);
  // @@protoc_insertion_point(field_set:market_data.Trades.Trade.tradeId)
}

// uint64 price = 2;
inline void Trades_Trade::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::price() const {
  // @@protoc_insertion_point(field_get:market_data.Trades.Trade.price)
  return _internal_price();
}
inline void Trades_Trade::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void Trades_Trade::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:market_data.Trades.Trade.price)
}

// .market_data.Side aggressing_side = 3;
inline void Trades_Trade::clear_aggressing_side() {
  aggressing_side_ = 0;
}
inline ::market_data::Side Trades_Trade::_internal_aggressing_side() const {
  return static_cast< ::market_data::Side >(aggressing_side_);
}
inline ::market_data::Side Trades_Trade::aggressing_side() const {
  // @@protoc_insertion_point(field_get:market_data.Trades.Trade.aggressing_side)
  return _internal_aggressing_side();
}
inline void Trades_Trade::_internal_set_aggressing_side(::market_data::Side value) {
  
  aggressing_side_ = value;
}
inline void Trades_Trade::set_aggressing_side(::market_data::Side value) {
  _internal_set_aggressing_side(value);
  // @@protoc_insertion_point(field_set:market_data.Trades.Trade.aggressing_side)
}

// uint64 resting_exchange_order_id = 4;
inline void Trades_Trade::clear_resting_exchange_order_id() {
  resting_exchange_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_resting_exchange_order_id() const {
  return resting_exchange_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::resting_exchange_order_id() const {
  // @@protoc_insertion_point(field_get:market_data.Trades.Trade.resting_exchange_order_id)
  return _internal_resting_exchange_order_id();
}
inline void Trades_Trade::_internal_set_resting_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  resting_exchange_order_id_ = value;
}
inline void Trades_Trade::set_resting_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_resting_exchange_order_id(value);
  // @@protoc_insertion_point(field_set:market_data.Trades.Trade.resting_exchange_order_id)
}

// uint64 fill_quantity = 5;
inline void Trades_Trade::clear_fill_quantity() {
  fill_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_fill_quantity() const {
  return fill_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::fill_quantity() const {
  // @@protoc_insertion_point(field_get:market_data.Trades.Trade.fill_quantity)
  return _internal_fill_quantity();
}
inline void Trades_Trade::_internal_set_fill_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fill_quantity_ = value;
}
inline void Trades_Trade::set_fill_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fill_quantity(value);
  // @@protoc_insertion_point(field_set:market_data.Trades.Trade.fill_quantity)
}

// uint64 transact_time = 6;
inline void Trades_Trade::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::transact_time() const {
  // @@protoc_insertion_point(field_get:market_data.Trades.Trade.transact_time)
  return _internal_transact_time();
}
inline void Trades_Trade::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void Trades_Trade::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:market_data.Trades.Trade.transact_time)
}

// uint64 aggressing_exchange_order_id = 7;
inline void Trades_Trade::clear_aggressing_exchange_order_id() {
  aggressing_exchange_order_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::_internal_aggressing_exchange_order_id() const {
  return aggressing_exchange_order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trades_Trade::aggressing_exchange_order_id() const {
  // @@protoc_insertion_point(field_get:market_data.Trades.Trade.aggressing_exchange_order_id)
  return _internal_aggressing_exchange_order_id();
}
inline void Trades_Trade::_internal_set_aggressing_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  aggressing_exchange_order_id_ = value;
}
inline void Trades_Trade::set_aggressing_exchange_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_aggressing_exchange_order_id(value);
  // @@protoc_insertion_point(field_set:market_data.Trades.Trade.aggressing_exchange_order_id)
}

// -------------------------------------------------------------------

// Trades

// repeated .market_data.Trades.Trade trades = 1;
inline int Trades::_internal_trades_size() const {
  return trades_.size();
}
inline int Trades::trades_size() const {
  return _internal_trades_size();
}
inline void Trades::clear_trades() {
  trades_.Clear();
}
inline ::market_data::Trades_Trade* Trades::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:market_data.Trades.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::Trades_Trade >*
Trades::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:market_data.Trades.trades)
  return &trades_;
}
inline const ::market_data::Trades_Trade& Trades::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::market_data::Trades_Trade& Trades::trades(int index) const {
  // @@protoc_insertion_point(field_get:market_data.Trades.trades)
  return _internal_trades(index);
}
inline ::market_data::Trades_Trade* Trades::_internal_add_trades() {
  return trades_.Add();
}
inline ::market_data::Trades_Trade* Trades::add_trades() {
  // @@protoc_insertion_point(field_add:market_data.Trades.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::Trades_Trade >&
Trades::trades() const {
  // @@protoc_insertion_point(field_list:market_data.Trades.trades)
  return trades_;
}

// -------------------------------------------------------------------

// Summary

// uint64 open = 1;
inline void Summary::clear_open() {
  open_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::open() const {
  // @@protoc_insertion_point(field_get:market_data.Summary.open)
  return _internal_open();
}
inline void Summary::_internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_ = value;
}
inline void Summary::set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:market_data.Summary.open)
}

// uint64 close = 2;
inline void Summary::clear_close() {
  close_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_close() const {
  return close_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::close() const {
  // @@protoc_insertion_point(field_get:market_data.Summary.close)
  return _internal_close();
}
inline void Summary::_internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  close_ = value;
}
inline void Summary::set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:market_data.Summary.close)
}

// uint64 low = 3;
inline void Summary::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::low() const {
  // @@protoc_insertion_point(field_get:market_data.Summary.low)
  return _internal_low();
}
inline void Summary::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
}
inline void Summary::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:market_data.Summary.low)
}

// uint64 high = 4;
inline void Summary::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::high() const {
  // @@protoc_insertion_point(field_get:market_data.Summary.high)
  return _internal_high();
}
inline void Summary::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
}
inline void Summary::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:market_data.Summary.high)
}

// uint64 base_volume_lo = 5;
inline void Summary::clear_base_volume_lo() {
  base_volume_lo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_base_volume_lo() const {
  return base_volume_lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::base_volume_lo() const {
  // @@protoc_insertion_point(field_get:market_data.Summary.base_volume_lo)
  return _internal_base_volume_lo();
}
inline void Summary::_internal_set_base_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  base_volume_lo_ = value;
}
inline void Summary::set_base_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_base_volume_lo(value);
  // @@protoc_insertion_point(field_set:market_data.Summary.base_volume_lo)
}

// uint64 base_volume_hi = 6;
inline void Summary::clear_base_volume_hi() {
  base_volume_hi_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_base_volume_hi() const {
  return base_volume_hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::base_volume_hi() const {
  // @@protoc_insertion_point(field_get:market_data.Summary.base_volume_hi)
  return _internal_base_volume_hi();
}
inline void Summary::_internal_set_base_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  base_volume_hi_ = value;
}
inline void Summary::set_base_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_base_volume_hi(value);
  // @@protoc_insertion_point(field_set:market_data.Summary.base_volume_hi)
}

// uint64 quote_volume_lo = 7;
inline void Summary::clear_quote_volume_lo() {
  quote_volume_lo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_quote_volume_lo() const {
  return quote_volume_lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::quote_volume_lo() const {
  // @@protoc_insertion_point(field_get:market_data.Summary.quote_volume_lo)
  return _internal_quote_volume_lo();
}
inline void Summary::_internal_set_quote_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quote_volume_lo_ = value;
}
inline void Summary::set_quote_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quote_volume_lo(value);
  // @@protoc_insertion_point(field_set:market_data.Summary.quote_volume_lo)
}

// uint64 quote_volume_hi = 8;
inline void Summary::clear_quote_volume_hi() {
  quote_volume_hi_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::_internal_quote_volume_hi() const {
  return quote_volume_hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Summary::quote_volume_hi() const {
  // @@protoc_insertion_point(field_get:market_data.Summary.quote_volume_hi)
  return _internal_quote_volume_hi();
}
inline void Summary::_internal_set_quote_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quote_volume_hi_ = value;
}
inline void Summary::set_quote_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quote_volume_hi(value);
  // @@protoc_insertion_point(field_set:market_data.Summary.quote_volume_hi)
}

// -------------------------------------------------------------------

// Kline

// .market_data.KlineInterval interval = 1;
inline void Kline::clear_interval() {
  interval_ = 0;
}
inline ::market_data::KlineInterval Kline::_internal_interval() const {
  return static_cast< ::market_data::KlineInterval >(interval_);
}
inline ::market_data::KlineInterval Kline::interval() const {
  // @@protoc_insertion_point(field_get:market_data.Kline.interval)
  return _internal_interval();
}
inline void Kline::_internal_set_interval(::market_data::KlineInterval value) {
  
  interval_ = value;
}
inline void Kline::set_interval(::market_data::KlineInterval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:market_data.Kline.interval)
}

// uint64 start_time = 2;
inline void Kline::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::start_time() const {
  // @@protoc_insertion_point(field_get:market_data.Kline.start_time)
  return _internal_start_time();
}
inline void Kline::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_ = value;
}
inline void Kline::set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:market_data.Kline.start_time)
}

// uint64 open = 3;
inline void Kline::clear_open() {
  open_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::open() const {
  // @@protoc_insertion_point(field_get:market_data.Kline.open)
  return _internal_open();
}
inline void Kline::_internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_ = value;
}
inline void Kline::set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:market_data.Kline.open)
}

// uint64 close = 4;
inline void Kline::clear_close() {
  close_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_close() const {
  return close_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::close() const {
  // @@protoc_insertion_point(field_get:market_data.Kline.close)
  return _internal_close();
}
inline void Kline::_internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  close_ = value;
}
inline void Kline::set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:market_data.Kline.close)
}

// uint64 high = 5;
inline void Kline::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::high() const {
  // @@protoc_insertion_point(field_get:market_data.Kline.high)
  return _internal_high();
}
inline void Kline::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
}
inline void Kline::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:market_data.Kline.high)
}

// uint64 low = 6;
inline void Kline::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::low() const {
  // @@protoc_insertion_point(field_get:market_data.Kline.low)
  return _internal_low();
}
inline void Kline::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
}
inline void Kline::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:market_data.Kline.low)
}

// uint64 volume_lo = 7;
inline void Kline::clear_volume_lo() {
  volume_lo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_volume_lo() const {
  return volume_lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::volume_lo() const {
  // @@protoc_insertion_point(field_get:market_data.Kline.volume_lo)
  return _internal_volume_lo();
}
inline void Kline::_internal_set_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volume_lo_ = value;
}
inline void Kline::set_volume_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume_lo(value);
  // @@protoc_insertion_point(field_set:market_data.Kline.volume_lo)
}

// uint64 volume_hi = 8;
inline void Kline::clear_volume_hi() {
  volume_hi_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_volume_hi() const {
  return volume_hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::volume_hi() const {
  // @@protoc_insertion_point(field_get:market_data.Kline.volume_hi)
  return _internal_volume_hi();
}
inline void Kline::_internal_set_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volume_hi_ = value;
}
inline void Kline::set_volume_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume_hi(value);
  // @@protoc_insertion_point(field_set:market_data.Kline.volume_hi)
}

// -------------------------------------------------------------------

// Heartbeat

// uint64 request_id = 1;
inline void Heartbeat::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::request_id() const {
  // @@protoc_insertion_point(field_get:market_data.Heartbeat.request_id)
  return _internal_request_id();
}
inline void Heartbeat::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void Heartbeat::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:market_data.Heartbeat.request_id)
}

// uint64 timestamp = 2;
inline void Heartbeat::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:market_data.Heartbeat.timestamp)
  return _internal_timestamp();
}
inline void Heartbeat::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Heartbeat::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:market_data.Heartbeat.timestamp)
}

// -------------------------------------------------------------------

// MdMessages

// repeated .market_data.MdMessage messages = 1;
inline int MdMessages::_internal_messages_size() const {
  return messages_.size();
}
inline int MdMessages::messages_size() const {
  return _internal_messages_size();
}
inline void MdMessages::clear_messages() {
  messages_.Clear();
}
inline ::market_data::MdMessage* MdMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:market_data.MdMessages.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MdMessage >*
MdMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:market_data.MdMessages.messages)
  return &messages_;
}
inline const ::market_data::MdMessage& MdMessages::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::market_data::MdMessage& MdMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:market_data.MdMessages.messages)
  return _internal_messages(index);
}
inline ::market_data::MdMessage* MdMessages::_internal_add_messages() {
  return messages_.Add();
}
inline ::market_data::MdMessage* MdMessages::add_messages() {
  // @@protoc_insertion_point(field_add:market_data.MdMessages.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::MdMessage >&
MdMessages::messages() const {
  // @@protoc_insertion_point(field_list:market_data.MdMessages.messages)
  return messages_;
}

// -------------------------------------------------------------------

// AggMessage

// .market_data.Heartbeat heartbeat = 1;
inline bool AggMessage::_internal_has_heartbeat() const {
  return inner_case() == kHeartbeat;
}
inline bool AggMessage::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void AggMessage::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void AggMessage::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete inner_.heartbeat_;
    }
    clear_has_inner();
  }
}
inline ::market_data::Heartbeat* AggMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:market_data.AggMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
      ::market_data::Heartbeat* temp = inner_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::Heartbeat& AggMessage::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *inner_.heartbeat_
      : reinterpret_cast< ::market_data::Heartbeat&>(::market_data::_Heartbeat_default_instance_);
}
inline const ::market_data::Heartbeat& AggMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:market_data.AggMessage.heartbeat)
  return _internal_heartbeat();
}
inline ::market_data::Heartbeat* AggMessage::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.AggMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
    ::market_data::Heartbeat* temp = inner_.heartbeat_;
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AggMessage::unsafe_arena_set_allocated_heartbeat(::market_data::Heartbeat* heartbeat) {
  clear_inner();
  if (heartbeat) {
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.AggMessage.heartbeat)
}
inline ::market_data::Heartbeat* AggMessage::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_inner();
    set_has_heartbeat();
    inner_.heartbeat_ = CreateMaybeMessage< ::market_data::Heartbeat >(GetArena());
  }
  return inner_.heartbeat_;
}
inline ::market_data::Heartbeat* AggMessage::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:market_data.AggMessage.heartbeat)
  return _internal_mutable_heartbeat();
}

// .market_data.TopOfBooks top_of_books = 2;
inline bool AggMessage::_internal_has_top_of_books() const {
  return inner_case() == kTopOfBooks;
}
inline bool AggMessage::has_top_of_books() const {
  return _internal_has_top_of_books();
}
inline void AggMessage::set_has_top_of_books() {
  _oneof_case_[0] = kTopOfBooks;
}
inline void AggMessage::clear_top_of_books() {
  if (_internal_has_top_of_books()) {
    if (GetArena() == nullptr) {
      delete inner_.top_of_books_;
    }
    clear_has_inner();
  }
}
inline ::market_data::TopOfBooks* AggMessage::release_top_of_books() {
  // @@protoc_insertion_point(field_release:market_data.AggMessage.top_of_books)
  if (_internal_has_top_of_books()) {
    clear_has_inner();
      ::market_data::TopOfBooks* temp = inner_.top_of_books_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.top_of_books_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::TopOfBooks& AggMessage::_internal_top_of_books() const {
  return _internal_has_top_of_books()
      ? *inner_.top_of_books_
      : reinterpret_cast< ::market_data::TopOfBooks&>(::market_data::_TopOfBooks_default_instance_);
}
inline const ::market_data::TopOfBooks& AggMessage::top_of_books() const {
  // @@protoc_insertion_point(field_get:market_data.AggMessage.top_of_books)
  return _internal_top_of_books();
}
inline ::market_data::TopOfBooks* AggMessage::unsafe_arena_release_top_of_books() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.AggMessage.top_of_books)
  if (_internal_has_top_of_books()) {
    clear_has_inner();
    ::market_data::TopOfBooks* temp = inner_.top_of_books_;
    inner_.top_of_books_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AggMessage::unsafe_arena_set_allocated_top_of_books(::market_data::TopOfBooks* top_of_books) {
  clear_inner();
  if (top_of_books) {
    set_has_top_of_books();
    inner_.top_of_books_ = top_of_books;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.AggMessage.top_of_books)
}
inline ::market_data::TopOfBooks* AggMessage::_internal_mutable_top_of_books() {
  if (!_internal_has_top_of_books()) {
    clear_inner();
    set_has_top_of_books();
    inner_.top_of_books_ = CreateMaybeMessage< ::market_data::TopOfBooks >(GetArena());
  }
  return inner_.top_of_books_;
}
inline ::market_data::TopOfBooks* AggMessage::mutable_top_of_books() {
  // @@protoc_insertion_point(field_mutable:market_data.AggMessage.top_of_books)
  return _internal_mutable_top_of_books();
}

// .market_data.RateUpdates rate_updates = 3;
inline bool AggMessage::_internal_has_rate_updates() const {
  return inner_case() == kRateUpdates;
}
inline bool AggMessage::has_rate_updates() const {
  return _internal_has_rate_updates();
}
inline void AggMessage::set_has_rate_updates() {
  _oneof_case_[0] = kRateUpdates;
}
inline void AggMessage::clear_rate_updates() {
  if (_internal_has_rate_updates()) {
    if (GetArena() == nullptr) {
      delete inner_.rate_updates_;
    }
    clear_has_inner();
  }
}
inline ::market_data::RateUpdates* AggMessage::release_rate_updates() {
  // @@protoc_insertion_point(field_release:market_data.AggMessage.rate_updates)
  if (_internal_has_rate_updates()) {
    clear_has_inner();
      ::market_data::RateUpdates* temp = inner_.rate_updates_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.rate_updates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::RateUpdates& AggMessage::_internal_rate_updates() const {
  return _internal_has_rate_updates()
      ? *inner_.rate_updates_
      : reinterpret_cast< ::market_data::RateUpdates&>(::market_data::_RateUpdates_default_instance_);
}
inline const ::market_data::RateUpdates& AggMessage::rate_updates() const {
  // @@protoc_insertion_point(field_get:market_data.AggMessage.rate_updates)
  return _internal_rate_updates();
}
inline ::market_data::RateUpdates* AggMessage::unsafe_arena_release_rate_updates() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.AggMessage.rate_updates)
  if (_internal_has_rate_updates()) {
    clear_has_inner();
    ::market_data::RateUpdates* temp = inner_.rate_updates_;
    inner_.rate_updates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AggMessage::unsafe_arena_set_allocated_rate_updates(::market_data::RateUpdates* rate_updates) {
  clear_inner();
  if (rate_updates) {
    set_has_rate_updates();
    inner_.rate_updates_ = rate_updates;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.AggMessage.rate_updates)
}
inline ::market_data::RateUpdates* AggMessage::_internal_mutable_rate_updates() {
  if (!_internal_has_rate_updates()) {
    clear_inner();
    set_has_rate_updates();
    inner_.rate_updates_ = CreateMaybeMessage< ::market_data::RateUpdates >(GetArena());
  }
  return inner_.rate_updates_;
}
inline ::market_data::RateUpdates* AggMessage::mutable_rate_updates() {
  // @@protoc_insertion_point(field_mutable:market_data.AggMessage.rate_updates)
  return _internal_mutable_rate_updates();
}

inline bool AggMessage::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void AggMessage::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline AggMessage::InnerCase AggMessage::inner_case() const {
  return AggMessage::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TopOfBook

// uint64 market_id = 1;
inline void TopOfBook::clear_market_id() {
  market_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_market_id() const {
  return market_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::market_id() const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBook.market_id)
  return _internal_market_id();
}
inline void TopOfBook::_internal_set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  market_id_ = value;
}
inline void TopOfBook::set_market_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:market_data.TopOfBook.market_id)
}

// uint64 transact_time = 2;
inline void TopOfBook::clear_transact_time() {
  transact_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_transact_time() const {
  return transact_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::transact_time() const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBook.transact_time)
  return _internal_transact_time();
}
inline void TopOfBook::_internal_set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transact_time_ = value;
}
inline void TopOfBook::set_transact_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transact_time(value);
  // @@protoc_insertion_point(field_set:market_data.TopOfBook.transact_time)
}

// uint64 bid_price = 3;
inline void TopOfBook::clear_bid_price() {
  bid_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_bid_price() const {
  return bid_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::bid_price() const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBook.bid_price)
  return _internal_bid_price();
}
inline void TopOfBook::_internal_set_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bid_price_ = value;
}
inline void TopOfBook::set_bid_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:market_data.TopOfBook.bid_price)
}

// uint64 bid_quantity = 4;
inline void TopOfBook::clear_bid_quantity() {
  bid_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_bid_quantity() const {
  return bid_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::bid_quantity() const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBook.bid_quantity)
  return _internal_bid_quantity();
}
inline void TopOfBook::_internal_set_bid_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bid_quantity_ = value;
}
inline void TopOfBook::set_bid_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bid_quantity(value);
  // @@protoc_insertion_point(field_set:market_data.TopOfBook.bid_quantity)
}

// uint64 ask_price = 5;
inline void TopOfBook::clear_ask_price() {
  ask_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_ask_price() const {
  return ask_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::ask_price() const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBook.ask_price)
  return _internal_ask_price();
}
inline void TopOfBook::_internal_set_ask_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ask_price_ = value;
}
inline void TopOfBook::set_ask_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:market_data.TopOfBook.ask_price)
}

// uint64 ask_quantity = 6;
inline void TopOfBook::clear_ask_quantity() {
  ask_quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_ask_quantity() const {
  return ask_quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::ask_quantity() const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBook.ask_quantity)
  return _internal_ask_quantity();
}
inline void TopOfBook::_internal_set_ask_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ask_quantity_ = value;
}
inline void TopOfBook::set_ask_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ask_quantity(value);
  // @@protoc_insertion_point(field_set:market_data.TopOfBook.ask_quantity)
}

// uint64 last_price = 7;
inline void TopOfBook::clear_last_price() {
  last_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_last_price() const {
  return last_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::last_price() const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBook.last_price)
  return _internal_last_price();
}
inline void TopOfBook::_internal_set_last_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_price_ = value;
}
inline void TopOfBook::set_last_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_price(value);
  // @@protoc_insertion_point(field_set:market_data.TopOfBook.last_price)
}

// uint64 rolling24h_price = 8;
inline void TopOfBook::clear_rolling24h_price() {
  rolling24h_price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::_internal_rolling24h_price() const {
  return rolling24h_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TopOfBook::rolling24h_price() const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBook.rolling24h_price)
  return _internal_rolling24h_price();
}
inline void TopOfBook::_internal_set_rolling24h_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rolling24h_price_ = value;
}
inline void TopOfBook::set_rolling24h_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rolling24h_price(value);
  // @@protoc_insertion_point(field_set:market_data.TopOfBook.rolling24h_price)
}

// -------------------------------------------------------------------

// TopOfBooks

// repeated .market_data.TopOfBook tops = 1;
inline int TopOfBooks::_internal_tops_size() const {
  return tops_.size();
}
inline int TopOfBooks::tops_size() const {
  return _internal_tops_size();
}
inline void TopOfBooks::clear_tops() {
  tops_.Clear();
}
inline ::market_data::TopOfBook* TopOfBooks::mutable_tops(int index) {
  // @@protoc_insertion_point(field_mutable:market_data.TopOfBooks.tops)
  return tops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::TopOfBook >*
TopOfBooks::mutable_tops() {
  // @@protoc_insertion_point(field_mutable_list:market_data.TopOfBooks.tops)
  return &tops_;
}
inline const ::market_data::TopOfBook& TopOfBooks::_internal_tops(int index) const {
  return tops_.Get(index);
}
inline const ::market_data::TopOfBook& TopOfBooks::tops(int index) const {
  // @@protoc_insertion_point(field_get:market_data.TopOfBooks.tops)
  return _internal_tops(index);
}
inline ::market_data::TopOfBook* TopOfBooks::_internal_add_tops() {
  return tops_.Add();
}
inline ::market_data::TopOfBook* TopOfBooks::add_tops() {
  // @@protoc_insertion_point(field_add:market_data.TopOfBooks.tops)
  return _internal_add_tops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::TopOfBook >&
TopOfBooks::tops() const {
  // @@protoc_insertion_point(field_list:market_data.TopOfBooks.tops)
  return tops_;
}

// -------------------------------------------------------------------

// RateUpdate

// uint64 asset_id = 1;
inline void RateUpdate::clear_asset_id() {
  asset_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RateUpdate::_internal_asset_id() const {
  return asset_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RateUpdate::asset_id() const {
  // @@protoc_insertion_point(field_get:market_data.RateUpdate.asset_id)
  return _internal_asset_id();
}
inline void RateUpdate::_internal_set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  asset_id_ = value;
}
inline void RateUpdate::set_asset_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:market_data.RateUpdate.asset_id)
}

// uint64 timestamp = 2;
inline void RateUpdate::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RateUpdate::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RateUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:market_data.RateUpdate.timestamp)
  return _internal_timestamp();
}
inline void RateUpdate::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void RateUpdate::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:market_data.RateUpdate.timestamp)
}

// uint64 rate = 3;
inline void RateUpdate::clear_rate() {
  rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RateUpdate::_internal_rate() const {
  return rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RateUpdate::rate() const {
  // @@protoc_insertion_point(field_get:market_data.RateUpdate.rate)
  return _internal_rate();
}
inline void RateUpdate::_internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rate_ = value;
}
inline void RateUpdate::set_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:market_data.RateUpdate.rate)
}

// .market_data.RateUpdateSide side = 4;
inline void RateUpdate::clear_side() {
  side_ = 0;
}
inline ::market_data::RateUpdateSide RateUpdate::_internal_side() const {
  return static_cast< ::market_data::RateUpdateSide >(side_);
}
inline ::market_data::RateUpdateSide RateUpdate::side() const {
  // @@protoc_insertion_point(field_get:market_data.RateUpdate.side)
  return _internal_side();
}
inline void RateUpdate::_internal_set_side(::market_data::RateUpdateSide value) {
  
  side_ = value;
}
inline void RateUpdate::set_side(::market_data::RateUpdateSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:market_data.RateUpdate.side)
}

// -------------------------------------------------------------------

// RateUpdates

// repeated .market_data.RateUpdate updates = 1;
inline int RateUpdates::_internal_updates_size() const {
  return updates_.size();
}
inline int RateUpdates::updates_size() const {
  return _internal_updates_size();
}
inline void RateUpdates::clear_updates() {
  updates_.Clear();
}
inline ::market_data::RateUpdate* RateUpdates::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:market_data.RateUpdates.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::RateUpdate >*
RateUpdates::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:market_data.RateUpdates.updates)
  return &updates_;
}
inline const ::market_data::RateUpdate& RateUpdates::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::market_data::RateUpdate& RateUpdates::updates(int index) const {
  // @@protoc_insertion_point(field_get:market_data.RateUpdates.updates)
  return _internal_updates(index);
}
inline ::market_data::RateUpdate* RateUpdates::_internal_add_updates() {
  return updates_.Add();
}
inline ::market_data::RateUpdate* RateUpdates::add_updates() {
  // @@protoc_insertion_point(field_add:market_data.RateUpdates.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::market_data::RateUpdate >&
RateUpdates::updates() const {
  // @@protoc_insertion_point(field_list:market_data.RateUpdates.updates)
  return updates_;
}

// -------------------------------------------------------------------

// ClientMessage

// .market_data.Heartbeat heartbeat = 1;
inline bool ClientMessage::_internal_has_heartbeat() const {
  return inner_case() == kHeartbeat;
}
inline bool ClientMessage::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void ClientMessage::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void ClientMessage::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete inner_.heartbeat_;
    }
    clear_has_inner();
  }
}
inline ::market_data::Heartbeat* ClientMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:market_data.ClientMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
      ::market_data::Heartbeat* temp = inner_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::Heartbeat& ClientMessage::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *inner_.heartbeat_
      : reinterpret_cast< ::market_data::Heartbeat&>(::market_data::_Heartbeat_default_instance_);
}
inline const ::market_data::Heartbeat& ClientMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:market_data.ClientMessage.heartbeat)
  return _internal_heartbeat();
}
inline ::market_data::Heartbeat* ClientMessage::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.ClientMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_inner();
    ::market_data::Heartbeat* temp = inner_.heartbeat_;
    inner_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_heartbeat(::market_data::Heartbeat* heartbeat) {
  clear_inner();
  if (heartbeat) {
    set_has_heartbeat();
    inner_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.ClientMessage.heartbeat)
}
inline ::market_data::Heartbeat* ClientMessage::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_inner();
    set_has_heartbeat();
    inner_.heartbeat_ = CreateMaybeMessage< ::market_data::Heartbeat >(GetArena());
  }
  return inner_.heartbeat_;
}
inline ::market_data::Heartbeat* ClientMessage::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:market_data.ClientMessage.heartbeat)
  return _internal_mutable_heartbeat();
}

// .market_data.Config config = 2;
inline bool ClientMessage::_internal_has_config() const {
  return inner_case() == kConfig;
}
inline bool ClientMessage::has_config() const {
  return _internal_has_config();
}
inline void ClientMessage::set_has_config() {
  _oneof_case_[0] = kConfig;
}
inline void ClientMessage::clear_config() {
  if (_internal_has_config()) {
    if (GetArena() == nullptr) {
      delete inner_.config_;
    }
    clear_has_inner();
  }
}
inline ::market_data::Config* ClientMessage::release_config() {
  // @@protoc_insertion_point(field_release:market_data.ClientMessage.config)
  if (_internal_has_config()) {
    clear_has_inner();
      ::market_data::Config* temp = inner_.config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    inner_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::market_data::Config& ClientMessage::_internal_config() const {
  return _internal_has_config()
      ? *inner_.config_
      : reinterpret_cast< ::market_data::Config&>(::market_data::_Config_default_instance_);
}
inline const ::market_data::Config& ClientMessage::config() const {
  // @@protoc_insertion_point(field_get:market_data.ClientMessage.config)
  return _internal_config();
}
inline ::market_data::Config* ClientMessage::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:market_data.ClientMessage.config)
  if (_internal_has_config()) {
    clear_has_inner();
    ::market_data::Config* temp = inner_.config_;
    inner_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_config(::market_data::Config* config) {
  clear_inner();
  if (config) {
    set_has_config();
    inner_.config_ = config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:market_data.ClientMessage.config)
}
inline ::market_data::Config* ClientMessage::_internal_mutable_config() {
  if (!_internal_has_config()) {
    clear_inner();
    set_has_config();
    inner_.config_ = CreateMaybeMessage< ::market_data::Config >(GetArena());
  }
  return inner_.config_;
}
inline ::market_data::Config* ClientMessage::mutable_config() {
  // @@protoc_insertion_point(field_mutable:market_data.ClientMessage.config)
  return _internal_mutable_config();
}

inline bool ClientMessage::has_inner() const {
  return inner_case() != INNER_NOT_SET;
}
inline void ClientMessage::clear_has_inner() {
  _oneof_case_[0] = INNER_NOT_SET;
}
inline ClientMessage::InnerCase ClientMessage::inner_case() const {
  return ClientMessage::InnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Config

// bool mbp = 1;
inline void Config::clear_mbp() {
  mbp_ = false;
}
inline bool Config::_internal_mbp() const {
  return mbp_;
}
inline bool Config::mbp() const {
  // @@protoc_insertion_point(field_get:market_data.Config.mbp)
  return _internal_mbp();
}
inline void Config::_internal_set_mbp(bool value) {
  
  mbp_ = value;
}
inline void Config::set_mbp(bool value) {
  _internal_set_mbp(value);
  // @@protoc_insertion_point(field_set:market_data.Config.mbp)
}

// bool mbo = 2;
inline void Config::clear_mbo() {
  mbo_ = false;
}
inline bool Config::_internal_mbo() const {
  return mbo_;
}
inline bool Config::mbo() const {
  // @@protoc_insertion_point(field_get:market_data.Config.mbo)
  return _internal_mbo();
}
inline void Config::_internal_set_mbo(bool value) {
  
  mbo_ = value;
}
inline void Config::set_mbo(bool value) {
  _internal_set_mbo(value);
  // @@protoc_insertion_point(field_set:market_data.Config.mbo)
}

// bool trades = 3;
inline void Config::clear_trades() {
  trades_ = false;
}
inline bool Config::_internal_trades() const {
  return trades_;
}
inline bool Config::trades() const {
  // @@protoc_insertion_point(field_get:market_data.Config.trades)
  return _internal_trades();
}
inline void Config::_internal_set_trades(bool value) {
  
  trades_ = value;
}
inline void Config::set_trades(bool value) {
  _internal_set_trades(value);
  // @@protoc_insertion_point(field_set:market_data.Config.trades)
}

// bool summary = 4;
inline void Config::clear_summary() {
  summary_ = false;
}
inline bool Config::_internal_summary() const {
  return summary_;
}
inline bool Config::summary() const {
  // @@protoc_insertion_point(field_get:market_data.Config.summary)
  return _internal_summary();
}
inline void Config::_internal_set_summary(bool value) {
  
  summary_ = value;
}
inline void Config::set_summary(bool value) {
  _internal_set_summary(value);
  // @@protoc_insertion_point(field_set:market_data.Config.summary)
}

// repeated .market_data.KlineInterval klines = 5;
inline int Config::_internal_klines_size() const {
  return klines_.size();
}
inline int Config::klines_size() const {
  return _internal_klines_size();
}
inline void Config::clear_klines() {
  klines_.Clear();
}
inline ::market_data::KlineInterval Config::_internal_klines(int index) const {
  return static_cast< ::market_data::KlineInterval >(klines_.Get(index));
}
inline ::market_data::KlineInterval Config::klines(int index) const {
  // @@protoc_insertion_point(field_get:market_data.Config.klines)
  return _internal_klines(index);
}
inline void Config::set_klines(int index, ::market_data::KlineInterval value) {
  klines_.Set(index, value);
  // @@protoc_insertion_point(field_set:market_data.Config.klines)
}
inline void Config::_internal_add_klines(::market_data::KlineInterval value) {
  klines_.Add(value);
}
inline void Config::add_klines(::market_data::KlineInterval value) {
  // @@protoc_insertion_point(field_add:market_data.Config.klines)
  _internal_add_klines(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Config::klines() const {
  // @@protoc_insertion_point(field_list:market_data.Config.klines)
  return klines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Config::_internal_mutable_klines() {
  return &klines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Config::mutable_klines() {
  // @@protoc_insertion_point(field_mutable_list:market_data.Config.klines)
  return _internal_mutable_klines();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace market_data

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::market_data::MarketByPriceDiff_DiffOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::market_data::MarketByPriceDiff_DiffOp>() {
  return ::market_data::MarketByPriceDiff_DiffOp_descriptor();
}
template <> struct is_proto_enum< ::market_data::MarketByOrderDiff_DiffOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::market_data::MarketByOrderDiff_DiffOp>() {
  return ::market_data::MarketByOrderDiff_DiffOp_descriptor();
}
template <> struct is_proto_enum< ::market_data::Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::market_data::Side>() {
  return ::market_data::Side_descriptor();
}
template <> struct is_proto_enum< ::market_data::KlineInterval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::market_data::KlineInterval>() {
  return ::market_data::KlineInterval_descriptor();
}
template <> struct is_proto_enum< ::market_data::RateUpdateSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::market_data::RateUpdateSide>() {
  return ::market_data::RateUpdateSide_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
