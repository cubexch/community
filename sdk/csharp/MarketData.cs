// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: market_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cube.MarketData {

  /// <summary>Holder for reflection information generated from market_data.proto</summary>
  public static partial class MarketDataReflection {

    #region Descriptor
    /// <summary>File descriptor for market_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarketDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFtYXJrZXRfZGF0YS5wcm90bxILbWFya2V0X2RhdGEihgMKCU1kTWVzc2Fn",
            "ZRIrCgloZWFydGJlYXQYASABKAsyFi5tYXJrZXRfZGF0YS5IZWFydGJlYXRI",
            "ABInCgdzdW1tYXJ5GAIgASgLMhQubWFya2V0X2RhdGEuU3VtbWFyeUgAEiUK",
            "BnRyYWRlcxgDIAEoCzITLm1hcmtldF9kYXRhLlRyYWRlc0gAEjIKDG1ib19z",
            "bmFwc2hvdBgEIAEoCzIaLm1hcmtldF9kYXRhLk1hcmtldEJ5T3JkZXJIABIy",
            "CghtYm9fZGlmZhgFIAEoCzIeLm1hcmtldF9kYXRhLk1hcmtldEJ5T3JkZXJE",
            "aWZmSAASMgoMbWJwX3NuYXBzaG90GAYgASgLMhoubWFya2V0X2RhdGEuTWFy",
            "a2V0QnlQcmljZUgAEjIKCG1icF9kaWZmGAcgASgLMh4ubWFya2V0X2RhdGEu",
            "TWFya2V0QnlQcmljZURpZmZIABIjCgVrbGluZRgIIAEoCzISLm1hcmtldF9k",
            "YXRhLktsaW5lSABCBwoFaW5uZXIirwEKDU1hcmtldEJ5UHJpY2USMAoGbGV2",
            "ZWxzGAEgAygLMiAubWFya2V0X2RhdGEuTWFya2V0QnlQcmljZS5MZXZlbBIN",
            "CgVjaHVuaxgCIAEoDRISCgpudW1fY2h1bmtzGAMgASgNGkkKBUxldmVsEg0K",
            "BXByaWNlGAEgASgEEhAKCHF1YW50aXR5GAIgASgEEh8KBHNpZGUYAyABKA4y",
            "ES5tYXJrZXRfZGF0YS5TaWRlIqQCChFNYXJrZXRCeVByaWNlRGlmZhIyCgVk",
            "aWZmcxgBIAMoCzIjLm1hcmtldF9kYXRhLk1hcmtldEJ5UHJpY2VEaWZmLkRp",
            "ZmYSGAoQdG90YWxfYmlkX2xldmVscxgCIAEoDRIYChB0b3RhbF9hc2tfbGV2",
            "ZWxzGAMgASgNGnsKBERpZmYSDQoFcHJpY2UYASABKAQSEAoIcXVhbnRpdHkY",
            "AiABKAQSHwoEc2lkZRgDIAEoDjIRLm1hcmtldF9kYXRhLlNpZGUSMQoCb3AY",
            "BCABKA4yJS5tYXJrZXRfZGF0YS5NYXJrZXRCeVByaWNlRGlmZi5EaWZmT3Ai",
            "KgoGRGlmZk9wEgcKA0FERBAAEgoKBlJFTU9WRRABEgsKB1JFUExBQ0UQAiLc",
            "AQoNTWFya2V0QnlPcmRlchIwCgZvcmRlcnMYASADKAsyIC5tYXJrZXRfZGF0",
            "YS5NYXJrZXRCeU9yZGVyLk9yZGVyEg0KBWNodW5rGAIgASgNEhIKCm51bV9j",
            "aHVua3MYAyABKA0adgoFT3JkZXISDQoFcHJpY2UYASABKAQSEAoIcXVhbnRp",
            "dHkYAiABKAQSGQoRZXhjaGFuZ2Vfb3JkZXJfaWQYAyABKAQSHwoEc2lkZRgE",
            "IAEoDjIRLm1hcmtldF9kYXRhLlNpZGUSEAoIcHJpb3JpdHkYBSABKAQihgMK",
            "EU1hcmtldEJ5T3JkZXJEaWZmEjIKBWRpZmZzGAEgAygLMiMubWFya2V0X2Rh",
            "dGEuTWFya2V0QnlPcmRlckRpZmYuRGlmZhIYChB0b3RhbF9iaWRfbGV2ZWxz",
            "GAIgASgNEhgKEHRvdGFsX2Fza19sZXZlbHMYAyABKA0SGAoQdG90YWxfYmlk",
            "X29yZGVycxgEIAEoDRIYChB0b3RhbF9hc2tfb3JkZXJzGAUgASgNGqgBCgRE",
            "aWZmEg0KBXByaWNlGAEgASgEEhAKCHF1YW50aXR5GAIgASgEEhkKEWV4Y2hh",
            "bmdlX29yZGVyX2lkGAMgASgEEh8KBHNpZGUYBCABKA4yES5tYXJrZXRfZGF0",
            "YS5TaWRlEjEKAm9wGAUgASgOMiUubWFya2V0X2RhdGEuTWFya2V0QnlPcmRl",
            "ckRpZmYuRGlmZk9wEhAKCHByaW9yaXR5GAYgASgEIioKBkRpZmZPcBIHCgNB",
            "REQQABIKCgZSRU1PVkUQARILCgdSRVBMQUNFEAIigAIKBlRyYWRlcxIpCgZ0",
            "cmFkZXMYASADKAsyGS5tYXJrZXRfZGF0YS5UcmFkZXMuVHJhZGUaygEKBVRy",
            "YWRlEg8KB3RyYWRlSWQYASABKAQSDQoFcHJpY2UYAiABKAQSKgoPYWdncmVz",
            "c2luZ19zaWRlGAMgASgOMhEubWFya2V0X2RhdGEuU2lkZRIhChlyZXN0aW5n",
            "X2V4Y2hhbmdlX29yZGVyX2lkGAQgASgEEhUKDWZpbGxfcXVhbnRpdHkYBSAB",
            "KAQSFQoNdHJhbnNhY3RfdGltZRgGIAEoBBIkChxhZ2dyZXNzaW5nX2V4Y2hh",
            "bmdlX29yZGVyX2lkGAcgASgEIqMBCgdTdW1tYXJ5EgwKBG9wZW4YASABKAQS",
            "DQoFY2xvc2UYAiABKAQSCwoDbG93GAMgASgEEgwKBGhpZ2gYBCABKAQSFgoO",
            "YmFzZV92b2x1bWVfbG8YBSABKAQSFgoOYmFzZV92b2x1bWVfaGkYBiABKAQS",
            "FwoPcXVvdGVfdm9sdW1lX2xvGAcgASgEEhcKD3F1b3RlX3ZvbHVtZV9oaRgI",
            "IAEoBCKnAQoFS2xpbmUSLAoIaW50ZXJ2YWwYASABKA4yGi5tYXJrZXRfZGF0",
            "YS5LbGluZUludGVydmFsEhIKCnN0YXJ0X3RpbWUYAiABKAQSDAoEb3BlbhgD",
            "IAEoBBINCgVjbG9zZRgEIAEoBBIMCgRoaWdoGAUgASgEEgsKA2xvdxgGIAEo",
            "BBIRCgl2b2x1bWVfbG8YByABKAQSEQoJdm9sdW1lX2hpGAggASgEIjIKCUhl",
            "YXJ0YmVhdBISCgpyZXF1ZXN0X2lkGAEgASgEEhEKCXRpbWVzdGFtcBgCIAEo",
            "BCI2CgpNZE1lc3NhZ2VzEigKCG1lc3NhZ2VzGAEgAygLMhYubWFya2V0X2Rh",
            "dGEuTWRNZXNzYWdlIqUBCgpBZ2dNZXNzYWdlEisKCWhlYXJ0YmVhdBgBIAEo",
            "CzIWLm1hcmtldF9kYXRhLkhlYXJ0YmVhdEgAEi8KDHRvcF9vZl9ib29rcxgC",
            "IAEoCzIXLm1hcmtldF9kYXRhLlRvcE9mQm9va3NIABIwCgxyYXRlX3VwZGF0",
            "ZXMYAyABKAsyGC5tYXJrZXRfZGF0YS5SYXRlVXBkYXRlc0gAQgcKBWlubmVy",
            "IrUBCglUb3BPZkJvb2sSEQoJbWFya2V0X2lkGAEgASgEEhUKDXRyYW5zYWN0",
            "X3RpbWUYAiABKAQSEQoJYmlkX3ByaWNlGAMgASgEEhQKDGJpZF9xdWFudGl0",
            "eRgEIAEoBBIRCglhc2tfcHJpY2UYBSABKAQSFAoMYXNrX3F1YW50aXR5GAYg",
            "ASgEEhIKCmxhc3RfcHJpY2UYByABKAQSGAoQcm9sbGluZzI0aF9wcmljZRgI",
            "IAEoBCIyCgpUb3BPZkJvb2tzEiQKBHRvcHMYASADKAsyFi5tYXJrZXRfZGF0",
            "YS5Ub3BPZkJvb2siagoKUmF0ZVVwZGF0ZRIQCghhc3NldF9pZBgBIAEoBBIR",
            "Cgl0aW1lc3RhbXAYAiABKAQSDAoEcmF0ZRgDIAEoBBIpCgRzaWRlGAQgASgO",
            "MhsubWFya2V0X2RhdGEuUmF0ZVVwZGF0ZVNpZGUiNwoLUmF0ZVVwZGF0ZXMS",
            "KAoHdXBkYXRlcxgBIAMoCzIXLm1hcmtldF9kYXRhLlJhdGVVcGRhdGUibAoN",
            "Q2xpZW50TWVzc2FnZRIrCgloZWFydGJlYXQYASABKAsyFi5tYXJrZXRfZGF0",
            "YS5IZWFydGJlYXRIABIlCgZjb25maWcYAiABKAsyEy5tYXJrZXRfZGF0YS5D",
            "b25maWdIAEIHCgVpbm5lciJvCgZDb25maWcSCwoDbWJwGAEgASgIEgsKA21i",
            "bxgCIAEoCBIOCgZ0cmFkZXMYAyABKAgSDwoHc3VtbWFyeRgEIAEoCBIqCgZr",
            "bGluZXMYBSADKA4yGi5tYXJrZXRfZGF0YS5LbGluZUludGVydmFsKhgKBFNp",
            "ZGUSBwoDQklEEAASBwoDQVNLEAEqQAoNS2xpbmVJbnRlcnZhbBIGCgJTMRAA",
            "EgYKAk0xEAESBwoDTTE1EAISBgoCSDEQAxIGCgJINBAEEgYKAkQxEAUqJQoO",
            "UmF0ZVVwZGF0ZVNpZGUSCAoEQkFTRRAAEgkKBVFVT1RFEAFCF1oDZ28vqgIP",
            "Q3ViZS5NYXJrZXREYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cube.MarketData.Side), typeof(global::Cube.MarketData.KlineInterval), typeof(global::Cube.MarketData.RateUpdateSide), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MdMessage), global::Cube.MarketData.MdMessage.Parser, new[]{ "Heartbeat", "Summary", "Trades", "MboSnapshot", "MboDiff", "MbpSnapshot", "MbpDiff", "Kline" }, new[]{ "Inner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MarketByPrice), global::Cube.MarketData.MarketByPrice.Parser, new[]{ "Levels", "Chunk", "NumChunks" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MarketByPrice.Types.Level), global::Cube.MarketData.MarketByPrice.Types.Level.Parser, new[]{ "Price", "Quantity", "Side" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MarketByPriceDiff), global::Cube.MarketData.MarketByPriceDiff.Parser, new[]{ "Diffs", "TotalBidLevels", "TotalAskLevels" }, null, new[]{ typeof(global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MarketByPriceDiff.Types.Diff), global::Cube.MarketData.MarketByPriceDiff.Types.Diff.Parser, new[]{ "Price", "Quantity", "Side", "Op" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MarketByOrder), global::Cube.MarketData.MarketByOrder.Parser, new[]{ "Orders", "Chunk", "NumChunks" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MarketByOrder.Types.Order), global::Cube.MarketData.MarketByOrder.Types.Order.Parser, new[]{ "Price", "Quantity", "ExchangeOrderId", "Side", "Priority" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MarketByOrderDiff), global::Cube.MarketData.MarketByOrderDiff.Parser, new[]{ "Diffs", "TotalBidLevels", "TotalAskLevels", "TotalBidOrders", "TotalAskOrders" }, null, new[]{ typeof(global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MarketByOrderDiff.Types.Diff), global::Cube.MarketData.MarketByOrderDiff.Types.Diff.Parser, new[]{ "Price", "Quantity", "ExchangeOrderId", "Side", "Op", "Priority" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.Trades), global::Cube.MarketData.Trades.Parser, new[]{ "Trades_" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.Trades.Types.Trade), global::Cube.MarketData.Trades.Types.Trade.Parser, new[]{ "TradeId", "Price", "AggressingSide", "RestingExchangeOrderId", "FillQuantity", "TransactTime", "AggressingExchangeOrderId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.Summary), global::Cube.MarketData.Summary.Parser, new[]{ "Open", "Close", "Low", "High", "BaseVolumeLo", "BaseVolumeHi", "QuoteVolumeLo", "QuoteVolumeHi" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.Kline), global::Cube.MarketData.Kline.Parser, new[]{ "Interval", "StartTime", "Open", "Close", "High", "Low", "VolumeLo", "VolumeHi" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.Heartbeat), global::Cube.MarketData.Heartbeat.Parser, new[]{ "RequestId", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.MdMessages), global::Cube.MarketData.MdMessages.Parser, new[]{ "Messages" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.AggMessage), global::Cube.MarketData.AggMessage.Parser, new[]{ "Heartbeat", "TopOfBooks", "RateUpdates" }, new[]{ "Inner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.TopOfBook), global::Cube.MarketData.TopOfBook.Parser, new[]{ "MarketId", "TransactTime", "BidPrice", "BidQuantity", "AskPrice", "AskQuantity", "LastPrice", "Rolling24HPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.TopOfBooks), global::Cube.MarketData.TopOfBooks.Parser, new[]{ "Tops" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.RateUpdate), global::Cube.MarketData.RateUpdate.Parser, new[]{ "AssetId", "Timestamp", "Rate", "Side" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.RateUpdates), global::Cube.MarketData.RateUpdates.Parser, new[]{ "Updates" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.ClientMessage), global::Cube.MarketData.ClientMessage.Parser, new[]{ "Heartbeat", "Config" }, new[]{ "Inner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.MarketData.Config), global::Cube.MarketData.Config.Parser, new[]{ "Mbp", "Mbo", "Trades", "Summary", "Klines" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Side specifies whether the level, order, or diff, is for buying or selling
  /// the base asset.
  /// </summary>
  public enum Side {
    /// <summary>
    /// Bids buy the base asset with the quote asset.
    /// </summary>
    [pbr::OriginalName("BID")] Bid = 0,
    /// <summary>
    /// Asks (or offers) sell the base asset and get the quote asset.
    /// </summary>
    [pbr::OriginalName("ASK")] Ask = 1,
  }

  /// <summary>
  /// The candlestick interval.
  /// </summary>
  public enum KlineInterval {
    /// <summary>
    /// 1 second
    /// </summary>
    [pbr::OriginalName("S1")] S1 = 0,
    /// <summary>
    /// 1 minute
    /// </summary>
    [pbr::OriginalName("M1")] M1 = 1,
    /// <summary>
    /// 15 minutes
    /// </summary>
    [pbr::OriginalName("M15")] M15 = 2,
    /// <summary>
    /// 1 hour
    /// </summary>
    [pbr::OriginalName("H1")] H1 = 3,
    /// <summary>
    /// 4 hours
    /// </summary>
    [pbr::OriginalName("H4")] H4 = 4,
    /// <summary>
    /// 1 day
    /// </summary>
    [pbr::OriginalName("D1")] D1 = 5,
  }

  /// <summary>
  /// The side of the rate update. Given a `BASE` rate of `r`, the `QUOTE` rate is
  /// `1 / r`, and vice versa.
  /// </summary>
  public enum RateUpdateSide {
    /// <summary>
    /// The asset serves as the base asset for the given rate.
    /// </summary>
    [pbr::OriginalName("BASE")] Base = 0,
    /// <summary>
    /// The asset serves as the quote asset for the given rate.
    /// </summary>
    [pbr::OriginalName("QUOTE")] Quote = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Every exchange message from `/book/:market_id` will be wrapped as an
  /// [`MdMessages`](#md-messages) which contains multiple `MdMessage`'s.
  /// </summary>
  public sealed partial class MdMessage : pb::IMessage<MdMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MdMessage> _parser = new pb::MessageParser<MdMessage>(() => new MdMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MdMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdMessage(MdMessage other) : this() {
      switch (other.InnerCase) {
        case InnerOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case InnerOneofCase.Summary:
          Summary = other.Summary.Clone();
          break;
        case InnerOneofCase.Trades:
          Trades = other.Trades.Clone();
          break;
        case InnerOneofCase.MboSnapshot:
          MboSnapshot = other.MboSnapshot.Clone();
          break;
        case InnerOneofCase.MboDiff:
          MboDiff = other.MboDiff.Clone();
          break;
        case InnerOneofCase.MbpSnapshot:
          MbpSnapshot = other.MbpSnapshot.Clone();
          break;
        case InnerOneofCase.MbpDiff:
          MbpDiff = other.MbpDiff.Clone();
          break;
        case InnerOneofCase.Kline:
          Kline = other.Kline.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdMessage Clone() {
      return new MdMessage(this);
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 1;
    /// <summary>
    /// Server heartbeat reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.Heartbeat Heartbeat {
      get { return innerCase_ == InnerOneofCase.Heartbeat ? (global::Cube.MarketData.Heartbeat) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 2;
    /// <summary>
    /// 24h summary
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.Summary Summary {
      get { return innerCase_ == InnerOneofCase.Summary ? (global::Cube.MarketData.Summary) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Summary;
      }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 3;
    /// <summary>
    /// Recent trades
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.Trades Trades {
      get { return innerCase_ == InnerOneofCase.Trades ? (global::Cube.MarketData.Trades) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Trades;
      }
    }

    /// <summary>Field number for the "mbo_snapshot" field.</summary>
    public const int MboSnapshotFieldNumber = 4;
    /// <summary>
    /// Market by order snapshot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.MarketByOrder MboSnapshot {
      get { return innerCase_ == InnerOneofCase.MboSnapshot ? (global::Cube.MarketData.MarketByOrder) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.MboSnapshot;
      }
    }

    /// <summary>Field number for the "mbo_diff" field.</summary>
    public const int MboDiffFieldNumber = 5;
    /// <summary>
    /// Market by order diff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.MarketByOrderDiff MboDiff {
      get { return innerCase_ == InnerOneofCase.MboDiff ? (global::Cube.MarketData.MarketByOrderDiff) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.MboDiff;
      }
    }

    /// <summary>Field number for the "mbp_snapshot" field.</summary>
    public const int MbpSnapshotFieldNumber = 6;
    /// <summary>
    /// Market by price snapshot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.MarketByPrice MbpSnapshot {
      get { return innerCase_ == InnerOneofCase.MbpSnapshot ? (global::Cube.MarketData.MarketByPrice) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.MbpSnapshot;
      }
    }

    /// <summary>Field number for the "mbp_diff" field.</summary>
    public const int MbpDiffFieldNumber = 7;
    /// <summary>
    /// Market by price diff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.MarketByPriceDiff MbpDiff {
      get { return innerCase_ == InnerOneofCase.MbpDiff ? (global::Cube.MarketData.MarketByPriceDiff) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.MbpDiff;
      }
    }

    /// <summary>Field number for the "kline" field.</summary>
    public const int KlineFieldNumber = 8;
    /// <summary>
    /// Candlestick
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.Kline Kline {
      get { return innerCase_ == InnerOneofCase.Kline ? (global::Cube.MarketData.Kline) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Kline;
      }
    }

    private object inner_;
    /// <summary>Enum of possible cases for the "inner" oneof.</summary>
    public enum InnerOneofCase {
      None = 0,
      Heartbeat = 1,
      Summary = 2,
      Trades = 3,
      MboSnapshot = 4,
      MboDiff = 5,
      MbpSnapshot = 6,
      MbpDiff = 7,
      Kline = 8,
    }
    private InnerOneofCase innerCase_ = InnerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerOneofCase InnerCase {
      get { return innerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInner() {
      innerCase_ = InnerOneofCase.None;
      inner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MdMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MdMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(Summary, other.Summary)) return false;
      if (!object.Equals(Trades, other.Trades)) return false;
      if (!object.Equals(MboSnapshot, other.MboSnapshot)) return false;
      if (!object.Equals(MboDiff, other.MboDiff)) return false;
      if (!object.Equals(MbpSnapshot, other.MbpSnapshot)) return false;
      if (!object.Equals(MbpDiff, other.MbpDiff)) return false;
      if (!object.Equals(Kline, other.Kline)) return false;
      if (InnerCase != other.InnerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (innerCase_ == InnerOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (innerCase_ == InnerOneofCase.Summary) hash ^= Summary.GetHashCode();
      if (innerCase_ == InnerOneofCase.Trades) hash ^= Trades.GetHashCode();
      if (innerCase_ == InnerOneofCase.MboSnapshot) hash ^= MboSnapshot.GetHashCode();
      if (innerCase_ == InnerOneofCase.MboDiff) hash ^= MboDiff.GetHashCode();
      if (innerCase_ == InnerOneofCase.MbpSnapshot) hash ^= MbpSnapshot.GetHashCode();
      if (innerCase_ == InnerOneofCase.MbpDiff) hash ^= MbpDiff.GetHashCode();
      if (innerCase_ == InnerOneofCase.Kline) hash ^= Kline.GetHashCode();
      hash ^= (int) innerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(10);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Summary) {
        output.WriteRawTag(18);
        output.WriteMessage(Summary);
      }
      if (innerCase_ == InnerOneofCase.Trades) {
        output.WriteRawTag(26);
        output.WriteMessage(Trades);
      }
      if (innerCase_ == InnerOneofCase.MboSnapshot) {
        output.WriteRawTag(34);
        output.WriteMessage(MboSnapshot);
      }
      if (innerCase_ == InnerOneofCase.MboDiff) {
        output.WriteRawTag(42);
        output.WriteMessage(MboDiff);
      }
      if (innerCase_ == InnerOneofCase.MbpSnapshot) {
        output.WriteRawTag(50);
        output.WriteMessage(MbpSnapshot);
      }
      if (innerCase_ == InnerOneofCase.MbpDiff) {
        output.WriteRawTag(58);
        output.WriteMessage(MbpDiff);
      }
      if (innerCase_ == InnerOneofCase.Kline) {
        output.WriteRawTag(66);
        output.WriteMessage(Kline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(10);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Summary) {
        output.WriteRawTag(18);
        output.WriteMessage(Summary);
      }
      if (innerCase_ == InnerOneofCase.Trades) {
        output.WriteRawTag(26);
        output.WriteMessage(Trades);
      }
      if (innerCase_ == InnerOneofCase.MboSnapshot) {
        output.WriteRawTag(34);
        output.WriteMessage(MboSnapshot);
      }
      if (innerCase_ == InnerOneofCase.MboDiff) {
        output.WriteRawTag(42);
        output.WriteMessage(MboDiff);
      }
      if (innerCase_ == InnerOneofCase.MbpSnapshot) {
        output.WriteRawTag(50);
        output.WriteMessage(MbpSnapshot);
      }
      if (innerCase_ == InnerOneofCase.MbpDiff) {
        output.WriteRawTag(58);
        output.WriteMessage(MbpDiff);
      }
      if (innerCase_ == InnerOneofCase.Kline) {
        output.WriteRawTag(66);
        output.WriteMessage(Kline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Summary) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Summary);
      }
      if (innerCase_ == InnerOneofCase.Trades) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trades);
      }
      if (innerCase_ == InnerOneofCase.MboSnapshot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MboSnapshot);
      }
      if (innerCase_ == InnerOneofCase.MboDiff) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MboDiff);
      }
      if (innerCase_ == InnerOneofCase.MbpSnapshot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MbpSnapshot);
      }
      if (innerCase_ == InnerOneofCase.MbpDiff) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MbpDiff);
      }
      if (innerCase_ == InnerOneofCase.Kline) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MdMessage other) {
      if (other == null) {
        return;
      }
      switch (other.InnerCase) {
        case InnerOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Cube.MarketData.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
        case InnerOneofCase.Summary:
          if (Summary == null) {
            Summary = new global::Cube.MarketData.Summary();
          }
          Summary.MergeFrom(other.Summary);
          break;
        case InnerOneofCase.Trades:
          if (Trades == null) {
            Trades = new global::Cube.MarketData.Trades();
          }
          Trades.MergeFrom(other.Trades);
          break;
        case InnerOneofCase.MboSnapshot:
          if (MboSnapshot == null) {
            MboSnapshot = new global::Cube.MarketData.MarketByOrder();
          }
          MboSnapshot.MergeFrom(other.MboSnapshot);
          break;
        case InnerOneofCase.MboDiff:
          if (MboDiff == null) {
            MboDiff = new global::Cube.MarketData.MarketByOrderDiff();
          }
          MboDiff.MergeFrom(other.MboDiff);
          break;
        case InnerOneofCase.MbpSnapshot:
          if (MbpSnapshot == null) {
            MbpSnapshot = new global::Cube.MarketData.MarketByPrice();
          }
          MbpSnapshot.MergeFrom(other.MbpSnapshot);
          break;
        case InnerOneofCase.MbpDiff:
          if (MbpDiff == null) {
            MbpDiff = new global::Cube.MarketData.MarketByPriceDiff();
          }
          MbpDiff.MergeFrom(other.MbpDiff);
          break;
        case InnerOneofCase.Kline:
          if (Kline == null) {
            Kline = new global::Cube.MarketData.Kline();
          }
          Kline.MergeFrom(other.Kline);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Cube.MarketData.Heartbeat subBuilder = new global::Cube.MarketData.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 18: {
            global::Cube.MarketData.Summary subBuilder = new global::Cube.MarketData.Summary();
            if (innerCase_ == InnerOneofCase.Summary) {
              subBuilder.MergeFrom(Summary);
            }
            input.ReadMessage(subBuilder);
            Summary = subBuilder;
            break;
          }
          case 26: {
            global::Cube.MarketData.Trades subBuilder = new global::Cube.MarketData.Trades();
            if (innerCase_ == InnerOneofCase.Trades) {
              subBuilder.MergeFrom(Trades);
            }
            input.ReadMessage(subBuilder);
            Trades = subBuilder;
            break;
          }
          case 34: {
            global::Cube.MarketData.MarketByOrder subBuilder = new global::Cube.MarketData.MarketByOrder();
            if (innerCase_ == InnerOneofCase.MboSnapshot) {
              subBuilder.MergeFrom(MboSnapshot);
            }
            input.ReadMessage(subBuilder);
            MboSnapshot = subBuilder;
            break;
          }
          case 42: {
            global::Cube.MarketData.MarketByOrderDiff subBuilder = new global::Cube.MarketData.MarketByOrderDiff();
            if (innerCase_ == InnerOneofCase.MboDiff) {
              subBuilder.MergeFrom(MboDiff);
            }
            input.ReadMessage(subBuilder);
            MboDiff = subBuilder;
            break;
          }
          case 50: {
            global::Cube.MarketData.MarketByPrice subBuilder = new global::Cube.MarketData.MarketByPrice();
            if (innerCase_ == InnerOneofCase.MbpSnapshot) {
              subBuilder.MergeFrom(MbpSnapshot);
            }
            input.ReadMessage(subBuilder);
            MbpSnapshot = subBuilder;
            break;
          }
          case 58: {
            global::Cube.MarketData.MarketByPriceDiff subBuilder = new global::Cube.MarketData.MarketByPriceDiff();
            if (innerCase_ == InnerOneofCase.MbpDiff) {
              subBuilder.MergeFrom(MbpDiff);
            }
            input.ReadMessage(subBuilder);
            MbpDiff = subBuilder;
            break;
          }
          case 66: {
            global::Cube.MarketData.Kline subBuilder = new global::Cube.MarketData.Kline();
            if (innerCase_ == InnerOneofCase.Kline) {
              subBuilder.MergeFrom(Kline);
            }
            input.ReadMessage(subBuilder);
            Kline = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Cube.MarketData.Heartbeat subBuilder = new global::Cube.MarketData.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 18: {
            global::Cube.MarketData.Summary subBuilder = new global::Cube.MarketData.Summary();
            if (innerCase_ == InnerOneofCase.Summary) {
              subBuilder.MergeFrom(Summary);
            }
            input.ReadMessage(subBuilder);
            Summary = subBuilder;
            break;
          }
          case 26: {
            global::Cube.MarketData.Trades subBuilder = new global::Cube.MarketData.Trades();
            if (innerCase_ == InnerOneofCase.Trades) {
              subBuilder.MergeFrom(Trades);
            }
            input.ReadMessage(subBuilder);
            Trades = subBuilder;
            break;
          }
          case 34: {
            global::Cube.MarketData.MarketByOrder subBuilder = new global::Cube.MarketData.MarketByOrder();
            if (innerCase_ == InnerOneofCase.MboSnapshot) {
              subBuilder.MergeFrom(MboSnapshot);
            }
            input.ReadMessage(subBuilder);
            MboSnapshot = subBuilder;
            break;
          }
          case 42: {
            global::Cube.MarketData.MarketByOrderDiff subBuilder = new global::Cube.MarketData.MarketByOrderDiff();
            if (innerCase_ == InnerOneofCase.MboDiff) {
              subBuilder.MergeFrom(MboDiff);
            }
            input.ReadMessage(subBuilder);
            MboDiff = subBuilder;
            break;
          }
          case 50: {
            global::Cube.MarketData.MarketByPrice subBuilder = new global::Cube.MarketData.MarketByPrice();
            if (innerCase_ == InnerOneofCase.MbpSnapshot) {
              subBuilder.MergeFrom(MbpSnapshot);
            }
            input.ReadMessage(subBuilder);
            MbpSnapshot = subBuilder;
            break;
          }
          case 58: {
            global::Cube.MarketData.MarketByPriceDiff subBuilder = new global::Cube.MarketData.MarketByPriceDiff();
            if (innerCase_ == InnerOneofCase.MbpDiff) {
              subBuilder.MergeFrom(MbpDiff);
            }
            input.ReadMessage(subBuilder);
            MbpDiff = subBuilder;
            break;
          }
          case 66: {
            global::Cube.MarketData.Kline subBuilder = new global::Cube.MarketData.Kline();
            if (innerCase_ == InnerOneofCase.Kline) {
              subBuilder.MergeFrom(Kline);
            }
            input.ReadMessage(subBuilder);
            Kline = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Market by price snapshot message. This is chunked into `num_chunks` and starts
  /// with `chunk = 0`. A snapshot is sent on first connect. `Level`'s should be
  /// concatened until `chunk = num_chunks - 1`. Currently, the chunks and levels
  /// are streamed from tightest price level outwards with interleaved Bid and Ask
  /// levels, but no ordering is guaranteed.
  /// </summary>
  public sealed partial class MarketByPrice : pb::IMessage<MarketByPrice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketByPrice> _parser = new pb::MessageParser<MarketByPrice>(() => new MarketByPrice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketByPrice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByPrice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByPrice(MarketByPrice other) : this() {
      levels_ = other.levels_.Clone();
      chunk_ = other.chunk_;
      numChunks_ = other.numChunks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByPrice Clone() {
      return new MarketByPrice(this);
    }

    /// <summary>Field number for the "levels" field.</summary>
    public const int LevelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.MarketData.MarketByPrice.Types.Level> _repeated_levels_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.MarketData.MarketByPrice.Types.Level.Parser);
    private readonly pbc::RepeatedField<global::Cube.MarketData.MarketByPrice.Types.Level> levels_ = new pbc::RepeatedField<global::Cube.MarketData.MarketByPrice.Types.Level>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.MarketByPrice.Types.Level> Levels {
      get { return levels_; }
    }

    /// <summary>Field number for the "chunk" field.</summary>
    public const int ChunkFieldNumber = 2;
    private uint chunk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Chunk {
      get { return chunk_; }
      set {
        chunk_ = value;
      }
    }

    /// <summary>Field number for the "num_chunks" field.</summary>
    public const int NumChunksFieldNumber = 3;
    private uint numChunks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumChunks {
      get { return numChunks_; }
      set {
        numChunks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketByPrice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketByPrice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!levels_.Equals(other.levels_)) return false;
      if (Chunk != other.Chunk) return false;
      if (NumChunks != other.NumChunks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= levels_.GetHashCode();
      if (Chunk != 0) hash ^= Chunk.GetHashCode();
      if (NumChunks != 0) hash ^= NumChunks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      levels_.WriteTo(output, _repeated_levels_codec);
      if (Chunk != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Chunk);
      }
      if (NumChunks != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumChunks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      levels_.WriteTo(ref output, _repeated_levels_codec);
      if (Chunk != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Chunk);
      }
      if (NumChunks != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumChunks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += levels_.CalculateSize(_repeated_levels_codec);
      if (Chunk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Chunk);
      }
      if (NumChunks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumChunks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketByPrice other) {
      if (other == null) {
        return;
      }
      levels_.Add(other.levels_);
      if (other.Chunk != 0) {
        Chunk = other.Chunk;
      }
      if (other.NumChunks != 0) {
        NumChunks = other.NumChunks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            levels_.AddEntriesFrom(input, _repeated_levels_codec);
            break;
          }
          case 16: {
            Chunk = input.ReadUInt32();
            break;
          }
          case 24: {
            NumChunks = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            levels_.AddEntriesFrom(ref input, _repeated_levels_codec);
            break;
          }
          case 16: {
            Chunk = input.ReadUInt32();
            break;
          }
          case 24: {
            NumChunks = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MarketByPrice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Each price level is the aggregate total quantity of orders placed at that
      /// price.
      /// </summary>
      public sealed partial class Level : pb::IMessage<Level>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Level> _parser = new pb::MessageParser<Level>(() => new Level());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Level> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cube.MarketData.MarketByPrice.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Level() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Level(Level other) : this() {
          price_ = other.price_;
          quantity_ = other.quantity_;
          side_ = other.side_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Level Clone() {
          return new Level(this);
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 1;
        private ulong price_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "quantity" field.</summary>
        public const int QuantityFieldNumber = 2;
        private ulong quantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Quantity {
          get { return quantity_; }
          set {
            quantity_ = value;
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 3;
        private global::Cube.MarketData.Side side_ = global::Cube.MarketData.Side.Bid;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Cube.MarketData.Side Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Level);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Level other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Price != other.Price) return false;
          if (Quantity != other.Quantity) return false;
          if (Side != other.Side) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Price != 0UL) hash ^= Price.GetHashCode();
          if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
          if (Side != global::Cube.MarketData.Side.Bid) hash ^= Side.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Price != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Price);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Side);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Price != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Price);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Side);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Price != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
          }
          if (Quantity != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Level other) {
          if (other == null) {
            return;
          }
          if (other.Price != 0UL) {
            Price = other.Price;
          }
          if (other.Quantity != 0UL) {
            Quantity = other.Quantity;
          }
          if (other.Side != global::Cube.MarketData.Side.Bid) {
            Side = other.Side;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Price = input.ReadUInt64();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 24: {
                Side = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Price = input.ReadUInt64();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 24: {
                Side = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Market by price diff message. Book updates for the MBP feed are sent as diffs
  /// after the initial snapshot. The number of total side levels are for
  /// reconciliation.
  /// </summary>
  public sealed partial class MarketByPriceDiff : pb::IMessage<MarketByPriceDiff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketByPriceDiff> _parser = new pb::MessageParser<MarketByPriceDiff>(() => new MarketByPriceDiff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketByPriceDiff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByPriceDiff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByPriceDiff(MarketByPriceDiff other) : this() {
      diffs_ = other.diffs_.Clone();
      totalBidLevels_ = other.totalBidLevels_;
      totalAskLevels_ = other.totalAskLevels_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByPriceDiff Clone() {
      return new MarketByPriceDiff(this);
    }

    /// <summary>Field number for the "diffs" field.</summary>
    public const int DiffsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.MarketData.MarketByPriceDiff.Types.Diff> _repeated_diffs_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.MarketData.MarketByPriceDiff.Types.Diff.Parser);
    private readonly pbc::RepeatedField<global::Cube.MarketData.MarketByPriceDiff.Types.Diff> diffs_ = new pbc::RepeatedField<global::Cube.MarketData.MarketByPriceDiff.Types.Diff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.MarketByPriceDiff.Types.Diff> Diffs {
      get { return diffs_; }
    }

    /// <summary>Field number for the "total_bid_levels" field.</summary>
    public const int TotalBidLevelsFieldNumber = 2;
    private uint totalBidLevels_;
    /// <summary>
    /// Total number of bid levels after this diff is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalBidLevels {
      get { return totalBidLevels_; }
      set {
        totalBidLevels_ = value;
      }
    }

    /// <summary>Field number for the "total_ask_levels" field.</summary>
    public const int TotalAskLevelsFieldNumber = 3;
    private uint totalAskLevels_;
    /// <summary>
    /// Total number of ask levels after this diff is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalAskLevels {
      get { return totalAskLevels_; }
      set {
        totalAskLevels_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketByPriceDiff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketByPriceDiff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diffs_.Equals(other.diffs_)) return false;
      if (TotalBidLevels != other.TotalBidLevels) return false;
      if (TotalAskLevels != other.TotalAskLevels) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diffs_.GetHashCode();
      if (TotalBidLevels != 0) hash ^= TotalBidLevels.GetHashCode();
      if (TotalAskLevels != 0) hash ^= TotalAskLevels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      diffs_.WriteTo(output, _repeated_diffs_codec);
      if (TotalBidLevels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalBidLevels);
      }
      if (TotalAskLevels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalAskLevels);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      diffs_.WriteTo(ref output, _repeated_diffs_codec);
      if (TotalBidLevels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalBidLevels);
      }
      if (TotalAskLevels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalAskLevels);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diffs_.CalculateSize(_repeated_diffs_codec);
      if (TotalBidLevels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalBidLevels);
      }
      if (TotalAskLevels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalAskLevels);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketByPriceDiff other) {
      if (other == null) {
        return;
      }
      diffs_.Add(other.diffs_);
      if (other.TotalBidLevels != 0) {
        TotalBidLevels = other.TotalBidLevels;
      }
      if (other.TotalAskLevels != 0) {
        TotalAskLevels = other.TotalAskLevels;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            diffs_.AddEntriesFrom(input, _repeated_diffs_codec);
            break;
          }
          case 16: {
            TotalBidLevels = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalAskLevels = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            diffs_.AddEntriesFrom(ref input, _repeated_diffs_codec);
            break;
          }
          case 16: {
            TotalBidLevels = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalAskLevels = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MarketByPriceDiff message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The operation to apply for this price level. Currently, new price levels
      /// are created with `REPLACE`.
      /// </summary>
      public enum DiffOp {
        [pbr::OriginalName("ADD")] Add = 0,
        [pbr::OriginalName("REMOVE")] Remove = 1,
        [pbr::OriginalName("REPLACE")] Replace = 2,
      }

      /// <summary>
      /// A price level diff overwrites the existing price level.
      /// </summary>
      public sealed partial class Diff : pb::IMessage<Diff>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Diff> _parser = new pb::MessageParser<Diff>(() => new Diff());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Diff> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cube.MarketData.MarketByPriceDiff.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Diff() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Diff(Diff other) : this() {
          price_ = other.price_;
          quantity_ = other.quantity_;
          side_ = other.side_;
          op_ = other.op_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Diff Clone() {
          return new Diff(this);
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 1;
        private ulong price_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "quantity" field.</summary>
        public const int QuantityFieldNumber = 2;
        private ulong quantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Quantity {
          get { return quantity_; }
          set {
            quantity_ = value;
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 3;
        private global::Cube.MarketData.Side side_ = global::Cube.MarketData.Side.Bid;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Cube.MarketData.Side Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        /// <summary>Field number for the "op" field.</summary>
        public const int OpFieldNumber = 4;
        private global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp op_ = global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp.Add;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp Op {
          get { return op_; }
          set {
            op_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Diff);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Diff other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Price != other.Price) return false;
          if (Quantity != other.Quantity) return false;
          if (Side != other.Side) return false;
          if (Op != other.Op) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Price != 0UL) hash ^= Price.GetHashCode();
          if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
          if (Side != global::Cube.MarketData.Side.Bid) hash ^= Side.GetHashCode();
          if (Op != global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp.Add) hash ^= Op.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Price != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Price);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Side);
          }
          if (Op != global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp.Add) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Op);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Price != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Price);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Side);
          }
          if (Op != global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp.Add) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Op);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Price != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
          }
          if (Quantity != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (Op != global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp.Add) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Diff other) {
          if (other == null) {
            return;
          }
          if (other.Price != 0UL) {
            Price = other.Price;
          }
          if (other.Quantity != 0UL) {
            Quantity = other.Quantity;
          }
          if (other.Side != global::Cube.MarketData.Side.Bid) {
            Side = other.Side;
          }
          if (other.Op != global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp.Add) {
            Op = other.Op;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Price = input.ReadUInt64();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 24: {
                Side = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
              case 32: {
                Op = (global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Price = input.ReadUInt64();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 24: {
                Side = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
              case 32: {
                Op = (global::Cube.MarketData.MarketByPriceDiff.Types.DiffOp) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Market by order snapshot message. This is chunked into `num_chunks` and starts
  /// with `chunk = 0`. A snapshot is sent on first connect. `Level`'s should be
  /// concatened until `chunk = num_chunks - 1`. Orders are sent in order of FIFO
  /// queue priority so the first order of a level should be the first order to be
  /// matched when that level is aggressed.
  /// </summary>
  public sealed partial class MarketByOrder : pb::IMessage<MarketByOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketByOrder> _parser = new pb::MessageParser<MarketByOrder>(() => new MarketByOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketByOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByOrder(MarketByOrder other) : this() {
      orders_ = other.orders_.Clone();
      chunk_ = other.chunk_;
      numChunks_ = other.numChunks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByOrder Clone() {
      return new MarketByOrder(this);
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.MarketData.MarketByOrder.Types.Order> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.MarketData.MarketByOrder.Types.Order.Parser);
    private readonly pbc::RepeatedField<global::Cube.MarketData.MarketByOrder.Types.Order> orders_ = new pbc::RepeatedField<global::Cube.MarketData.MarketByOrder.Types.Order>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.MarketByOrder.Types.Order> Orders {
      get { return orders_; }
    }

    /// <summary>Field number for the "chunk" field.</summary>
    public const int ChunkFieldNumber = 2;
    private uint chunk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Chunk {
      get { return chunk_; }
      set {
        chunk_ = value;
      }
    }

    /// <summary>Field number for the "num_chunks" field.</summary>
    public const int NumChunksFieldNumber = 3;
    private uint numChunks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumChunks {
      get { return numChunks_; }
      set {
        numChunks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketByOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketByOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orders_.Equals(other.orders_)) return false;
      if (Chunk != other.Chunk) return false;
      if (NumChunks != other.NumChunks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orders_.GetHashCode();
      if (Chunk != 0) hash ^= Chunk.GetHashCode();
      if (NumChunks != 0) hash ^= NumChunks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orders_.WriteTo(output, _repeated_orders_codec);
      if (Chunk != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Chunk);
      }
      if (NumChunks != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumChunks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orders_.WriteTo(ref output, _repeated_orders_codec);
      if (Chunk != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Chunk);
      }
      if (NumChunks != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumChunks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (Chunk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Chunk);
      }
      if (NumChunks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumChunks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketByOrder other) {
      if (other == null) {
        return;
      }
      orders_.Add(other.orders_);
      if (other.Chunk != 0) {
        Chunk = other.Chunk;
      }
      if (other.NumChunks != 0) {
        NumChunks = other.NumChunks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
          case 16: {
            Chunk = input.ReadUInt32();
            break;
          }
          case 24: {
            NumChunks = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            orders_.AddEntriesFrom(ref input, _repeated_orders_codec);
            break;
          }
          case 16: {
            Chunk = input.ReadUInt32();
            break;
          }
          case 24: {
            NumChunks = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MarketByOrder message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A resting order.
      /// </summary>
      public sealed partial class Order : pb::IMessage<Order>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Order> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cube.MarketData.MarketByOrder.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Order() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Order(Order other) : this() {
          price_ = other.price_;
          quantity_ = other.quantity_;
          exchangeOrderId_ = other.exchangeOrderId_;
          side_ = other.side_;
          priority_ = other.priority_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Order Clone() {
          return new Order(this);
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 1;
        private ulong price_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "quantity" field.</summary>
        public const int QuantityFieldNumber = 2;
        private ulong quantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Quantity {
          get { return quantity_; }
          set {
            quantity_ = value;
          }
        }

        /// <summary>Field number for the "exchange_order_id" field.</summary>
        public const int ExchangeOrderIdFieldNumber = 3;
        private ulong exchangeOrderId_;
        /// <summary>
        /// [Exchange order ID](/docs/api_reference/trade#exchange-order-id)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ExchangeOrderId {
          get { return exchangeOrderId_; }
          set {
            exchangeOrderId_ = value;
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 4;
        private global::Cube.MarketData.Side side_ = global::Cube.MarketData.Side.Bid;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Cube.MarketData.Side Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        /// <summary>Field number for the "priority" field.</summary>
        public const int PriorityFieldNumber = 5;
        private ulong priority_;
        /// <summary>
        /// Order priority for execution. Valid within a price level and side. That
        /// is, orders must first be sorted by side and price (in descending order
        /// for bids and ascending for asks), and then the OrderPriority within the
        /// level. A lower value is a higher priority.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Priority {
          get { return priority_; }
          set {
            priority_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Order);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Order other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Price != other.Price) return false;
          if (Quantity != other.Quantity) return false;
          if (ExchangeOrderId != other.ExchangeOrderId) return false;
          if (Side != other.Side) return false;
          if (Priority != other.Priority) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Price != 0UL) hash ^= Price.GetHashCode();
          if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
          if (ExchangeOrderId != 0UL) hash ^= ExchangeOrderId.GetHashCode();
          if (Side != global::Cube.MarketData.Side.Bid) hash ^= Side.GetHashCode();
          if (Priority != 0UL) hash ^= Priority.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Price != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Price);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (ExchangeOrderId != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(ExchangeOrderId);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Side);
          }
          if (Priority != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Priority);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Price != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Price);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (ExchangeOrderId != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(ExchangeOrderId);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Side);
          }
          if (Priority != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Priority);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Price != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
          }
          if (Quantity != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
          }
          if (ExchangeOrderId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExchangeOrderId);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (Priority != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Priority);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Order other) {
          if (other == null) {
            return;
          }
          if (other.Price != 0UL) {
            Price = other.Price;
          }
          if (other.Quantity != 0UL) {
            Quantity = other.Quantity;
          }
          if (other.ExchangeOrderId != 0UL) {
            ExchangeOrderId = other.ExchangeOrderId;
          }
          if (other.Side != global::Cube.MarketData.Side.Bid) {
            Side = other.Side;
          }
          if (other.Priority != 0UL) {
            Priority = other.Priority;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Price = input.ReadUInt64();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 24: {
                ExchangeOrderId = input.ReadUInt64();
                break;
              }
              case 32: {
                Side = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
              case 40: {
                Priority = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Price = input.ReadUInt64();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 24: {
                ExchangeOrderId = input.ReadUInt64();
                break;
              }
              case 32: {
                Side = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
              case 40: {
                Priority = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Market by order diff message. Book updates for the MBO feed are sent as diffs
  /// after the initial snapshot. The number of total side levels and orders are
  /// for reconciliation.
  ///
  /// Note that for orders that are cancel-replace'd (a modify that lost queue
  /// priority), the new price and quantity will be reported as a `REPLACE` but the
  /// exchange order ID will not change.
  /// </summary>
  public sealed partial class MarketByOrderDiff : pb::IMessage<MarketByOrderDiff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketByOrderDiff> _parser = new pb::MessageParser<MarketByOrderDiff>(() => new MarketByOrderDiff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketByOrderDiff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByOrderDiff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByOrderDiff(MarketByOrderDiff other) : this() {
      diffs_ = other.diffs_.Clone();
      totalBidLevels_ = other.totalBidLevels_;
      totalAskLevels_ = other.totalAskLevels_;
      totalBidOrders_ = other.totalBidOrders_;
      totalAskOrders_ = other.totalAskOrders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketByOrderDiff Clone() {
      return new MarketByOrderDiff(this);
    }

    /// <summary>Field number for the "diffs" field.</summary>
    public const int DiffsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.MarketData.MarketByOrderDiff.Types.Diff> _repeated_diffs_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.MarketData.MarketByOrderDiff.Types.Diff.Parser);
    private readonly pbc::RepeatedField<global::Cube.MarketData.MarketByOrderDiff.Types.Diff> diffs_ = new pbc::RepeatedField<global::Cube.MarketData.MarketByOrderDiff.Types.Diff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.MarketByOrderDiff.Types.Diff> Diffs {
      get { return diffs_; }
    }

    /// <summary>Field number for the "total_bid_levels" field.</summary>
    public const int TotalBidLevelsFieldNumber = 2;
    private uint totalBidLevels_;
    /// <summary>
    /// Total number of bid levels after this diff is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalBidLevels {
      get { return totalBidLevels_; }
      set {
        totalBidLevels_ = value;
      }
    }

    /// <summary>Field number for the "total_ask_levels" field.</summary>
    public const int TotalAskLevelsFieldNumber = 3;
    private uint totalAskLevels_;
    /// <summary>
    /// Total number of ask levels after this diff is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalAskLevels {
      get { return totalAskLevels_; }
      set {
        totalAskLevels_ = value;
      }
    }

    /// <summary>Field number for the "total_bid_orders" field.</summary>
    public const int TotalBidOrdersFieldNumber = 4;
    private uint totalBidOrders_;
    /// <summary>
    /// Total number of bid orders after this diff is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalBidOrders {
      get { return totalBidOrders_; }
      set {
        totalBidOrders_ = value;
      }
    }

    /// <summary>Field number for the "total_ask_orders" field.</summary>
    public const int TotalAskOrdersFieldNumber = 5;
    private uint totalAskOrders_;
    /// <summary>
    /// Total number of ask orders after this diff is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalAskOrders {
      get { return totalAskOrders_; }
      set {
        totalAskOrders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketByOrderDiff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketByOrderDiff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diffs_.Equals(other.diffs_)) return false;
      if (TotalBidLevels != other.TotalBidLevels) return false;
      if (TotalAskLevels != other.TotalAskLevels) return false;
      if (TotalBidOrders != other.TotalBidOrders) return false;
      if (TotalAskOrders != other.TotalAskOrders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diffs_.GetHashCode();
      if (TotalBidLevels != 0) hash ^= TotalBidLevels.GetHashCode();
      if (TotalAskLevels != 0) hash ^= TotalAskLevels.GetHashCode();
      if (TotalBidOrders != 0) hash ^= TotalBidOrders.GetHashCode();
      if (TotalAskOrders != 0) hash ^= TotalAskOrders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      diffs_.WriteTo(output, _repeated_diffs_codec);
      if (TotalBidLevels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalBidLevels);
      }
      if (TotalAskLevels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalAskLevels);
      }
      if (TotalBidOrders != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalBidOrders);
      }
      if (TotalAskOrders != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalAskOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      diffs_.WriteTo(ref output, _repeated_diffs_codec);
      if (TotalBidLevels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalBidLevels);
      }
      if (TotalAskLevels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalAskLevels);
      }
      if (TotalBidOrders != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalBidOrders);
      }
      if (TotalAskOrders != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalAskOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diffs_.CalculateSize(_repeated_diffs_codec);
      if (TotalBidLevels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalBidLevels);
      }
      if (TotalAskLevels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalAskLevels);
      }
      if (TotalBidOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalBidOrders);
      }
      if (TotalAskOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalAskOrders);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketByOrderDiff other) {
      if (other == null) {
        return;
      }
      diffs_.Add(other.diffs_);
      if (other.TotalBidLevels != 0) {
        TotalBidLevels = other.TotalBidLevels;
      }
      if (other.TotalAskLevels != 0) {
        TotalAskLevels = other.TotalAskLevels;
      }
      if (other.TotalBidOrders != 0) {
        TotalBidOrders = other.TotalBidOrders;
      }
      if (other.TotalAskOrders != 0) {
        TotalAskOrders = other.TotalAskOrders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            diffs_.AddEntriesFrom(input, _repeated_diffs_codec);
            break;
          }
          case 16: {
            TotalBidLevels = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalAskLevels = input.ReadUInt32();
            break;
          }
          case 32: {
            TotalBidOrders = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalAskOrders = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            diffs_.AddEntriesFrom(ref input, _repeated_diffs_codec);
            break;
          }
          case 16: {
            TotalBidLevels = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalAskLevels = input.ReadUInt32();
            break;
          }
          case 32: {
            TotalBidOrders = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalAskOrders = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MarketByOrderDiff message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The operation to apply for this price level. For example, an resting order
      /// that gets filled will be `REPLACE`'d with the new resting quantity. An
      /// order is `REMOVE`'d when it is fully filled or canceled.
      /// </summary>
      public enum DiffOp {
        [pbr::OriginalName("ADD")] Add = 0,
        [pbr::OriginalName("REMOVE")] Remove = 1,
        [pbr::OriginalName("REPLACE")] Replace = 2,
      }

      /// <summary>
      /// An order diff creates, updates, or deletes a resting order based on the
      /// `exchange_order_id`
      /// </summary>
      public sealed partial class Diff : pb::IMessage<Diff>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Diff> _parser = new pb::MessageParser<Diff>(() => new Diff());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Diff> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cube.MarketData.MarketByOrderDiff.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Diff() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Diff(Diff other) : this() {
          price_ = other.price_;
          quantity_ = other.quantity_;
          exchangeOrderId_ = other.exchangeOrderId_;
          side_ = other.side_;
          op_ = other.op_;
          priority_ = other.priority_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Diff Clone() {
          return new Diff(this);
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 1;
        private ulong price_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "quantity" field.</summary>
        public const int QuantityFieldNumber = 2;
        private ulong quantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Quantity {
          get { return quantity_; }
          set {
            quantity_ = value;
          }
        }

        /// <summary>Field number for the "exchange_order_id" field.</summary>
        public const int ExchangeOrderIdFieldNumber = 3;
        private ulong exchangeOrderId_;
        /// <summary>
        /// [Exchange order ID](/docs/api_reference/trade#exchange-order-id)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ExchangeOrderId {
          get { return exchangeOrderId_; }
          set {
            exchangeOrderId_ = value;
          }
        }

        /// <summary>Field number for the "side" field.</summary>
        public const int SideFieldNumber = 4;
        private global::Cube.MarketData.Side side_ = global::Cube.MarketData.Side.Bid;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Cube.MarketData.Side Side {
          get { return side_; }
          set {
            side_ = value;
          }
        }

        /// <summary>Field number for the "op" field.</summary>
        public const int OpFieldNumber = 5;
        private global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp op_ = global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp.Add;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp Op {
          get { return op_; }
          set {
            op_ = value;
          }
        }

        /// <summary>Field number for the "priority" field.</summary>
        public const int PriorityFieldNumber = 6;
        private ulong priority_;
        /// <summary>
        /// See [`MarketByOrder.Order`](#market-by-order-order)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Priority {
          get { return priority_; }
          set {
            priority_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Diff);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Diff other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Price != other.Price) return false;
          if (Quantity != other.Quantity) return false;
          if (ExchangeOrderId != other.ExchangeOrderId) return false;
          if (Side != other.Side) return false;
          if (Op != other.Op) return false;
          if (Priority != other.Priority) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Price != 0UL) hash ^= Price.GetHashCode();
          if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
          if (ExchangeOrderId != 0UL) hash ^= ExchangeOrderId.GetHashCode();
          if (Side != global::Cube.MarketData.Side.Bid) hash ^= Side.GetHashCode();
          if (Op != global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp.Add) hash ^= Op.GetHashCode();
          if (Priority != 0UL) hash ^= Priority.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Price != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Price);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (ExchangeOrderId != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(ExchangeOrderId);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Side);
          }
          if (Op != global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp.Add) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Op);
          }
          if (Priority != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Priority);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Price != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Price);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (ExchangeOrderId != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(ExchangeOrderId);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Side);
          }
          if (Op != global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp.Add) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Op);
          }
          if (Priority != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Priority);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Price != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
          }
          if (Quantity != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
          }
          if (ExchangeOrderId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExchangeOrderId);
          }
          if (Side != global::Cube.MarketData.Side.Bid) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
          }
          if (Op != global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp.Add) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
          }
          if (Priority != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Priority);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Diff other) {
          if (other == null) {
            return;
          }
          if (other.Price != 0UL) {
            Price = other.Price;
          }
          if (other.Quantity != 0UL) {
            Quantity = other.Quantity;
          }
          if (other.ExchangeOrderId != 0UL) {
            ExchangeOrderId = other.ExchangeOrderId;
          }
          if (other.Side != global::Cube.MarketData.Side.Bid) {
            Side = other.Side;
          }
          if (other.Op != global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp.Add) {
            Op = other.Op;
          }
          if (other.Priority != 0UL) {
            Priority = other.Priority;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Price = input.ReadUInt64();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 24: {
                ExchangeOrderId = input.ReadUInt64();
                break;
              }
              case 32: {
                Side = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
              case 40: {
                Op = (global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp) input.ReadEnum();
                break;
              }
              case 48: {
                Priority = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Price = input.ReadUInt64();
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 24: {
                ExchangeOrderId = input.ReadUInt64();
                break;
              }
              case 32: {
                Side = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
              case 40: {
                Op = (global::Cube.MarketData.MarketByOrderDiff.Types.DiffOp) input.ReadEnum();
                break;
              }
              case 48: {
                Priority = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Trades since the latest `Trades` message. The result of the trades will also
  /// appear in the MBP and MBO feeds independently as updates to the resting
  /// orders and levels, respectively.
  /// </summary>
  public sealed partial class Trades : pb::IMessage<Trades>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Trades> _parser = new pb::MessageParser<Trades>(() => new Trades());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trades> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades(Trades other) : this() {
      trades_ = other.trades_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trades Clone() {
      return new Trades(this);
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int Trades_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.MarketData.Trades.Types.Trade> _repeated_trades_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.MarketData.Trades.Types.Trade.Parser);
    private readonly pbc::RepeatedField<global::Cube.MarketData.Trades.Types.Trade> trades_ = new pbc::RepeatedField<global::Cube.MarketData.Trades.Types.Trade>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.Trades.Types.Trade> Trades_ {
      get { return trades_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trades);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trades other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trades_.Equals(other.trades_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trades_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      trades_.WriteTo(output, _repeated_trades_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      trades_.WriteTo(ref output, _repeated_trades_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trades_.CalculateSize(_repeated_trades_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trades other) {
      if (other == null) {
        return;
      }
      trades_.Add(other.trades_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            trades_.AddEntriesFrom(input, _repeated_trades_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            trades_.AddEntriesFrom(ref input, _repeated_trades_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Trades message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Trade : pb::IMessage<Trade>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Trade> _parser = new pb::MessageParser<Trade>(() => new Trade());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Trade> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cube.MarketData.Trades.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trade() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trade(Trade other) : this() {
          tradeId_ = other.tradeId_;
          price_ = other.price_;
          aggressingSide_ = other.aggressingSide_;
          restingExchangeOrderId_ = other.restingExchangeOrderId_;
          fillQuantity_ = other.fillQuantity_;
          transactTime_ = other.transactTime_;
          aggressingExchangeOrderId_ = other.aggressingExchangeOrderId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trade Clone() {
          return new Trade(this);
        }

        /// <summary>Field number for the "tradeId" field.</summary>
        public const int TradeIdFieldNumber = 1;
        private ulong tradeId_;
        /// <summary>
        /// The ID assigned to this trade. All trades that occur from the same event
        /// will be assigned the same ID, and are considered to be an atomic batch.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TradeId {
          get { return tradeId_; }
          set {
            tradeId_ = value;
          }
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 2;
        private ulong price_;
        /// <summary>
        /// The price that this trade occurred at.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "aggressing_side" field.</summary>
        public const int AggressingSideFieldNumber = 3;
        private global::Cube.MarketData.Side aggressingSide_ = global::Cube.MarketData.Side.Bid;
        /// <summary>
        /// The side of the aggressing order.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Cube.MarketData.Side AggressingSide {
          get { return aggressingSide_; }
          set {
            aggressingSide_ = value;
          }
        }

        /// <summary>Field number for the "resting_exchange_order_id" field.</summary>
        public const int RestingExchangeOrderIdFieldNumber = 4;
        private ulong restingExchangeOrderId_;
        /// <summary>
        /// The [Exchange order ID](/docs/api_reference/trade#exchange-order-id) of
        /// the resting order.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RestingExchangeOrderId {
          get { return restingExchangeOrderId_; }
          set {
            restingExchangeOrderId_ = value;
          }
        }

        /// <summary>Field number for the "fill_quantity" field.</summary>
        public const int FillQuantityFieldNumber = 5;
        private ulong fillQuantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong FillQuantity {
          get { return fillQuantity_; }
          set {
            fillQuantity_ = value;
          }
        }

        /// <summary>Field number for the "transact_time" field.</summary>
        public const int TransactTimeFieldNumber = 6;
        private ulong transactTime_;
        /// <summary>
        /// The [transact time](/docs/api_reference/trade#transact-time) assigned by
        /// the matching engine for this trade. All trades that occur from the same
        /// event will be assigned the same transact time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TransactTime {
          get { return transactTime_; }
          set {
            transactTime_ = value;
          }
        }

        /// <summary>Field number for the "aggressing_exchange_order_id" field.</summary>
        public const int AggressingExchangeOrderIdFieldNumber = 7;
        private ulong aggressingExchangeOrderId_;
        /// <summary>
        /// The [Exchange order ID](/docs/api_reference/trade#exchange-order-id) of
        /// the aggressing order.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong AggressingExchangeOrderId {
          get { return aggressingExchangeOrderId_; }
          set {
            aggressingExchangeOrderId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Trade);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Trade other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TradeId != other.TradeId) return false;
          if (Price != other.Price) return false;
          if (AggressingSide != other.AggressingSide) return false;
          if (RestingExchangeOrderId != other.RestingExchangeOrderId) return false;
          if (FillQuantity != other.FillQuantity) return false;
          if (TransactTime != other.TransactTime) return false;
          if (AggressingExchangeOrderId != other.AggressingExchangeOrderId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TradeId != 0UL) hash ^= TradeId.GetHashCode();
          if (Price != 0UL) hash ^= Price.GetHashCode();
          if (AggressingSide != global::Cube.MarketData.Side.Bid) hash ^= AggressingSide.GetHashCode();
          if (RestingExchangeOrderId != 0UL) hash ^= RestingExchangeOrderId.GetHashCode();
          if (FillQuantity != 0UL) hash ^= FillQuantity.GetHashCode();
          if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
          if (AggressingExchangeOrderId != 0UL) hash ^= AggressingExchangeOrderId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TradeId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(TradeId);
          }
          if (Price != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Price);
          }
          if (AggressingSide != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(24);
            output.WriteEnum((int) AggressingSide);
          }
          if (RestingExchangeOrderId != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(RestingExchangeOrderId);
          }
          if (FillQuantity != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(FillQuantity);
          }
          if (TransactTime != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(TransactTime);
          }
          if (AggressingExchangeOrderId != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(AggressingExchangeOrderId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TradeId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(TradeId);
          }
          if (Price != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Price);
          }
          if (AggressingSide != global::Cube.MarketData.Side.Bid) {
            output.WriteRawTag(24);
            output.WriteEnum((int) AggressingSide);
          }
          if (RestingExchangeOrderId != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(RestingExchangeOrderId);
          }
          if (FillQuantity != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(FillQuantity);
          }
          if (TransactTime != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(TransactTime);
          }
          if (AggressingExchangeOrderId != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(AggressingExchangeOrderId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TradeId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TradeId);
          }
          if (Price != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
          }
          if (AggressingSide != global::Cube.MarketData.Side.Bid) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AggressingSide);
          }
          if (RestingExchangeOrderId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RestingExchangeOrderId);
          }
          if (FillQuantity != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FillQuantity);
          }
          if (TransactTime != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
          }
          if (AggressingExchangeOrderId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AggressingExchangeOrderId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Trade other) {
          if (other == null) {
            return;
          }
          if (other.TradeId != 0UL) {
            TradeId = other.TradeId;
          }
          if (other.Price != 0UL) {
            Price = other.Price;
          }
          if (other.AggressingSide != global::Cube.MarketData.Side.Bid) {
            AggressingSide = other.AggressingSide;
          }
          if (other.RestingExchangeOrderId != 0UL) {
            RestingExchangeOrderId = other.RestingExchangeOrderId;
          }
          if (other.FillQuantity != 0UL) {
            FillQuantity = other.FillQuantity;
          }
          if (other.TransactTime != 0UL) {
            TransactTime = other.TransactTime;
          }
          if (other.AggressingExchangeOrderId != 0UL) {
            AggressingExchangeOrderId = other.AggressingExchangeOrderId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TradeId = input.ReadUInt64();
                break;
              }
              case 16: {
                Price = input.ReadUInt64();
                break;
              }
              case 24: {
                AggressingSide = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
              case 32: {
                RestingExchangeOrderId = input.ReadUInt64();
                break;
              }
              case 40: {
                FillQuantity = input.ReadUInt64();
                break;
              }
              case 48: {
                TransactTime = input.ReadUInt64();
                break;
              }
              case 56: {
                AggressingExchangeOrderId = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TradeId = input.ReadUInt64();
                break;
              }
              case 16: {
                Price = input.ReadUInt64();
                break;
              }
              case 24: {
                AggressingSide = (global::Cube.MarketData.Side) input.ReadEnum();
                break;
              }
              case 32: {
                RestingExchangeOrderId = input.ReadUInt64();
                break;
              }
              case 40: {
                FillQuantity = input.ReadUInt64();
                break;
              }
              case 48: {
                TransactTime = input.ReadUInt64();
                break;
              }
              case 56: {
                AggressingExchangeOrderId = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Rolling 24h stats.
  /// </summary>
  public sealed partial class Summary : pb::IMessage<Summary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Summary> _parser = new pb::MessageParser<Summary>(() => new Summary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Summary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary(Summary other) : this() {
      open_ = other.open_;
      close_ = other.close_;
      low_ = other.low_;
      high_ = other.high_;
      baseVolumeLo_ = other.baseVolumeLo_;
      baseVolumeHi_ = other.baseVolumeHi_;
      quoteVolumeLo_ = other.quoteVolumeLo_;
      quoteVolumeHi_ = other.quoteVolumeHi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Summary Clone() {
      return new Summary(this);
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private ulong open_;
    /// <summary>
    /// 24h open price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 2;
    private ulong close_;
    /// <summary>
    /// Latest price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 3;
    private ulong low_;
    /// <summary>
    /// 24h low price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 4;
    private ulong high_;
    /// <summary>
    /// 24h high price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "base_volume_lo" field.</summary>
    public const int BaseVolumeLoFieldNumber = 5;
    private ulong baseVolumeLo_;
    /// <summary>
    /// Low 64-bits of the base quantity traded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BaseVolumeLo {
      get { return baseVolumeLo_; }
      set {
        baseVolumeLo_ = value;
      }
    }

    /// <summary>Field number for the "base_volume_hi" field.</summary>
    public const int BaseVolumeHiFieldNumber = 6;
    private ulong baseVolumeHi_;
    /// <summary>
    /// High 64-bits of the base quantity traded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BaseVolumeHi {
      get { return baseVolumeHi_; }
      set {
        baseVolumeHi_ = value;
      }
    }

    /// <summary>Field number for the "quote_volume_lo" field.</summary>
    public const int QuoteVolumeLoFieldNumber = 7;
    private ulong quoteVolumeLo_;
    /// <summary>
    /// Low 64-bits of the quote quantity traded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuoteVolumeLo {
      get { return quoteVolumeLo_; }
      set {
        quoteVolumeLo_ = value;
      }
    }

    /// <summary>Field number for the "quote_volume_hi" field.</summary>
    public const int QuoteVolumeHiFieldNumber = 8;
    private ulong quoteVolumeHi_;
    /// <summary>
    /// High 64-bits of the quote quantity traded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuoteVolumeHi {
      get { return quoteVolumeHi_; }
      set {
        quoteVolumeHi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Summary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Summary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Open != other.Open) return false;
      if (Close != other.Close) return false;
      if (Low != other.Low) return false;
      if (High != other.High) return false;
      if (BaseVolumeLo != other.BaseVolumeLo) return false;
      if (BaseVolumeHi != other.BaseVolumeHi) return false;
      if (QuoteVolumeLo != other.QuoteVolumeLo) return false;
      if (QuoteVolumeHi != other.QuoteVolumeHi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Open != 0UL) hash ^= Open.GetHashCode();
      if (Close != 0UL) hash ^= Close.GetHashCode();
      if (Low != 0UL) hash ^= Low.GetHashCode();
      if (High != 0UL) hash ^= High.GetHashCode();
      if (BaseVolumeLo != 0UL) hash ^= BaseVolumeLo.GetHashCode();
      if (BaseVolumeHi != 0UL) hash ^= BaseVolumeHi.GetHashCode();
      if (QuoteVolumeLo != 0UL) hash ^= QuoteVolumeLo.GetHashCode();
      if (QuoteVolumeHi != 0UL) hash ^= QuoteVolumeHi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Open != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Open);
      }
      if (Close != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Close);
      }
      if (Low != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Low);
      }
      if (High != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(High);
      }
      if (BaseVolumeLo != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BaseVolumeLo);
      }
      if (BaseVolumeHi != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(BaseVolumeHi);
      }
      if (QuoteVolumeLo != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(QuoteVolumeLo);
      }
      if (QuoteVolumeHi != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(QuoteVolumeHi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Open != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Open);
      }
      if (Close != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Close);
      }
      if (Low != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Low);
      }
      if (High != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(High);
      }
      if (BaseVolumeLo != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BaseVolumeLo);
      }
      if (BaseVolumeHi != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(BaseVolumeHi);
      }
      if (QuoteVolumeLo != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(QuoteVolumeLo);
      }
      if (QuoteVolumeHi != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(QuoteVolumeHi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Open);
      }
      if (Close != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Close);
      }
      if (Low != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Low);
      }
      if (High != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(High);
      }
      if (BaseVolumeLo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BaseVolumeLo);
      }
      if (BaseVolumeHi != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BaseVolumeHi);
      }
      if (QuoteVolumeLo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuoteVolumeLo);
      }
      if (QuoteVolumeHi != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuoteVolumeHi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Summary other) {
      if (other == null) {
        return;
      }
      if (other.Open != 0UL) {
        Open = other.Open;
      }
      if (other.Close != 0UL) {
        Close = other.Close;
      }
      if (other.Low != 0UL) {
        Low = other.Low;
      }
      if (other.High != 0UL) {
        High = other.High;
      }
      if (other.BaseVolumeLo != 0UL) {
        BaseVolumeLo = other.BaseVolumeLo;
      }
      if (other.BaseVolumeHi != 0UL) {
        BaseVolumeHi = other.BaseVolumeHi;
      }
      if (other.QuoteVolumeLo != 0UL) {
        QuoteVolumeLo = other.QuoteVolumeLo;
      }
      if (other.QuoteVolumeHi != 0UL) {
        QuoteVolumeHi = other.QuoteVolumeHi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Open = input.ReadUInt64();
            break;
          }
          case 16: {
            Close = input.ReadUInt64();
            break;
          }
          case 24: {
            Low = input.ReadUInt64();
            break;
          }
          case 32: {
            High = input.ReadUInt64();
            break;
          }
          case 40: {
            BaseVolumeLo = input.ReadUInt64();
            break;
          }
          case 48: {
            BaseVolumeHi = input.ReadUInt64();
            break;
          }
          case 56: {
            QuoteVolumeLo = input.ReadUInt64();
            break;
          }
          case 64: {
            QuoteVolumeHi = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Open = input.ReadUInt64();
            break;
          }
          case 16: {
            Close = input.ReadUInt64();
            break;
          }
          case 24: {
            Low = input.ReadUInt64();
            break;
          }
          case 32: {
            High = input.ReadUInt64();
            break;
          }
          case 40: {
            BaseVolumeLo = input.ReadUInt64();
            break;
          }
          case 48: {
            BaseVolumeHi = input.ReadUInt64();
            break;
          }
          case 56: {
            QuoteVolumeLo = input.ReadUInt64();
            break;
          }
          case 64: {
            QuoteVolumeHi = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Candlestick bar.
  /// </summary>
  public sealed partial class Kline : pb::IMessage<Kline>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Kline> _parser = new pb::MessageParser<Kline>(() => new Kline());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kline> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kline() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kline(Kline other) : this() {
      interval_ = other.interval_;
      startTime_ = other.startTime_;
      open_ = other.open_;
      close_ = other.close_;
      high_ = other.high_;
      low_ = other.low_;
      volumeLo_ = other.volumeLo_;
      volumeHi_ = other.volumeHi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kline Clone() {
      return new Kline(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private global::Cube.MarketData.KlineInterval interval_ = global::Cube.MarketData.KlineInterval.S1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.KlineInterval Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private ulong startTime_;
    /// <summary>
    /// The unix nanosecond timestamp that this kline covers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 3;
    private ulong open_;
    /// <summary>
    /// Kline open price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 4;
    private ulong close_;
    /// <summary>
    /// Kline close price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 5;
    private ulong high_;
    /// <summary>
    /// Kline high price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 6;
    private ulong low_;
    /// <summary>
    /// Kline low price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "volume_lo" field.</summary>
    public const int VolumeLoFieldNumber = 7;
    private ulong volumeLo_;
    /// <summary>
    /// Low 64-bits of the base quantity traded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VolumeLo {
      get { return volumeLo_; }
      set {
        volumeLo_ = value;
      }
    }

    /// <summary>Field number for the "volume_hi" field.</summary>
    public const int VolumeHiFieldNumber = 8;
    private ulong volumeHi_;
    /// <summary>
    /// High 64-bits of the base quantity traded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VolumeHi {
      get { return volumeHi_; }
      set {
        volumeHi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kline);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kline other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      if (StartTime != other.StartTime) return false;
      if (Open != other.Open) return false;
      if (Close != other.Close) return false;
      if (High != other.High) return false;
      if (Low != other.Low) return false;
      if (VolumeLo != other.VolumeLo) return false;
      if (VolumeHi != other.VolumeHi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != global::Cube.MarketData.KlineInterval.S1) hash ^= Interval.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (Open != 0UL) hash ^= Open.GetHashCode();
      if (Close != 0UL) hash ^= Close.GetHashCode();
      if (High != 0UL) hash ^= High.GetHashCode();
      if (Low != 0UL) hash ^= Low.GetHashCode();
      if (VolumeLo != 0UL) hash ^= VolumeLo.GetHashCode();
      if (VolumeHi != 0UL) hash ^= VolumeHi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Interval != global::Cube.MarketData.KlineInterval.S1) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Interval);
      }
      if (StartTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StartTime);
      }
      if (Open != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Open);
      }
      if (Close != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Close);
      }
      if (High != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(High);
      }
      if (Low != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Low);
      }
      if (VolumeLo != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(VolumeLo);
      }
      if (VolumeHi != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(VolumeHi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Interval != global::Cube.MarketData.KlineInterval.S1) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Interval);
      }
      if (StartTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StartTime);
      }
      if (Open != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Open);
      }
      if (Close != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Close);
      }
      if (High != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(High);
      }
      if (Low != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Low);
      }
      if (VolumeLo != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(VolumeLo);
      }
      if (VolumeHi != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(VolumeHi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != global::Cube.MarketData.KlineInterval.S1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Interval);
      }
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (Open != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Open);
      }
      if (Close != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Close);
      }
      if (High != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(High);
      }
      if (Low != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Low);
      }
      if (VolumeLo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VolumeLo);
      }
      if (VolumeHi != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VolumeHi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kline other) {
      if (other == null) {
        return;
      }
      if (other.Interval != global::Cube.MarketData.KlineInterval.S1) {
        Interval = other.Interval;
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.Open != 0UL) {
        Open = other.Open;
      }
      if (other.Close != 0UL) {
        Close = other.Close;
      }
      if (other.High != 0UL) {
        High = other.High;
      }
      if (other.Low != 0UL) {
        Low = other.Low;
      }
      if (other.VolumeLo != 0UL) {
        VolumeLo = other.VolumeLo;
      }
      if (other.VolumeHi != 0UL) {
        VolumeHi = other.VolumeHi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = (global::Cube.MarketData.KlineInterval) input.ReadEnum();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 24: {
            Open = input.ReadUInt64();
            break;
          }
          case 32: {
            Close = input.ReadUInt64();
            break;
          }
          case 40: {
            High = input.ReadUInt64();
            break;
          }
          case 48: {
            Low = input.ReadUInt64();
            break;
          }
          case 56: {
            VolumeLo = input.ReadUInt64();
            break;
          }
          case 64: {
            VolumeHi = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Interval = (global::Cube.MarketData.KlineInterval) input.ReadEnum();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 24: {
            Open = input.ReadUInt64();
            break;
          }
          case 32: {
            Close = input.ReadUInt64();
            break;
          }
          case 40: {
            High = input.ReadUInt64();
            break;
          }
          case 48: {
            Low = input.ReadUInt64();
            break;
          }
          case 56: {
            VolumeLo = input.ReadUInt64();
            break;
          }
          case 64: {
            VolumeHi = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A client and server heartbeat. The heartbeat reply, including the timestamp
  /// value, comes from the market data service.
  /// </summary>
  public sealed partial class Heartbeat : pb::IMessage<Heartbeat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      requestId_ = other.requestId_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private ulong requestId_;
    /// <summary>
    /// A request ID that is echoed back on the Heartbeat
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RequestId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RequestId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MdMessages : pb::IMessage<MdMessages>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MdMessages> _parser = new pb::MessageParser<MdMessages>(() => new MdMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MdMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdMessages(MdMessages other) : this() {
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdMessages Clone() {
      return new MdMessages(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.MarketData.MdMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.MarketData.MdMessage.Parser);
    private readonly pbc::RepeatedField<global::Cube.MarketData.MdMessage> messages_ = new pbc::RepeatedField<global::Cube.MarketData.MdMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.MdMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MdMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MdMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      messages_.WriteTo(ref output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MdMessages other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            messages_.AddEntriesFrom(ref input, _repeated_messages_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Every exchange message from `/tops` will be wrapped as an `AggMessage`.
  /// </summary>
  public sealed partial class AggMessage : pb::IMessage<AggMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AggMessage> _parser = new pb::MessageParser<AggMessage>(() => new AggMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AggMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggMessage(AggMessage other) : this() {
      switch (other.InnerCase) {
        case InnerOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case InnerOneofCase.TopOfBooks:
          TopOfBooks = other.TopOfBooks.Clone();
          break;
        case InnerOneofCase.RateUpdates:
          RateUpdates = other.RateUpdates.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggMessage Clone() {
      return new AggMessage(this);
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 1;
    /// <summary>
    /// Server heartbeat reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.Heartbeat Heartbeat {
      get { return innerCase_ == InnerOneofCase.Heartbeat ? (global::Cube.MarketData.Heartbeat) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "top_of_books" field.</summary>
    public const int TopOfBooksFieldNumber = 2;
    /// <summary>
    /// Top of books
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.TopOfBooks TopOfBooks {
      get { return innerCase_ == InnerOneofCase.TopOfBooks ? (global::Cube.MarketData.TopOfBooks) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.TopOfBooks;
      }
    }

    /// <summary>Field number for the "rate_updates" field.</summary>
    public const int RateUpdatesFieldNumber = 3;
    /// <summary>
    /// Rates for all assets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.RateUpdates RateUpdates {
      get { return innerCase_ == InnerOneofCase.RateUpdates ? (global::Cube.MarketData.RateUpdates) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.RateUpdates;
      }
    }

    private object inner_;
    /// <summary>Enum of possible cases for the "inner" oneof.</summary>
    public enum InnerOneofCase {
      None = 0,
      Heartbeat = 1,
      TopOfBooks = 2,
      RateUpdates = 3,
    }
    private InnerOneofCase innerCase_ = InnerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerOneofCase InnerCase {
      get { return innerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInner() {
      innerCase_ = InnerOneofCase.None;
      inner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AggMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AggMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(TopOfBooks, other.TopOfBooks)) return false;
      if (!object.Equals(RateUpdates, other.RateUpdates)) return false;
      if (InnerCase != other.InnerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (innerCase_ == InnerOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (innerCase_ == InnerOneofCase.TopOfBooks) hash ^= TopOfBooks.GetHashCode();
      if (innerCase_ == InnerOneofCase.RateUpdates) hash ^= RateUpdates.GetHashCode();
      hash ^= (int) innerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(10);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.TopOfBooks) {
        output.WriteRawTag(18);
        output.WriteMessage(TopOfBooks);
      }
      if (innerCase_ == InnerOneofCase.RateUpdates) {
        output.WriteRawTag(26);
        output.WriteMessage(RateUpdates);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(10);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.TopOfBooks) {
        output.WriteRawTag(18);
        output.WriteMessage(TopOfBooks);
      }
      if (innerCase_ == InnerOneofCase.RateUpdates) {
        output.WriteRawTag(26);
        output.WriteMessage(RateUpdates);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.TopOfBooks) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopOfBooks);
      }
      if (innerCase_ == InnerOneofCase.RateUpdates) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateUpdates);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AggMessage other) {
      if (other == null) {
        return;
      }
      switch (other.InnerCase) {
        case InnerOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Cube.MarketData.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
        case InnerOneofCase.TopOfBooks:
          if (TopOfBooks == null) {
            TopOfBooks = new global::Cube.MarketData.TopOfBooks();
          }
          TopOfBooks.MergeFrom(other.TopOfBooks);
          break;
        case InnerOneofCase.RateUpdates:
          if (RateUpdates == null) {
            RateUpdates = new global::Cube.MarketData.RateUpdates();
          }
          RateUpdates.MergeFrom(other.RateUpdates);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Cube.MarketData.Heartbeat subBuilder = new global::Cube.MarketData.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 18: {
            global::Cube.MarketData.TopOfBooks subBuilder = new global::Cube.MarketData.TopOfBooks();
            if (innerCase_ == InnerOneofCase.TopOfBooks) {
              subBuilder.MergeFrom(TopOfBooks);
            }
            input.ReadMessage(subBuilder);
            TopOfBooks = subBuilder;
            break;
          }
          case 26: {
            global::Cube.MarketData.RateUpdates subBuilder = new global::Cube.MarketData.RateUpdates();
            if (innerCase_ == InnerOneofCase.RateUpdates) {
              subBuilder.MergeFrom(RateUpdates);
            }
            input.ReadMessage(subBuilder);
            RateUpdates = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Cube.MarketData.Heartbeat subBuilder = new global::Cube.MarketData.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 18: {
            global::Cube.MarketData.TopOfBooks subBuilder = new global::Cube.MarketData.TopOfBooks();
            if (innerCase_ == InnerOneofCase.TopOfBooks) {
              subBuilder.MergeFrom(TopOfBooks);
            }
            input.ReadMessage(subBuilder);
            TopOfBooks = subBuilder;
            break;
          }
          case 26: {
            global::Cube.MarketData.RateUpdates subBuilder = new global::Cube.MarketData.RateUpdates();
            if (innerCase_ == InnerOneofCase.RateUpdates) {
              subBuilder.MergeFrom(RateUpdates);
            }
            input.ReadMessage(subBuilder);
            RateUpdates = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Top of book
  /// </summary>
  public sealed partial class TopOfBook : pb::IMessage<TopOfBook>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TopOfBook> _parser = new pb::MessageParser<TopOfBook>(() => new TopOfBook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopOfBook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopOfBook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopOfBook(TopOfBook other) : this() {
      marketId_ = other.marketId_;
      transactTime_ = other.transactTime_;
      bidPrice_ = other.bidPrice_;
      bidQuantity_ = other.bidQuantity_;
      askPrice_ = other.askPrice_;
      askQuantity_ = other.askQuantity_;
      lastPrice_ = other.lastPrice_;
      rolling24HPrice_ = other.rolling24HPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopOfBook Clone() {
      return new TopOfBook(this);
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 1;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 2;
    private ulong transactTime_;
    /// <summary>
    /// The [transact time](/docs/api_reference/trade#transact-time) of the latest
    /// book update on this market.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "bid_price" field.</summary>
    public const int BidPriceFieldNumber = 3;
    private ulong bidPrice_;
    /// <summary>
    /// The best bid price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "bid_quantity" field.</summary>
    public const int BidQuantityFieldNumber = 4;
    private ulong bidQuantity_;
    /// <summary>
    /// The total bid quantity at the best bid price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = value;
      }
    }

    /// <summary>Field number for the "ask_price" field.</summary>
    public const int AskPriceFieldNumber = 5;
    private ulong askPrice_;
    /// <summary>
    /// The best ask price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "ask_quantity" field.</summary>
    public const int AskQuantityFieldNumber = 6;
    private ulong askQuantity_;
    /// <summary>
    /// The total ask quantity at the best ask price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AskQuantity {
      get { return askQuantity_; }
      set {
        askQuantity_ = value;
      }
    }

    /// <summary>Field number for the "last_price" field.</summary>
    public const int LastPriceFieldNumber = 7;
    private ulong lastPrice_;
    /// <summary>
    /// The last trade price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastPrice {
      get { return lastPrice_; }
      set {
        lastPrice_ = value;
      }
    }

    /// <summary>Field number for the "rolling24h_price" field.</summary>
    public const int Rolling24HPriceFieldNumber = 8;
    private ulong rolling24HPrice_;
    /// <summary>
    /// The 24h open price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Rolling24HPrice {
      get { return rolling24HPrice_; }
      set {
        rolling24HPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopOfBook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopOfBook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketId != other.MarketId) return false;
      if (TransactTime != other.TransactTime) return false;
      if (BidPrice != other.BidPrice) return false;
      if (BidQuantity != other.BidQuantity) return false;
      if (AskPrice != other.AskPrice) return false;
      if (AskQuantity != other.AskQuantity) return false;
      if (LastPrice != other.LastPrice) return false;
      if (Rolling24HPrice != other.Rolling24HPrice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (BidPrice != 0UL) hash ^= BidPrice.GetHashCode();
      if (BidQuantity != 0UL) hash ^= BidQuantity.GetHashCode();
      if (AskPrice != 0UL) hash ^= AskPrice.GetHashCode();
      if (AskQuantity != 0UL) hash ^= AskQuantity.GetHashCode();
      if (LastPrice != 0UL) hash ^= LastPrice.GetHashCode();
      if (Rolling24HPrice != 0UL) hash ^= Rolling24HPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MarketId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MarketId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TransactTime);
      }
      if (BidPrice != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(BidPrice);
      }
      if (BidQuantity != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BidQuantity);
      }
      if (AskPrice != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(AskPrice);
      }
      if (AskQuantity != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AskQuantity);
      }
      if (LastPrice != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(LastPrice);
      }
      if (Rolling24HPrice != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Rolling24HPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MarketId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MarketId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TransactTime);
      }
      if (BidPrice != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(BidPrice);
      }
      if (BidQuantity != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BidQuantity);
      }
      if (AskPrice != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(AskPrice);
      }
      if (AskQuantity != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AskQuantity);
      }
      if (LastPrice != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(LastPrice);
      }
      if (Rolling24HPrice != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Rolling24HPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (BidPrice != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BidPrice);
      }
      if (BidQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BidQuantity);
      }
      if (AskPrice != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AskPrice);
      }
      if (AskQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AskQuantity);
      }
      if (LastPrice != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastPrice);
      }
      if (Rolling24HPrice != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rolling24HPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopOfBook other) {
      if (other == null) {
        return;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.BidPrice != 0UL) {
        BidPrice = other.BidPrice;
      }
      if (other.BidQuantity != 0UL) {
        BidQuantity = other.BidQuantity;
      }
      if (other.AskPrice != 0UL) {
        AskPrice = other.AskPrice;
      }
      if (other.AskQuantity != 0UL) {
        AskQuantity = other.AskQuantity;
      }
      if (other.LastPrice != 0UL) {
        LastPrice = other.LastPrice;
      }
      if (other.Rolling24HPrice != 0UL) {
        Rolling24HPrice = other.Rolling24HPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 16: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 24: {
            BidPrice = input.ReadUInt64();
            break;
          }
          case 32: {
            BidQuantity = input.ReadUInt64();
            break;
          }
          case 40: {
            AskPrice = input.ReadUInt64();
            break;
          }
          case 48: {
            AskQuantity = input.ReadUInt64();
            break;
          }
          case 56: {
            LastPrice = input.ReadUInt64();
            break;
          }
          case 64: {
            Rolling24HPrice = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 16: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 24: {
            BidPrice = input.ReadUInt64();
            break;
          }
          case 32: {
            BidQuantity = input.ReadUInt64();
            break;
          }
          case 40: {
            AskPrice = input.ReadUInt64();
            break;
          }
          case 48: {
            AskQuantity = input.ReadUInt64();
            break;
          }
          case 56: {
            LastPrice = input.ReadUInt64();
            break;
          }
          case 64: {
            Rolling24HPrice = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Top of books for all books that were updates since the last top-of-books
  /// message.
  /// </summary>
  public sealed partial class TopOfBooks : pb::IMessage<TopOfBooks>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TopOfBooks> _parser = new pb::MessageParser<TopOfBooks>(() => new TopOfBooks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopOfBooks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopOfBooks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopOfBooks(TopOfBooks other) : this() {
      tops_ = other.tops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopOfBooks Clone() {
      return new TopOfBooks(this);
    }

    /// <summary>Field number for the "tops" field.</summary>
    public const int TopsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.MarketData.TopOfBook> _repeated_tops_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.MarketData.TopOfBook.Parser);
    private readonly pbc::RepeatedField<global::Cube.MarketData.TopOfBook> tops_ = new pbc::RepeatedField<global::Cube.MarketData.TopOfBook>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.TopOfBook> Tops {
      get { return tops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopOfBooks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopOfBooks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tops_.Equals(other.tops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tops_.WriteTo(output, _repeated_tops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tops_.WriteTo(ref output, _repeated_tops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tops_.CalculateSize(_repeated_tops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopOfBooks other) {
      if (other == null) {
        return;
      }
      tops_.Add(other.tops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tops_.AddEntriesFrom(input, _repeated_tops_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tops_.AddEntriesFrom(ref input, _repeated_tops_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Rate update. Used in conjuction with another rate update to get the price of
  /// that divisor. Rate's should not be used alone. For example, given a
  /// RateUpdate for `assetId = BTC, updateSide = BASE` of `r1`, and `assetId =
  /// EUR, updateSide = QUOTE` of `r2`, the BTC-EUR price estimate is `r1 * r2`.
  /// </summary>
  public sealed partial class RateUpdate : pb::IMessage<RateUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RateUpdate> _parser = new pb::MessageParser<RateUpdate>(() => new RateUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateUpdate(RateUpdate other) : this() {
      assetId_ = other.assetId_;
      timestamp_ = other.timestamp_;
      rate_ = other.rate_;
      side_ = other.side_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateUpdate Clone() {
      return new RateUpdate(this);
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 1;
    private ulong assetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AssetId {
      get { return assetId_; }
      set {
        assetId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    /// <summary>
    /// The nanosecond timestamp of the update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 3;
    private ulong rate_;
    /// <summary>
    /// The asset rate at the given timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 4;
    private global::Cube.MarketData.RateUpdateSide side_ = global::Cube.MarketData.RateUpdateSide.Base;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.RateUpdateSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetId != other.AssetId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Rate != other.Rate) return false;
      if (Side != other.Side) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetId != 0UL) hash ^= AssetId.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Rate != 0UL) hash ^= Rate.GetHashCode();
      if (Side != global::Cube.MarketData.RateUpdateSide.Base) hash ^= Side.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AssetId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AssetId);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (Rate != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Rate);
      }
      if (Side != global::Cube.MarketData.RateUpdateSide.Base) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Side);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AssetId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AssetId);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (Rate != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Rate);
      }
      if (Side != global::Cube.MarketData.RateUpdateSide.Base) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Side);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AssetId);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Rate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rate);
      }
      if (Side != global::Cube.MarketData.RateUpdateSide.Base) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateUpdate other) {
      if (other == null) {
        return;
      }
      if (other.AssetId != 0UL) {
        AssetId = other.AssetId;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Rate != 0UL) {
        Rate = other.Rate;
      }
      if (other.Side != global::Cube.MarketData.RateUpdateSide.Base) {
        Side = other.Side;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AssetId = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 24: {
            Rate = input.ReadUInt64();
            break;
          }
          case 32: {
            Side = (global::Cube.MarketData.RateUpdateSide) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AssetId = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 24: {
            Rate = input.ReadUInt64();
            break;
          }
          case 32: {
            Side = (global::Cube.MarketData.RateUpdateSide) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Rates for all assets. Published on connect and updates since the last
  /// rate-updates message.
  /// </summary>
  public sealed partial class RateUpdates : pb::IMessage<RateUpdates>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RateUpdates> _parser = new pb::MessageParser<RateUpdates>(() => new RateUpdates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateUpdates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateUpdates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateUpdates(RateUpdates other) : this() {
      updates_ = other.updates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateUpdates Clone() {
      return new RateUpdates(this);
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.MarketData.RateUpdate> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.MarketData.RateUpdate.Parser);
    private readonly pbc::RepeatedField<global::Cube.MarketData.RateUpdate> updates_ = new pbc::RepeatedField<global::Cube.MarketData.RateUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.RateUpdate> Updates {
      get { return updates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateUpdates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateUpdates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!updates_.Equals(other.updates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= updates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      updates_.WriteTo(output, _repeated_updates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      updates_.WriteTo(ref output, _repeated_updates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += updates_.CalculateSize(_repeated_updates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateUpdates other) {
      if (other == null) {
        return;
      }
      updates_.Add(other.updates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            updates_.AddEntriesFrom(ref input, _repeated_updates_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Client heartbeats and configs. This wrapper is used for both
  /// `/book/:market_id` and `/tops`, but `config` messages are ignored on the
  /// latter.
  /// </summary>
  public sealed partial class ClientMessage : pb::IMessage<ClientMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientMessage> _parser = new pb::MessageParser<ClientMessage>(() => new ClientMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage(ClientMessage other) : this() {
      switch (other.InnerCase) {
        case InnerOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case InnerOneofCase.Config:
          Config = other.Config.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessage Clone() {
      return new ClientMessage(this);
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.Heartbeat Heartbeat {
      get { return innerCase_ == InnerOneofCase.Heartbeat ? (global::Cube.MarketData.Heartbeat) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.MarketData.Config Config {
      get { return innerCase_ == InnerOneofCase.Config ? (global::Cube.MarketData.Config) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Config;
      }
    }

    private object inner_;
    /// <summary>Enum of possible cases for the "inner" oneof.</summary>
    public enum InnerOneofCase {
      None = 0,
      Heartbeat = 1,
      Config = 2,
    }
    private InnerOneofCase innerCase_ = InnerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerOneofCase InnerCase {
      get { return innerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInner() {
      innerCase_ = InnerOneofCase.None;
      inner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (InnerCase != other.InnerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (innerCase_ == InnerOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (innerCase_ == InnerOneofCase.Config) hash ^= Config.GetHashCode();
      hash ^= (int) innerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(10);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Config) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(10);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Config) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientMessage other) {
      if (other == null) {
        return;
      }
      switch (other.InnerCase) {
        case InnerOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Cube.MarketData.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
        case InnerOneofCase.Config:
          if (Config == null) {
            Config = new global::Cube.MarketData.Config();
          }
          Config.MergeFrom(other.Config);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Cube.MarketData.Heartbeat subBuilder = new global::Cube.MarketData.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 18: {
            global::Cube.MarketData.Config subBuilder = new global::Cube.MarketData.Config();
            if (innerCase_ == InnerOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Cube.MarketData.Heartbeat subBuilder = new global::Cube.MarketData.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 18: {
            global::Cube.MarketData.Config subBuilder = new global::Cube.MarketData.Config();
            if (innerCase_ == InnerOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Set the message subscriptions for `/book/:market_id`. At most one of `mbp`
  /// and `mbo` can be set.
  /// </summary>
  public sealed partial class Config : pb::IMessage<Config>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.MarketData.MarketDataReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      mbp_ = other.mbp_;
      mbo_ = other.mbo_;
      trades_ = other.trades_;
      summary_ = other.summary_;
      klines_ = other.klines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "mbp" field.</summary>
    public const int MbpFieldNumber = 1;
    private bool mbp_;
    /// <summary>
    /// Enable MBP feeds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mbp {
      get { return mbp_; }
      set {
        mbp_ = value;
      }
    }

    /// <summary>Field number for the "mbo" field.</summary>
    public const int MboFieldNumber = 2;
    private bool mbo_;
    /// <summary>
    /// Enable MBO feeds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mbo {
      get { return mbo_; }
      set {
        mbo_ = value;
      }
    }

    /// <summary>Field number for the "trades" field.</summary>
    public const int TradesFieldNumber = 3;
    private bool trades_;
    /// <summary>
    /// Enable recent trades
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Trades {
      get { return trades_; }
      set {
        trades_ = value;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 4;
    private bool summary_;
    /// <summary>
    /// Enable 24h summary
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Summary {
      get { return summary_; }
      set {
        summary_ = value;
      }
    }

    /// <summary>Field number for the "klines" field.</summary>
    public const int KlinesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cube.MarketData.KlineInterval> _repeated_klines_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Cube.MarketData.KlineInterval) x);
    private readonly pbc::RepeatedField<global::Cube.MarketData.KlineInterval> klines_ = new pbc::RepeatedField<global::Cube.MarketData.KlineInterval>();
    /// <summary>
    /// Enable price klines
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.MarketData.KlineInterval> Klines {
      get { return klines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mbp != other.Mbp) return false;
      if (Mbo != other.Mbo) return false;
      if (Trades != other.Trades) return false;
      if (Summary != other.Summary) return false;
      if(!klines_.Equals(other.klines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mbp != false) hash ^= Mbp.GetHashCode();
      if (Mbo != false) hash ^= Mbo.GetHashCode();
      if (Trades != false) hash ^= Trades.GetHashCode();
      if (Summary != false) hash ^= Summary.GetHashCode();
      hash ^= klines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mbp != false) {
        output.WriteRawTag(8);
        output.WriteBool(Mbp);
      }
      if (Mbo != false) {
        output.WriteRawTag(16);
        output.WriteBool(Mbo);
      }
      if (Trades != false) {
        output.WriteRawTag(24);
        output.WriteBool(Trades);
      }
      if (Summary != false) {
        output.WriteRawTag(32);
        output.WriteBool(Summary);
      }
      klines_.WriteTo(output, _repeated_klines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mbp != false) {
        output.WriteRawTag(8);
        output.WriteBool(Mbp);
      }
      if (Mbo != false) {
        output.WriteRawTag(16);
        output.WriteBool(Mbo);
      }
      if (Trades != false) {
        output.WriteRawTag(24);
        output.WriteBool(Trades);
      }
      if (Summary != false) {
        output.WriteRawTag(32);
        output.WriteBool(Summary);
      }
      klines_.WriteTo(ref output, _repeated_klines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mbp != false) {
        size += 1 + 1;
      }
      if (Mbo != false) {
        size += 1 + 1;
      }
      if (Trades != false) {
        size += 1 + 1;
      }
      if (Summary != false) {
        size += 1 + 1;
      }
      size += klines_.CalculateSize(_repeated_klines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.Mbp != false) {
        Mbp = other.Mbp;
      }
      if (other.Mbo != false) {
        Mbo = other.Mbo;
      }
      if (other.Trades != false) {
        Trades = other.Trades;
      }
      if (other.Summary != false) {
        Summary = other.Summary;
      }
      klines_.Add(other.klines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mbp = input.ReadBool();
            break;
          }
          case 16: {
            Mbo = input.ReadBool();
            break;
          }
          case 24: {
            Trades = input.ReadBool();
            break;
          }
          case 32: {
            Summary = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            klines_.AddEntriesFrom(input, _repeated_klines_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mbp = input.ReadBool();
            break;
          }
          case 16: {
            Mbo = input.ReadBool();
            break;
          }
          case 24: {
            Trades = input.ReadBool();
            break;
          }
          case 32: {
            Summary = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            klines_.AddEntriesFrom(ref input, _repeated_klines_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
