// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: trade.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cube.Trade {

  /// <summary>Holder for reflection information generated from trade.proto</summary>
  public static partial class TradeReflection {

    #region Descriptor
    /// <summary>File descriptor for trade.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TradeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0cmFkZS5wcm90bxIFdHJhZGUiSgoLQ3JlZGVudGlhbHMSFQoNYWNjZXNz",
            "X2tleV9pZBgBIAEoCRIRCglzaWduYXR1cmUYAiABKAkSEQoJdGltZXN0YW1w",
            "GAMgASgEIssBCgxPcmRlclJlcXVlc3QSHgoDbmV3GAEgASgLMg8udHJhZGUu",
            "TmV3T3JkZXJIABIkCgZjYW5jZWwYAiABKAsyEi50cmFkZS5DYW5jZWxPcmRl",
            "ckgAEiQKBm1vZGlmeRgDIAEoCzISLnRyYWRlLk1vZGlmeU9yZGVySAASJQoJ",
            "aGVhcnRiZWF0GAQgASgLMhAudHJhZGUuSGVhcnRiZWF0SAASHwoCbWMYBSAB",
            "KAsyES50cmFkZS5NYXNzQ2FuY2VsSABCBwoFaW5uZXIimQMKCE5ld09yZGVy",
            "EhcKD2NsaWVudF9vcmRlcl9pZBgBIAEoBBISCgpyZXF1ZXN0X2lkGAIgASgE",
            "EhEKCW1hcmtldF9pZBgDIAEoBBISCgVwcmljZRgEIAEoBEgAiAEBEhAKCHF1",
            "YW50aXR5GAUgASgEEhkKBHNpZGUYBiABKA4yCy50cmFkZS5TaWRlEikKDXRp",
            "bWVfaW5fZm9yY2UYByABKA4yEi50cmFkZS5UaW1lSW5Gb3JjZRIkCgpvcmRl",
            "cl90eXBlGAggASgOMhAudHJhZGUuT3JkZXJUeXBlEhUKDXN1YmFjY291bnRf",
            "aWQYCSABKAQSPgoVc2VsZl90cmFkZV9wcmV2ZW50aW9uGAogASgOMhoudHJh",
            "ZGUuU2VsZlRyYWRlUHJldmVudGlvbkgBiAEBEiIKCXBvc3Rfb25seRgLIAEo",
            "DjIPLnRyYWRlLlBvc3RPbmx5EhwKFGNhbmNlbF9vbl9kaXNjb25uZWN0GAwg",
            "ASgIQggKBl9wcmljZUIYChZfc2VsZl90cmFkZV9wcmV2ZW50aW9uImQKC0Nh",
            "bmNlbE9yZGVyEhEKCW1hcmtldF9pZBgBIAEoBBIXCg9jbGllbnRfb3JkZXJf",
            "aWQYAiABKAQSEgoKcmVxdWVzdF9pZBgDIAEoBBIVCg1zdWJhY2NvdW50X2lk",
            "GAQgASgEIosCCgtNb2RpZnlPcmRlchIRCgltYXJrZXRfaWQYASABKAQSFwoP",
            "Y2xpZW50X29yZGVyX2lkGAIgASgEEhIKCnJlcXVlc3RfaWQYAyABKAQSEQoJ",
            "bmV3X3ByaWNlGAQgASgEEhQKDG5ld19xdWFudGl0eRgFIAEoBBIVCg1zdWJh",
            "Y2NvdW50X2lkGAYgASgEEj4KFXNlbGZfdHJhZGVfcHJldmVudGlvbhgHIAEo",
            "DjIaLnRyYWRlLlNlbGZUcmFkZVByZXZlbnRpb25IAIgBARIiCglwb3N0X29u",
            "bHkYCCABKA4yDy50cmFkZS5Qb3N0T25seUIYChZfc2VsZl90cmFkZV9wcmV2",
            "ZW50aW9uIoYBCgpNYXNzQ2FuY2VsEhUKDXN1YmFjY291bnRfaWQYASABKAQS",
            "EgoKcmVxdWVzdF9pZBgCIAEoBBIWCgltYXJrZXRfaWQYAyABKARIAIgBARIe",
            "CgRzaWRlGAQgASgOMgsudHJhZGUuU2lkZUgBiAEBQgwKCl9tYXJrZXRfaWRC",
            "BwoFX3NpZGUiMgoJSGVhcnRiZWF0EhIKCnJlcXVlc3RfaWQYASABKAQSEQoJ",
            "dGltZXN0YW1wGAIgASgEIssDCg1PcmRlclJlc3BvbnNlEiUKB25ld19hY2sY",
            "ASABKAsyEi50cmFkZS5OZXdPcmRlckFja0gAEisKCmNhbmNlbF9hY2sYAiAB",
            "KAsyFS50cmFkZS5DYW5jZWxPcmRlckFja0gAEisKCm1vZGlmeV9hY2sYAyAB",
            "KAsyFS50cmFkZS5Nb2RpZnlPcmRlckFja0gAEisKCm5ld19yZWplY3QYBCAB",
            "KAsyFS50cmFkZS5OZXdPcmRlclJlamVjdEgAEjEKDWNhbmNlbF9yZWplY3QY",
            "BSABKAsyGC50cmFkZS5DYW5jZWxPcmRlclJlamVjdEgAEjEKDW1vZGlmeV9y",
            "ZWplY3QYBiABKAsyGC50cmFkZS5Nb2RpZnlPcmRlclJlamVjdEgAEhsKBGZp",
            "bGwYByABKAsyCy50cmFkZS5GaWxsSAASJQoJaGVhcnRiZWF0GAggASgLMhAu",
            "dHJhZGUuSGVhcnRiZWF0SAASKAoIcG9zaXRpb24YCSABKAsyFC50cmFkZS5B",
            "c3NldFBvc2l0aW9uSAASLwoPbWFzc19jYW5jZWxfYWNrGAogASgLMhQudHJh",
            "ZGUuTWFzc0NhbmNlbEFja0gAQgcKBWlubmVyIuUCCgtOZXdPcmRlckFjaxIT",
            "Cgttc2dfc2VxX251bRgBIAEoBBIXCg9jbGllbnRfb3JkZXJfaWQYAiABKAQS",
            "EgoKcmVxdWVzdF9pZBgDIAEoBBIZChFleGNoYW5nZV9vcmRlcl9pZBgEIAEo",
            "BBIRCgltYXJrZXRfaWQYBSABKAQSEgoFcHJpY2UYBiABKARIAIgBARIQCghx",
            "dWFudGl0eRgHIAEoBBIZCgRzaWRlGAggASgOMgsudHJhZGUuU2lkZRIpCg10",
            "aW1lX2luX2ZvcmNlGAkgASgOMhIudHJhZGUuVGltZUluRm9yY2USJAoKb3Jk",
            "ZXJfdHlwZRgKIAEoDjIQLnRyYWRlLk9yZGVyVHlwZRIVCg10cmFuc2FjdF90",
            "aW1lGAsgASgEEhUKDXN1YmFjY291bnRfaWQYDCABKAQSHAoUY2FuY2VsX29u",
            "X2Rpc2Nvbm5lY3QYDSABKAhCCAoGX3ByaWNlIrsCCg5DYW5jZWxPcmRlckFj",
            "axITCgttc2dfc2VxX251bRgBIAEoBBIXCg9jbGllbnRfb3JkZXJfaWQYAiAB",
            "KAQSEgoKcmVxdWVzdF9pZBgDIAEoBBIVCg10cmFuc2FjdF90aW1lGAQgASgE",
            "EhUKDXN1YmFjY291bnRfaWQYBSABKAQSLAoGcmVhc29uGAYgASgOMhwudHJh",
            "ZGUuQ2FuY2VsT3JkZXJBY2suUmVhc29uEhEKCW1hcmtldF9pZBgHIAEoBCJ4",
            "CgZSZWFzb24SEAoMVU5DTEFTU0lGSUVEEAASDgoKRElTQ09OTkVDVBABEg0K",
            "CVJFUVVFU1RFRBACEgcKA0lPQxADEg8KC1NUUF9SRVNUSU5HEAQSEgoOU1RQ",
            "X0FHR1JFU1NJTkcQBRIPCgtNQVNTX0NBTkNFTBAGIu0BCg5Nb2RpZnlPcmRl",
            "ckFjaxITCgttc2dfc2VxX251bRgBIAEoBBIXCg9jbGllbnRfb3JkZXJfaWQY",
            "AiABKAQSEgoKcmVxdWVzdF9pZBgDIAEoBBIVCg10cmFuc2FjdF90aW1lGAQg",
            "ASgEEhoKEnJlbWFpbmluZ19xdWFudGl0eRgFIAEoBBIVCg1zdWJhY2NvdW50",
            "X2lkGAYgASgEEhEKCW1hcmtldF9pZBgHIAEoBBINCgVwcmljZRgIIAEoBBIQ",
            "CghxdWFudGl0eRgJIAEoBBIbChNjdW11bGF0aXZlX3F1YW50aXR5GAogASgE",
            "IocCCg1NYXNzQ2FuY2VsQWNrEhMKC21zZ19zZXFfbnVtGAEgASgEEhUKDXN1",
            "YmFjY291bnRfaWQYAiABKAQSEgoKcmVxdWVzdF9pZBgDIAEoBBIVCg10cmFu",
            "c2FjdF90aW1lGAQgASgEEjAKBnJlYXNvbhgGIAEoDjIbLnRyYWRlLk1hc3ND",
            "YW5jZWxBY2suUmVhc29uSACIAQESHQoVdG90YWxfYWZmZWN0ZWRfb3JkZXJz",
            "GAcgASgNIkMKBlJlYXNvbhIQCgxVTkNMQVNTSUZJRUQQABIVChFJTlZBTElE",
            "X01BUktFVF9JRBABEhAKDElOVkFMSURfU0lERRACQgkKB19yZWFzb24inAYK",
            "Dk5ld09yZGVyUmVqZWN0EhMKC21zZ19zZXFfbnVtGAEgASgEEhcKD2NsaWVu",
            "dF9vcmRlcl9pZBgCIAEoBBISCgpyZXF1ZXN0X2lkGAMgASgEEhUKDXRyYW5z",
            "YWN0X3RpbWUYBCABKAQSFQoNc3ViYWNjb3VudF9pZBgFIAEoBBIsCgZyZWFz",
            "b24YBiABKA4yHC50cmFkZS5OZXdPcmRlclJlamVjdC5SZWFzb24SEQoJbWFy",
            "a2V0X2lkGAcgASgEEhIKBXByaWNlGAggASgESACIAQESEAoIcXVhbnRpdHkY",
            "CSABKAQSGQoEc2lkZRgKIAEoDjILLnRyYWRlLlNpZGUSKQoNdGltZV9pbl9m",
            "b3JjZRgLIAEoDjISLnRyYWRlLlRpbWVJbkZvcmNlEiQKCm9yZGVyX3R5cGUY",
            "DCABKA4yEC50cmFkZS5PcmRlclR5cGUivAMKBlJlYXNvbhIQCgxVTkNMQVNT",
            "SUZJRUQQABIUChBJTlZBTElEX1FVQU5USVRZEAESFQoRSU5WQUxJRF9NQVJL",
            "RVRfSUQQAhIWChJEVVBMSUNBVEVfT1JERVJfSUQQAxIQCgxJTlZBTElEX1NJ",
            "REUQBBIZChVJTlZBTElEX1RJTUVfSU5fRk9SQ0UQBRIWChJJTlZBTElEX09S",
            "REVSX1RZUEUQBhIVChFJTlZBTElEX1BPU1RfT05MWRAHEiEKHUlOVkFMSURf",
            "U0VMRl9UUkFERV9QUkVWRU5USU9OEAgSEgoOVU5LTk9XTl9UUkFERVIQCRIb",
            "ChdQUklDRV9XSVRIX01BUktFVF9PUkRFUhAKEh8KG1BPU1RfT05MWV9XSVRI",
            "X01BUktFVF9PUkRFUhALEh4KGlBPU1RfT05MWV9XSVRIX0lOVkFMSURfVElG",
            "EAwSGgoWRVhDRUVERURfU1BPVF9QT1NJVElPThANEhsKF05PX09QUE9TSU5H",
            "X0xJTUlUX09SREVSEA4SGQoVUE9TVF9PTkxZX1dPVUxEX1RSQURFEA8SFgoS",
            "RElEX05PVF9GVUxMWV9GSUxMEBBCCAoGX3ByaWNlIo8CChFDYW5jZWxPcmRl",
            "clJlamVjdBITCgttc2dfc2VxX251bRgBIAEoBBIXCg9jbGllbnRfb3JkZXJf",
            "aWQYAiABKAQSEgoKcmVxdWVzdF9pZBgDIAEoBBIVCg10cmFuc2FjdF90aW1l",
            "GAQgASgEEhUKDXN1YmFjY291bnRfaWQYBSABKAQSLwoGcmVhc29uGAYgASgO",
            "Mh8udHJhZGUuQ2FuY2VsT3JkZXJSZWplY3QuUmVhc29uEhEKCW1hcmtldF9p",
            "ZBgHIAEoBCJGCgZSZWFzb24SEAoMVU5DTEFTU0lGSUVEEAASFQoRSU5WQUxJ",
            "RF9NQVJLRVRfSUQQARITCg9PUkRFUl9OT1RfRk9VTkQQAiK8AwoRTW9kaWZ5",
            "T3JkZXJSZWplY3QSEwoLbXNnX3NlcV9udW0YASABKAQSFwoPY2xpZW50X29y",
            "ZGVyX2lkGAIgASgEEhIKCnJlcXVlc3RfaWQYAyABKAQSFQoNdHJhbnNhY3Rf",
            "dGltZRgEIAEoBBIVCg1zdWJhY2NvdW50X2lkGAUgASgEEi8KBnJlYXNvbhgG",
            "IAEoDjIfLnRyYWRlLk1vZGlmeU9yZGVyUmVqZWN0LlJlYXNvbhIRCgltYXJr",
            "ZXRfaWQYByABKAQi8gEKBlJlYXNvbhIQCgxVTkNMQVNTSUZJRUQQABIUChBJ",
            "TlZBTElEX1FVQU5USVRZEAESFQoRSU5WQUxJRF9NQVJLRVRfSUQQAhITCg9P",
            "UkRFUl9OT1RfRk9VTkQQAxIPCgtJTlZBTElEX0lGTRAEEhUKEUlOVkFMSURf",
            "UE9TVF9PTkxZEAUSIQodSU5WQUxJRF9TRUxGX1RSQURFX1BSRVZFTlRJT04Q",
            "BhISCg5VTktOT1dOX1RSQURFUhAHEhoKFkVYQ0VFREVEX1NQT1RfUE9TSVRJ",
            "T04QCBIZChVQT1NUX09OTFlfV09VTERfVFJBREUQCSLxAQoERmlsbBITCgtt",
            "c2dfc2VxX251bRgBIAEoBBIRCgltYXJrZXRfaWQYAiABKAQSFwoPY2xpZW50",
            "X29yZGVyX2lkGAMgASgEEhkKEWV4Y2hhbmdlX29yZGVyX2lkGAQgASgEEhIK",
            "CmZpbGxfcHJpY2UYBSABKAQSFQoNZmlsbF9xdWFudGl0eRgGIAEoBBIXCg9s",
            "ZWF2ZXNfcXVhbnRpdHkYByABKAQSFQoNdHJhbnNhY3RfdGltZRgIIAEoBBIV",
            "Cg1zdWJhY2NvdW50X2lkGAkgASgEEhsKE2N1bXVsYXRpdmVfcXVhbnRpdHkY",
            "CiABKAQifAoNQXNzZXRQb3NpdGlvbhIVCg1zdWJhY2NvdW50X2lkGAEgASgE",
            "EhAKCGFzc2V0X2lkGAIgASgEEh4KBXRvdGFsGAMgASgLMg8udHJhZGUuUmF3",
            "VW5pdHMSIgoJYXZhaWxhYmxlGAQgASgLMg8udHJhZGUuUmF3VW5pdHMiRgoI",
            "UmF3VW5pdHMSDQoFd29yZDAYASABKAQSDQoFd29yZDEYAiABKAQSDQoFd29y",
            "ZDIYAyABKAQSDQoFd29yZDMYBCABKAQihQEKCUJvb3RzdHJhcBIbCgRkb25l",
            "GAEgASgLMgsudHJhZGUuRG9uZUgAEicKB3Jlc3RpbmcYAiABKAsyFC50cmFk",
            "ZS5SZXN0aW5nT3JkZXJzSAASKQoIcG9zaXRpb24YAyABKAsyFS50cmFkZS5B",
            "c3NldFBvc2l0aW9uc0gAQgcKBWlubmVyIjQKDVJlc3RpbmdPcmRlcnMSIwoG",
            "b3JkZXJzGAEgAygLMhMudHJhZGUuUmVzdGluZ09yZGVyIjkKDkFzc2V0UG9z",
            "aXRpb25zEicKCXBvc2l0aW9ucxgBIAMoCzIULnRyYWRlLkFzc2V0UG9zaXRp",
            "b24iJAoERG9uZRIcChRsYXRlc3RfdHJhbnNhY3RfdGltZRgBIAEoBCLLAgoM",
            "UmVzdGluZ09yZGVyEhcKD2NsaWVudF9vcmRlcl9pZBgBIAEoBBIZChFleGNo",
            "YW5nZV9vcmRlcl9pZBgCIAEoBBIRCgltYXJrZXRfaWQYAyABKAQSDQoFcHJp",
            "Y2UYBCABKAQSFgoOb3JkZXJfcXVhbnRpdHkYBSABKAQSGQoEc2lkZRgGIAEo",
            "DjILLnRyYWRlLlNpZGUSKQoNdGltZV9pbl9mb3JjZRgHIAEoDjISLnRyYWRl",
            "LlRpbWVJbkZvcmNlEiQKCm9yZGVyX3R5cGUYCCABKA4yEC50cmFkZS5PcmRl",
            "clR5cGUSGgoScmVtYWluaW5nX3F1YW50aXR5GAkgASgEEhEKCXJlc3RfdGlt",
            "ZRgKIAEoBBIVCg1zdWJhY2NvdW50X2lkGAsgASgEEhsKE2N1bXVsYXRpdmVf",
            "cXVhbnRpdHkYDCABKAQqGAoEU2lkZRIHCgNCSUQQABIHCgNBU0sQASpOCgtU",
            "aW1lSW5Gb3JjZRIXChNJTU1FRElBVEVfT1JfQ0FOQ0VMEAASFAoQR09PRF9G",
            "T1JfU0VTU0lPThABEhAKDEZJTExfT1JfS0lMTBACKkQKCU9yZGVyVHlwZRIJ",
            "CgVMSU1JVBAAEhAKDE1BUktFVF9MSU1JVBABEhoKFk1BUktFVF9XSVRIX1BS",
            "T1RFQ1RJT04QAipWChNTZWxmVHJhZGVQcmV2ZW50aW9uEhIKDkNBTkNFTF9S",
            "RVNUSU5HEAASFQoRQ0FOQ0VMX0FHR1JFU1NJTkcQARIUChBBTExPV19TRUxG",
            "X1RSQURFEAIqJQoIUG9zdE9ubHkSDAoIRElTQUJMRUQQABILCgdFTkFCTEVE",
            "EAFCEloDZ28vqgIKQ3ViZS5UcmFkZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cube.Trade.Side), typeof(global::Cube.Trade.TimeInForce), typeof(global::Cube.Trade.OrderType), typeof(global::Cube.Trade.SelfTradePrevention), typeof(global::Cube.Trade.PostOnly), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.Credentials), global::Cube.Trade.Credentials.Parser, new[]{ "AccessKeyId", "Signature", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.OrderRequest), global::Cube.Trade.OrderRequest.Parser, new[]{ "New", "Cancel", "Modify", "Heartbeat", "Mc" }, new[]{ "Inner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.NewOrder), global::Cube.Trade.NewOrder.Parser, new[]{ "ClientOrderId", "RequestId", "MarketId", "Price", "Quantity", "Side", "TimeInForce", "OrderType", "SubaccountId", "SelfTradePrevention", "PostOnly", "CancelOnDisconnect" }, new[]{ "Price", "SelfTradePrevention" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.CancelOrder), global::Cube.Trade.CancelOrder.Parser, new[]{ "MarketId", "ClientOrderId", "RequestId", "SubaccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.ModifyOrder), global::Cube.Trade.ModifyOrder.Parser, new[]{ "MarketId", "ClientOrderId", "RequestId", "NewPrice", "NewQuantity", "SubaccountId", "SelfTradePrevention", "PostOnly" }, new[]{ "SelfTradePrevention" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.MassCancel), global::Cube.Trade.MassCancel.Parser, new[]{ "SubaccountId", "RequestId", "MarketId", "Side" }, new[]{ "MarketId", "Side" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.Heartbeat), global::Cube.Trade.Heartbeat.Parser, new[]{ "RequestId", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.OrderResponse), global::Cube.Trade.OrderResponse.Parser, new[]{ "NewAck", "CancelAck", "ModifyAck", "NewReject", "CancelReject", "ModifyReject", "Fill", "Heartbeat", "Position", "MassCancelAck" }, new[]{ "Inner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.NewOrderAck), global::Cube.Trade.NewOrderAck.Parser, new[]{ "MsgSeqNum", "ClientOrderId", "RequestId", "ExchangeOrderId", "MarketId", "Price", "Quantity", "Side", "TimeInForce", "OrderType", "TransactTime", "SubaccountId", "CancelOnDisconnect" }, new[]{ "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.CancelOrderAck), global::Cube.Trade.CancelOrderAck.Parser, new[]{ "MsgSeqNum", "ClientOrderId", "RequestId", "TransactTime", "SubaccountId", "Reason", "MarketId" }, null, new[]{ typeof(global::Cube.Trade.CancelOrderAck.Types.Reason) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.ModifyOrderAck), global::Cube.Trade.ModifyOrderAck.Parser, new[]{ "MsgSeqNum", "ClientOrderId", "RequestId", "TransactTime", "RemainingQuantity", "SubaccountId", "MarketId", "Price", "Quantity", "CumulativeQuantity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.MassCancelAck), global::Cube.Trade.MassCancelAck.Parser, new[]{ "MsgSeqNum", "SubaccountId", "RequestId", "TransactTime", "Reason", "TotalAffectedOrders" }, new[]{ "Reason" }, new[]{ typeof(global::Cube.Trade.MassCancelAck.Types.Reason) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.NewOrderReject), global::Cube.Trade.NewOrderReject.Parser, new[]{ "MsgSeqNum", "ClientOrderId", "RequestId", "TransactTime", "SubaccountId", "Reason", "MarketId", "Price", "Quantity", "Side", "TimeInForce", "OrderType" }, new[]{ "Price" }, new[]{ typeof(global::Cube.Trade.NewOrderReject.Types.Reason) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.CancelOrderReject), global::Cube.Trade.CancelOrderReject.Parser, new[]{ "MsgSeqNum", "ClientOrderId", "RequestId", "TransactTime", "SubaccountId", "Reason", "MarketId" }, null, new[]{ typeof(global::Cube.Trade.CancelOrderReject.Types.Reason) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.ModifyOrderReject), global::Cube.Trade.ModifyOrderReject.Parser, new[]{ "MsgSeqNum", "ClientOrderId", "RequestId", "TransactTime", "SubaccountId", "Reason", "MarketId" }, null, new[]{ typeof(global::Cube.Trade.ModifyOrderReject.Types.Reason) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.Fill), global::Cube.Trade.Fill.Parser, new[]{ "MsgSeqNum", "MarketId", "ClientOrderId", "ExchangeOrderId", "FillPrice", "FillQuantity", "LeavesQuantity", "TransactTime", "SubaccountId", "CumulativeQuantity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.AssetPosition), global::Cube.Trade.AssetPosition.Parser, new[]{ "SubaccountId", "AssetId", "Total", "Available" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.RawUnits), global::Cube.Trade.RawUnits.Parser, new[]{ "Word0", "Word1", "Word2", "Word3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.Bootstrap), global::Cube.Trade.Bootstrap.Parser, new[]{ "Done", "Resting", "Position" }, new[]{ "Inner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.RestingOrders), global::Cube.Trade.RestingOrders.Parser, new[]{ "Orders" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.AssetPositions), global::Cube.Trade.AssetPositions.Parser, new[]{ "Positions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.Done), global::Cube.Trade.Done.Parser, new[]{ "LatestTransactTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cube.Trade.RestingOrder), global::Cube.Trade.RestingOrder.Parser, new[]{ "ClientOrderId", "ExchangeOrderId", "MarketId", "Price", "OrderQuantity", "Side", "TimeInForce", "OrderType", "RemainingQuantity", "RestTime", "SubaccountId", "CumulativeQuantity" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Side specifies whether the order is buying or selling the base asset. A trade
  /// is matched when a buyer (BID) and a seller (ASK) agree on a price (cross).
  /// The bid-ask spread is the gap between the highest bid price and lowest ask
  /// price on the orderbook.
  /// </summary>
  public enum Side {
    /// <summary>
    /// A bid order buys the base asset with the quote asset.
    /// </summary>
    [pbr::OriginalName("BID")] Bid = 0,
    /// <summary>
    /// An ask (or offer) order sells the base asset and gets the quote asset.
    /// </summary>
    [pbr::OriginalName("ASK")] Ask = 1,
  }

  /// <summary>
  /// Time-in-force (TIF) specifies how long the order remains in effect.
  /// </summary>
  public enum TimeInForce {
    /// <summary>
    /// Immediate-or-cancel (IOC), also known as fill-and-kill (FAK), orders are
    /// immediately executed against resting orders. If the order cannot be fully
    /// filled, the remaining balance will be canceled, and an additional
    /// CancelOrderAck with the IOC reason will be sent.
    /// </summary>
    [pbr::OriginalName("IMMEDIATE_OR_CANCEL")] ImmediateOrCancel = 0,
    /// <summary>
    /// Good-for-session (GFS) orders are active until they are completely
    /// executed, canceled, or when the session expires.
    /// </summary>
    [pbr::OriginalName("GOOD_FOR_SESSION")] GoodForSession = 1,
    /// <summary>
    /// Fill-or-kill (FOK), also known as all-or-none (AON), orders must be filled
    /// immediately against resting orders or the entire order is canceled.
    /// </summary>
    [pbr::OriginalName("FILL_OR_KILL")] FillOrKill = 2,
  }

  /// <summary>
  /// Order-type specifies how the order will be placed into the order book.
  /// </summary>
  public enum OrderType {
    /// <summary>
    /// A limit order is accompanied with a price (inclusive) that specifies the
    /// upper limit to buy and the lower limit to sell. If the price is not
    /// immediately available and the TIF allows resting orders, the limit order
    /// will rest until filled or canceled.
    /// </summary>
    [pbr::OriginalName("LIMIT")] Limit = 0,
    /// <summary>
    /// A market limit order crosses the bid-ask spread and, if not fully filled,
    /// becomes a limit order at the best available market price. If there is no
    /// opposing market, the order is rejected with the NO_OPPOSING_LIMIT_ORDER
    /// reason. Price must be null.
    /// </summary>
    [pbr::OriginalName("MARKET_LIMIT")] MarketLimit = 1,
    /// <summary>
    /// A market with protection order crosses the bid-ask spread and continues to
    /// cross until the order is fully filled or the price protection level,
    /// defined by the best market price widened by a market-specific protection
    /// point count, is reached. If there is no opposing market, the order is
    /// rejected with the NO_OPPOSING_LIMIT_ORDER reason. Price must be null.
    /// </summary>
    [pbr::OriginalName("MARKET_WITH_PROTECTION")] MarketWithProtection = 2,
  }

  /// <summary>
  /// Self-trade-prevention (STP) allows market participants to prevent the matching
  /// of orders for accounts with common ownership. Currently, STP only applies for
  /// orders with the same subaccount_id. STP will only be applied when a match is
  /// about to occur between the two orders. That is, if the aggressing order is
  /// fully filled before reaching the resting order in FIFO order, no STP cancels
  /// will happen.
  /// </summary>
  public enum SelfTradePrevention {
    /// <summary>
    /// Cancel-resting specifies that if a self-trade is about to occur, the
    /// resting order should be canceled instead and further order book processing
    /// should occur as normal.
    /// </summary>
    [pbr::OriginalName("CANCEL_RESTING")] CancelResting = 0,
    /// <summary>
    /// Cancel-aggressing specifies that if a self-trade is about to occur, the
    /// aggressing order should be canceled instead and no further action should be
    /// taken.
    /// </summary>
    [pbr::OriginalName("CANCEL_AGGRESSING")] CancelAggressing = 1,
    /// <summary>
    /// Allow-self-trade disables STP functionality.
    /// </summary>
    [pbr::OriginalName("ALLOW_SELF_TRADE")] AllowSelfTrade = 2,
  }

  /// <summary>
  /// Post-only specifies whether a new order is allowed to immediately execute.
  /// Post-only cannot be enabled with market orders or with a TIF that does not
  /// allow resting orders.
  /// </summary>
  public enum PostOnly {
    [pbr::OriginalName("DISABLED")] Disabled = 0,
    [pbr::OriginalName("ENABLED")] Enabled = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Sent by client on websocket initialization. Once the websocket has been
  /// connected, the client is expected to send this credentials message
  /// immediately. The API key (UUID) and secret access key (hex-encoded 32-byte
  /// array) should be generated on the settings page with the write access. The
  /// signature should be calculated as the concatenation of the byte string
  /// `cube.xyz` and the current unix epoch in seconds interpreted at a
  /// little-endian 64-bit number. For example:
  ///
  /// ```rust compile_fail
  /// use hmac::{Hmac, Mac, NewMac};
  /// use std::time::SystemTime;
  ///
  /// let secret_key = [...];
  ///
  /// let timestamp = SystemTime::now()
  ///     .duration_since(SystemTime::UNIX_EPOCH)
  ///     .expect("clock went backwords")
  ///     .as_secs();
  ///
  /// let mut mac = Hmac::&lt;sha2::Sha256>::new_from_slice(
  ///     secret_key
  /// ).expect("new HMAC error");
  /// mac.update(b"cube.xyz");
  /// mac.update(&amp;timestamp.to_le_bytes());
  /// let signature = &lt;[u8; 32]>::from(mac.finalize().into_bytes());
  /// ```
  /// </summary>
  public sealed partial class Credentials : pb::IMessage<Credentials>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Credentials> _parser = new pb::MessageParser<Credentials>(() => new Credentials());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Credentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials(Credentials other) : this() {
      accessKeyId_ = other.accessKeyId_;
      signature_ = other.signature_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials Clone() {
      return new Credentials(this);
    }

    /// <summary>Field number for the "access_key_id" field.</summary>
    public const int AccessKeyIdFieldNumber = 1;
    private string accessKeyId_ = "";
    /// <summary>
    /// Public API key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessKeyId {
      get { return accessKeyId_; }
      set {
        accessKeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private string signature_ = "";
    /// <summary>
    /// HMAC signature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private ulong timestamp_;
    /// <summary>
    /// Timestamp in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Credentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Credentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessKeyId != other.AccessKeyId) return false;
      if (Signature != other.Signature) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessKeyId.Length != 0) hash ^= AccessKeyId.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AccessKeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessKeyId);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Signature);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AccessKeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessKeyId);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Signature);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessKeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessKeyId);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Credentials other) {
      if (other == null) {
        return;
      }
      if (other.AccessKeyId.Length != 0) {
        AccessKeyId = other.AccessKeyId;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessKeyId = input.ReadString();
            break;
          }
          case 18: {
            Signature = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AccessKeyId = input.ReadString();
            break;
          }
          case 18: {
            Signature = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Every client message, aside from Credentials, must be wrapped as an
  /// OrderRequest.
  /// </summary>
  public sealed partial class OrderRequest : pb::IMessage<OrderRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderRequest> _parser = new pb::MessageParser<OrderRequest>(() => new OrderRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRequest(OrderRequest other) : this() {
      switch (other.InnerCase) {
        case InnerOneofCase.New:
          New = other.New.Clone();
          break;
        case InnerOneofCase.Cancel:
          Cancel = other.Cancel.Clone();
          break;
        case InnerOneofCase.Modify:
          Modify = other.Modify.Clone();
          break;
        case InnerOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case InnerOneofCase.Mc:
          Mc = other.Mc.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRequest Clone() {
      return new OrderRequest(this);
    }

    /// <summary>Field number for the "new" field.</summary>
    public const int NewFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.NewOrder New {
      get { return innerCase_ == InnerOneofCase.New ? (global::Cube.Trade.NewOrder) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.New;
      }
    }

    /// <summary>Field number for the "cancel" field.</summary>
    public const int CancelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.CancelOrder Cancel {
      get { return innerCase_ == InnerOneofCase.Cancel ? (global::Cube.Trade.CancelOrder) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Cancel;
      }
    }

    /// <summary>Field number for the "modify" field.</summary>
    public const int ModifyFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.ModifyOrder Modify {
      get { return innerCase_ == InnerOneofCase.Modify ? (global::Cube.Trade.ModifyOrder) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Modify;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Heartbeat Heartbeat {
      get { return innerCase_ == InnerOneofCase.Heartbeat ? (global::Cube.Trade.Heartbeat) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "mc" field.</summary>
    public const int McFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.MassCancel Mc {
      get { return innerCase_ == InnerOneofCase.Mc ? (global::Cube.Trade.MassCancel) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Mc;
      }
    }

    private object inner_;
    /// <summary>Enum of possible cases for the "inner" oneof.</summary>
    public enum InnerOneofCase {
      None = 0,
      New = 1,
      Cancel = 2,
      Modify = 3,
      Heartbeat = 4,
      Mc = 5,
    }
    private InnerOneofCase innerCase_ = InnerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerOneofCase InnerCase {
      get { return innerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInner() {
      innerCase_ = InnerOneofCase.None;
      inner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(New, other.New)) return false;
      if (!object.Equals(Cancel, other.Cancel)) return false;
      if (!object.Equals(Modify, other.Modify)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(Mc, other.Mc)) return false;
      if (InnerCase != other.InnerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (innerCase_ == InnerOneofCase.New) hash ^= New.GetHashCode();
      if (innerCase_ == InnerOneofCase.Cancel) hash ^= Cancel.GetHashCode();
      if (innerCase_ == InnerOneofCase.Modify) hash ^= Modify.GetHashCode();
      if (innerCase_ == InnerOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (innerCase_ == InnerOneofCase.Mc) hash ^= Mc.GetHashCode();
      hash ^= (int) innerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (innerCase_ == InnerOneofCase.New) {
        output.WriteRawTag(10);
        output.WriteMessage(New);
      }
      if (innerCase_ == InnerOneofCase.Cancel) {
        output.WriteRawTag(18);
        output.WriteMessage(Cancel);
      }
      if (innerCase_ == InnerOneofCase.Modify) {
        output.WriteRawTag(26);
        output.WriteMessage(Modify);
      }
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(34);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Mc) {
        output.WriteRawTag(42);
        output.WriteMessage(Mc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (innerCase_ == InnerOneofCase.New) {
        output.WriteRawTag(10);
        output.WriteMessage(New);
      }
      if (innerCase_ == InnerOneofCase.Cancel) {
        output.WriteRawTag(18);
        output.WriteMessage(Cancel);
      }
      if (innerCase_ == InnerOneofCase.Modify) {
        output.WriteRawTag(26);
        output.WriteMessage(Modify);
      }
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(34);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Mc) {
        output.WriteRawTag(42);
        output.WriteMessage(Mc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (innerCase_ == InnerOneofCase.New) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(New);
      }
      if (innerCase_ == InnerOneofCase.Cancel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cancel);
      }
      if (innerCase_ == InnerOneofCase.Modify) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Modify);
      }
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Mc) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderRequest other) {
      if (other == null) {
        return;
      }
      switch (other.InnerCase) {
        case InnerOneofCase.New:
          if (New == null) {
            New = new global::Cube.Trade.NewOrder();
          }
          New.MergeFrom(other.New);
          break;
        case InnerOneofCase.Cancel:
          if (Cancel == null) {
            Cancel = new global::Cube.Trade.CancelOrder();
          }
          Cancel.MergeFrom(other.Cancel);
          break;
        case InnerOneofCase.Modify:
          if (Modify == null) {
            Modify = new global::Cube.Trade.ModifyOrder();
          }
          Modify.MergeFrom(other.Modify);
          break;
        case InnerOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Cube.Trade.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
        case InnerOneofCase.Mc:
          if (Mc == null) {
            Mc = new global::Cube.Trade.MassCancel();
          }
          Mc.MergeFrom(other.Mc);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Cube.Trade.NewOrder subBuilder = new global::Cube.Trade.NewOrder();
            if (innerCase_ == InnerOneofCase.New) {
              subBuilder.MergeFrom(New);
            }
            input.ReadMessage(subBuilder);
            New = subBuilder;
            break;
          }
          case 18: {
            global::Cube.Trade.CancelOrder subBuilder = new global::Cube.Trade.CancelOrder();
            if (innerCase_ == InnerOneofCase.Cancel) {
              subBuilder.MergeFrom(Cancel);
            }
            input.ReadMessage(subBuilder);
            Cancel = subBuilder;
            break;
          }
          case 26: {
            global::Cube.Trade.ModifyOrder subBuilder = new global::Cube.Trade.ModifyOrder();
            if (innerCase_ == InnerOneofCase.Modify) {
              subBuilder.MergeFrom(Modify);
            }
            input.ReadMessage(subBuilder);
            Modify = subBuilder;
            break;
          }
          case 34: {
            global::Cube.Trade.Heartbeat subBuilder = new global::Cube.Trade.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 42: {
            global::Cube.Trade.MassCancel subBuilder = new global::Cube.Trade.MassCancel();
            if (innerCase_ == InnerOneofCase.Mc) {
              subBuilder.MergeFrom(Mc);
            }
            input.ReadMessage(subBuilder);
            Mc = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Cube.Trade.NewOrder subBuilder = new global::Cube.Trade.NewOrder();
            if (innerCase_ == InnerOneofCase.New) {
              subBuilder.MergeFrom(New);
            }
            input.ReadMessage(subBuilder);
            New = subBuilder;
            break;
          }
          case 18: {
            global::Cube.Trade.CancelOrder subBuilder = new global::Cube.Trade.CancelOrder();
            if (innerCase_ == InnerOneofCase.Cancel) {
              subBuilder.MergeFrom(Cancel);
            }
            input.ReadMessage(subBuilder);
            Cancel = subBuilder;
            break;
          }
          case 26: {
            global::Cube.Trade.ModifyOrder subBuilder = new global::Cube.Trade.ModifyOrder();
            if (innerCase_ == InnerOneofCase.Modify) {
              subBuilder.MergeFrom(Modify);
            }
            input.ReadMessage(subBuilder);
            Modify = subBuilder;
            break;
          }
          case 34: {
            global::Cube.Trade.Heartbeat subBuilder = new global::Cube.Trade.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 42: {
            global::Cube.Trade.MassCancel subBuilder = new global::Cube.Trade.MassCancel();
            if (innerCase_ == InnerOneofCase.Mc) {
              subBuilder.MergeFrom(Mc);
            }
            input.ReadMessage(subBuilder);
            Mc = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Place a new order.
  /// </summary>
  public sealed partial class NewOrder : pb::IMessage<NewOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewOrder> _parser = new pb::MessageParser<NewOrder>(() => new NewOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrder(NewOrder other) : this() {
      _hasBits0 = other._hasBits0;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      marketId_ = other.marketId_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      side_ = other.side_;
      timeInForce_ = other.timeInForce_;
      orderType_ = other.orderType_;
      subaccountId_ = other.subaccountId_;
      selfTradePrevention_ = other.selfTradePrevention_;
      postOnly_ = other.postOnly_;
      cancelOnDisconnect_ = other.cancelOnDisconnect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrder Clone() {
      return new NewOrder(this);
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 1;
    private ulong clientOrderId_;
    /// <summary>
    /// A unique order ID assigned by the client for this order. The ID must be
    /// unique among open orders by this subaccount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private ulong requestId_;
    /// <summary>
    /// A request ID that is echoed back on the NewOrderAck or NewOrderReject
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 3;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private ulong price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Price {
      get { if ((_hasBits0 & 1) != 0) { return price_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 5;
    private ulong quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 6;
    private global::Cube.Trade.Side side_ = global::Cube.Trade.Side.Bid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Side Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "time_in_force" field.</summary>
    public const int TimeInForceFieldNumber = 7;
    private global::Cube.Trade.TimeInForce timeInForce_ = global::Cube.Trade.TimeInForce.ImmediateOrCancel;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.TimeInForce TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 8;
    private global::Cube.Trade.OrderType orderType_ = global::Cube.Trade.OrderType.Limit;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 9;
    private ulong subaccountId_;
    /// <summary>
    /// The subaccount to place this order on. This subaccount must be writable by
    /// the API key specified in the Credentials message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "self_trade_prevention" field.</summary>
    public const int SelfTradePreventionFieldNumber = 10;
    private global::Cube.Trade.SelfTradePrevention selfTradePrevention_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.SelfTradePrevention SelfTradePrevention {
      get { if ((_hasBits0 & 2) != 0) { return selfTradePrevention_; } else { return global::Cube.Trade.SelfTradePrevention.CancelResting; } }
      set {
        _hasBits0 |= 2;
        selfTradePrevention_ = value;
      }
    }
    /// <summary>Gets whether the "self_trade_prevention" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSelfTradePrevention {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "self_trade_prevention" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelfTradePrevention() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "post_only" field.</summary>
    public const int PostOnlyFieldNumber = 11;
    private global::Cube.Trade.PostOnly postOnly_ = global::Cube.Trade.PostOnly.Disabled;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.PostOnly PostOnly {
      get { return postOnly_; }
      set {
        postOnly_ = value;
      }
    }

    /// <summary>Field number for the "cancel_on_disconnect" field.</summary>
    public const int CancelOnDisconnectFieldNumber = 12;
    private bool cancelOnDisconnect_;
    /// <summary>
    /// If true, this order will be automatically cancelled
    /// after the closure of the network connection
    /// between Cube's servers and the client that placed the order.
    ///
    /// If the client initiates the disconnect or network instability drops the connection,
    /// the order will be cancelled when Cube's servers recognize the disconnection.
    ///
    /// In the event of a server-side disconnect that causes a halt in trading,
    /// such as scheduled downtime, the order will be cancelled before trading resumes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancelOnDisconnect {
      get { return cancelOnDisconnect_; }
      set {
        cancelOnDisconnect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (MarketId != other.MarketId) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (Side != other.Side) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (OrderType != other.OrderType) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (SelfTradePrevention != other.SelfTradePrevention) return false;
      if (PostOnly != other.PostOnly) return false;
      if (CancelOnDisconnect != other.CancelOnDisconnect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
      if (Side != global::Cube.Trade.Side.Bid) hash ^= Side.GetHashCode();
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) hash ^= TimeInForce.GetHashCode();
      if (OrderType != global::Cube.Trade.OrderType.Limit) hash ^= OrderType.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (HasSelfTradePrevention) hash ^= SelfTradePrevention.GetHashCode();
      if (PostOnly != global::Cube.Trade.PostOnly.Disabled) hash ^= PostOnly.GetHashCode();
      if (CancelOnDisconnect != false) hash ^= CancelOnDisconnect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MarketId);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteUInt64(Price);
      }
      if (Quantity != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OrderType);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(SubaccountId);
      }
      if (HasSelfTradePrevention) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SelfTradePrevention);
      }
      if (PostOnly != global::Cube.Trade.PostOnly.Disabled) {
        output.WriteRawTag(88);
        output.WriteEnum((int) PostOnly);
      }
      if (CancelOnDisconnect != false) {
        output.WriteRawTag(96);
        output.WriteBool(CancelOnDisconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MarketId);
      }
      if (HasPrice) {
        output.WriteRawTag(32);
        output.WriteUInt64(Price);
      }
      if (Quantity != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OrderType);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(SubaccountId);
      }
      if (HasSelfTradePrevention) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SelfTradePrevention);
      }
      if (PostOnly != global::Cube.Trade.PostOnly.Disabled) {
        output.WriteRawTag(88);
        output.WriteEnum((int) PostOnly);
      }
      if (CancelOnDisconnect != false) {
        output.WriteRawTag(96);
        output.WriteBool(CancelOnDisconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
      }
      if (Quantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (HasSelfTradePrevention) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SelfTradePrevention);
      }
      if (PostOnly != global::Cube.Trade.PostOnly.Disabled) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PostOnly);
      }
      if (CancelOnDisconnect != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewOrder other) {
      if (other == null) {
        return;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.Quantity != 0UL) {
        Quantity = other.Quantity;
      }
      if (other.Side != global::Cube.Trade.Side.Bid) {
        Side = other.Side;
      }
      if (other.TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        TimeInForce = other.TimeInForce;
      }
      if (other.OrderType != global::Cube.Trade.OrderType.Limit) {
        OrderType = other.OrderType;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.HasSelfTradePrevention) {
        SelfTradePrevention = other.SelfTradePrevention;
      }
      if (other.PostOnly != global::Cube.Trade.PostOnly.Disabled) {
        PostOnly = other.PostOnly;
      }
      if (other.CancelOnDisconnect != false) {
        CancelOnDisconnect = other.CancelOnDisconnect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 24: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 32: {
            Price = input.ReadUInt64();
            break;
          }
          case 40: {
            Quantity = input.ReadUInt64();
            break;
          }
          case 48: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
          case 56: {
            TimeInForce = (global::Cube.Trade.TimeInForce) input.ReadEnum();
            break;
          }
          case 64: {
            OrderType = (global::Cube.Trade.OrderType) input.ReadEnum();
            break;
          }
          case 72: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 80: {
            SelfTradePrevention = (global::Cube.Trade.SelfTradePrevention) input.ReadEnum();
            break;
          }
          case 88: {
            PostOnly = (global::Cube.Trade.PostOnly) input.ReadEnum();
            break;
          }
          case 96: {
            CancelOnDisconnect = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 24: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 32: {
            Price = input.ReadUInt64();
            break;
          }
          case 40: {
            Quantity = input.ReadUInt64();
            break;
          }
          case 48: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
          case 56: {
            TimeInForce = (global::Cube.Trade.TimeInForce) input.ReadEnum();
            break;
          }
          case 64: {
            OrderType = (global::Cube.Trade.OrderType) input.ReadEnum();
            break;
          }
          case 72: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 80: {
            SelfTradePrevention = (global::Cube.Trade.SelfTradePrevention) input.ReadEnum();
            break;
          }
          case 88: {
            PostOnly = (global::Cube.Trade.PostOnly) input.ReadEnum();
            break;
          }
          case 96: {
            CancelOnDisconnect = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Cancel a resting order.
  /// Note that this can be done before the order is acknowledged (an aggressive
  /// cancel) since the identifying field is the `client_order_id`.
  /// </summary>
  public sealed partial class CancelOrder : pb::IMessage<CancelOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelOrder> _parser = new pb::MessageParser<CancelOrder>(() => new CancelOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrder(CancelOrder other) : this() {
      marketId_ = other.marketId_;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      subaccountId_ = other.subaccountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrder Clone() {
      return new CancelOrder(this);
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 1;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 2;
    private ulong clientOrderId_;
    /// <summary>
    /// The order ID specified by the client on the NewOrder request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// A request ID that is echoed back on the CancelOrderAck or CancelOrderReject
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 4;
    private ulong subaccountId_;
    /// <summary>
    /// The subaccount that the NewOrder was placed on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketId != other.MarketId) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (SubaccountId != other.SubaccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MarketId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MarketId);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SubaccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MarketId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MarketId);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SubaccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelOrder other) {
      if (other == null) {
        return;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            SubaccountId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            SubaccountId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Modify a resting order.
  /// - If the `newPrice` and the current resting order's price is the same, and
  /// `newQuantity` is not greater, then the modify is considered a modify down,
  /// and the FIFO queue priority is maintained. Otherwise, the modify-order
  /// request is treated as an atomic cancel-replace and the replacement order is
  /// placed at the end of the FIFO queue for the new price level.
  /// - If post-only is specified and the replacement order would trade, then the
  /// request is rejected and the current resting order remains resting.
  ///
  /// Currently, in-flight-mitigation (IFM) is always enabled. That is, the
  /// cumulative fill qty is subtracted from `newQuantity` to calculate the new
  /// resting quantity. For example:
  ///
  /// ```text
  ///          | Resting | Filled
  /// ---------+---------+--------
  /// New 5    | 5       | 0
  /// Fill 2   | 3       | 2
  /// Modify 4 | 2       | 2
  /// ```
  ///
  /// The post-modify quantity will be `newQuantity - filled = 4 - 2 = 2`.
  ///
  /// Regardless of IFM, the invariant for order quantity is that `quantity =
  /// remaining_quantity + cumulative_quantity`.
  /// </summary>
  public sealed partial class ModifyOrder : pb::IMessage<ModifyOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModifyOrder> _parser = new pb::MessageParser<ModifyOrder>(() => new ModifyOrder());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrder(ModifyOrder other) : this() {
      _hasBits0 = other._hasBits0;
      marketId_ = other.marketId_;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      newPrice_ = other.newPrice_;
      newQuantity_ = other.newQuantity_;
      subaccountId_ = other.subaccountId_;
      selfTradePrevention_ = other.selfTradePrevention_;
      postOnly_ = other.postOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrder Clone() {
      return new ModifyOrder(this);
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 1;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 2;
    private ulong clientOrderId_;
    /// <summary>
    /// The order ID specified by the client on the NewOrder request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// A request ID that is echoed back on the ModifyOrderAck or ModifyOrderReject
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "new_price" field.</summary>
    public const int NewPriceFieldNumber = 4;
    private ulong newPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NewPrice {
      get { return newPrice_; }
      set {
        newPrice_ = value;
      }
    }

    /// <summary>Field number for the "new_quantity" field.</summary>
    public const int NewQuantityFieldNumber = 5;
    private ulong newQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NewQuantity {
      get { return newQuantity_; }
      set {
        newQuantity_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 6;
    private ulong subaccountId_;
    /// <summary>
    /// The subaccount that the NewOrder was placed on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "self_trade_prevention" field.</summary>
    public const int SelfTradePreventionFieldNumber = 7;
    private global::Cube.Trade.SelfTradePrevention selfTradePrevention_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.SelfTradePrevention SelfTradePrevention {
      get { if ((_hasBits0 & 1) != 0) { return selfTradePrevention_; } else { return global::Cube.Trade.SelfTradePrevention.CancelResting; } }
      set {
        _hasBits0 |= 1;
        selfTradePrevention_ = value;
      }
    }
    /// <summary>Gets whether the "self_trade_prevention" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSelfTradePrevention {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "self_trade_prevention" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelfTradePrevention() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "post_only" field.</summary>
    public const int PostOnlyFieldNumber = 8;
    private global::Cube.Trade.PostOnly postOnly_ = global::Cube.Trade.PostOnly.Disabled;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.PostOnly PostOnly {
      get { return postOnly_; }
      set {
        postOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarketId != other.MarketId) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (NewPrice != other.NewPrice) return false;
      if (NewQuantity != other.NewQuantity) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (SelfTradePrevention != other.SelfTradePrevention) return false;
      if (PostOnly != other.PostOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (NewPrice != 0UL) hash ^= NewPrice.GetHashCode();
      if (NewQuantity != 0UL) hash ^= NewQuantity.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (HasSelfTradePrevention) hash ^= SelfTradePrevention.GetHashCode();
      if (PostOnly != global::Cube.Trade.PostOnly.Disabled) hash ^= PostOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MarketId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MarketId);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (NewPrice != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(NewPrice);
      }
      if (NewQuantity != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NewQuantity);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SubaccountId);
      }
      if (HasSelfTradePrevention) {
        output.WriteRawTag(56);
        output.WriteEnum((int) SelfTradePrevention);
      }
      if (PostOnly != global::Cube.Trade.PostOnly.Disabled) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PostOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MarketId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MarketId);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (NewPrice != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(NewPrice);
      }
      if (NewQuantity != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NewQuantity);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SubaccountId);
      }
      if (HasSelfTradePrevention) {
        output.WriteRawTag(56);
        output.WriteEnum((int) SelfTradePrevention);
      }
      if (PostOnly != global::Cube.Trade.PostOnly.Disabled) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PostOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (NewPrice != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NewPrice);
      }
      if (NewQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NewQuantity);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (HasSelfTradePrevention) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SelfTradePrevention);
      }
      if (PostOnly != global::Cube.Trade.PostOnly.Disabled) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PostOnly);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyOrder other) {
      if (other == null) {
        return;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.NewPrice != 0UL) {
        NewPrice = other.NewPrice;
      }
      if (other.NewQuantity != 0UL) {
        NewQuantity = other.NewQuantity;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.HasSelfTradePrevention) {
        SelfTradePrevention = other.SelfTradePrevention;
      }
      if (other.PostOnly != global::Cube.Trade.PostOnly.Disabled) {
        PostOnly = other.PostOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            NewPrice = input.ReadUInt64();
            break;
          }
          case 40: {
            NewQuantity = input.ReadUInt64();
            break;
          }
          case 48: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 56: {
            SelfTradePrevention = (global::Cube.Trade.SelfTradePrevention) input.ReadEnum();
            break;
          }
          case 64: {
            PostOnly = (global::Cube.Trade.PostOnly) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            NewPrice = input.ReadUInt64();
            break;
          }
          case 40: {
            NewQuantity = input.ReadUInt64();
            break;
          }
          case 48: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 56: {
            SelfTradePrevention = (global::Cube.Trade.SelfTradePrevention) input.ReadEnum();
            break;
          }
          case 64: {
            PostOnly = (global::Cube.Trade.PostOnly) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Cancel all resting orders, optionally limiting to a particular market and /
  /// or order book side.
  /// </summary>
  public sealed partial class MassCancel : pb::IMessage<MassCancel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MassCancel> _parser = new pb::MessageParser<MassCancel>(() => new MassCancel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MassCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassCancel(MassCancel other) : this() {
      _hasBits0 = other._hasBits0;
      subaccountId_ = other.subaccountId_;
      requestId_ = other.requestId_;
      marketId_ = other.marketId_;
      side_ = other.side_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassCancel Clone() {
      return new MassCancel(this);
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 1;
    private ulong subaccountId_;
    /// <summary>
    /// The subaccount to cancel orders for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private ulong requestId_;
    /// <summary>
    /// A request ID that is echoed back on the MassCancelAck and individual
    /// CancelOrderAck's.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 3;
    private ulong marketId_;
    /// <summary>
    /// If specified, only orders on the corresponding market will be canceled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { if ((_hasBits0 & 1) != 0) { return marketId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        marketId_ = value;
      }
    }
    /// <summary>Gets whether the "market_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarketId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "market_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarketId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 4;
    private global::Cube.Trade.Side side_;
    /// <summary>
    /// If specified, only orders with this side will be canceled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Side Side {
      get { if ((_hasBits0 & 2) != 0) { return side_; } else { return global::Cube.Trade.Side.Bid; } }
      set {
        _hasBits0 |= 2;
        side_ = value;
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSide {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSide() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MassCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MassCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubaccountId != other.SubaccountId) return false;
      if (RequestId != other.RequestId) return false;
      if (MarketId != other.MarketId) return false;
      if (Side != other.Side) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (HasMarketId) hash ^= MarketId.GetHashCode();
      if (HasSide) hash ^= Side.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SubaccountId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubaccountId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (HasMarketId) {
        output.WriteRawTag(24);
        output.WriteUInt64(MarketId);
      }
      if (HasSide) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Side);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SubaccountId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubaccountId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (HasMarketId) {
        output.WriteRawTag(24);
        output.WriteUInt64(MarketId);
      }
      if (HasSide) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Side);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasMarketId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MassCancel other) {
      if (other == null) {
        return;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.HasMarketId) {
        MarketId = other.MarketId;
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 24: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 32: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 24: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 32: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A client and server heartbeat. The heartbeat reply, including the timestamp
  /// value, comes from the order service and not the matching engine. Matching
  /// engine timestamps can be extracted from `transact_time` (below).
  ///
  /// Latency can be estimated from this, but only the relative difference between
  /// successive server messages should be used. In particular, the client and
  /// server clock should not be expected to be synchronized.
  /// </summary>
  public sealed partial class Heartbeat : pb::IMessage<Heartbeat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      requestId_ = other.requestId_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private ulong requestId_;
    /// <summary>
    /// A request ID that is echoed back on the Heartbeat
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RequestId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RequestId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Every exchange message after the initial bootstrap will be wrapped as an
  /// OrderResponse.
  /// </summary>
  public sealed partial class OrderResponse : pb::IMessage<OrderResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderResponse> _parser = new pb::MessageParser<OrderResponse>(() => new OrderResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderResponse(OrderResponse other) : this() {
      switch (other.InnerCase) {
        case InnerOneofCase.NewAck:
          NewAck = other.NewAck.Clone();
          break;
        case InnerOneofCase.CancelAck:
          CancelAck = other.CancelAck.Clone();
          break;
        case InnerOneofCase.ModifyAck:
          ModifyAck = other.ModifyAck.Clone();
          break;
        case InnerOneofCase.NewReject:
          NewReject = other.NewReject.Clone();
          break;
        case InnerOneofCase.CancelReject:
          CancelReject = other.CancelReject.Clone();
          break;
        case InnerOneofCase.ModifyReject:
          ModifyReject = other.ModifyReject.Clone();
          break;
        case InnerOneofCase.Fill:
          Fill = other.Fill.Clone();
          break;
        case InnerOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case InnerOneofCase.Position:
          Position = other.Position.Clone();
          break;
        case InnerOneofCase.MassCancelAck:
          MassCancelAck = other.MassCancelAck.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderResponse Clone() {
      return new OrderResponse(this);
    }

    /// <summary>Field number for the "new_ack" field.</summary>
    public const int NewAckFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.NewOrderAck NewAck {
      get { return innerCase_ == InnerOneofCase.NewAck ? (global::Cube.Trade.NewOrderAck) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.NewAck;
      }
    }

    /// <summary>Field number for the "cancel_ack" field.</summary>
    public const int CancelAckFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.CancelOrderAck CancelAck {
      get { return innerCase_ == InnerOneofCase.CancelAck ? (global::Cube.Trade.CancelOrderAck) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.CancelAck;
      }
    }

    /// <summary>Field number for the "modify_ack" field.</summary>
    public const int ModifyAckFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.ModifyOrderAck ModifyAck {
      get { return innerCase_ == InnerOneofCase.ModifyAck ? (global::Cube.Trade.ModifyOrderAck) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.ModifyAck;
      }
    }

    /// <summary>Field number for the "new_reject" field.</summary>
    public const int NewRejectFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.NewOrderReject NewReject {
      get { return innerCase_ == InnerOneofCase.NewReject ? (global::Cube.Trade.NewOrderReject) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.NewReject;
      }
    }

    /// <summary>Field number for the "cancel_reject" field.</summary>
    public const int CancelRejectFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.CancelOrderReject CancelReject {
      get { return innerCase_ == InnerOneofCase.CancelReject ? (global::Cube.Trade.CancelOrderReject) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.CancelReject;
      }
    }

    /// <summary>Field number for the "modify_reject" field.</summary>
    public const int ModifyRejectFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.ModifyOrderReject ModifyReject {
      get { return innerCase_ == InnerOneofCase.ModifyReject ? (global::Cube.Trade.ModifyOrderReject) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.ModifyReject;
      }
    }

    /// <summary>Field number for the "fill" field.</summary>
    public const int FillFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Fill Fill {
      get { return innerCase_ == InnerOneofCase.Fill ? (global::Cube.Trade.Fill) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Fill;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Heartbeat Heartbeat {
      get { return innerCase_ == InnerOneofCase.Heartbeat ? (global::Cube.Trade.Heartbeat) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.AssetPosition Position {
      get { return innerCase_ == InnerOneofCase.Position ? (global::Cube.Trade.AssetPosition) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Position;
      }
    }

    /// <summary>Field number for the "mass_cancel_ack" field.</summary>
    public const int MassCancelAckFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.MassCancelAck MassCancelAck {
      get { return innerCase_ == InnerOneofCase.MassCancelAck ? (global::Cube.Trade.MassCancelAck) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.MassCancelAck;
      }
    }

    private object inner_;
    /// <summary>Enum of possible cases for the "inner" oneof.</summary>
    public enum InnerOneofCase {
      None = 0,
      NewAck = 1,
      CancelAck = 2,
      ModifyAck = 3,
      NewReject = 4,
      CancelReject = 5,
      ModifyReject = 6,
      Fill = 7,
      Heartbeat = 8,
      Position = 9,
      MassCancelAck = 10,
    }
    private InnerOneofCase innerCase_ = InnerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerOneofCase InnerCase {
      get { return innerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInner() {
      innerCase_ = InnerOneofCase.None;
      inner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NewAck, other.NewAck)) return false;
      if (!object.Equals(CancelAck, other.CancelAck)) return false;
      if (!object.Equals(ModifyAck, other.ModifyAck)) return false;
      if (!object.Equals(NewReject, other.NewReject)) return false;
      if (!object.Equals(CancelReject, other.CancelReject)) return false;
      if (!object.Equals(ModifyReject, other.ModifyReject)) return false;
      if (!object.Equals(Fill, other.Fill)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(MassCancelAck, other.MassCancelAck)) return false;
      if (InnerCase != other.InnerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (innerCase_ == InnerOneofCase.NewAck) hash ^= NewAck.GetHashCode();
      if (innerCase_ == InnerOneofCase.CancelAck) hash ^= CancelAck.GetHashCode();
      if (innerCase_ == InnerOneofCase.ModifyAck) hash ^= ModifyAck.GetHashCode();
      if (innerCase_ == InnerOneofCase.NewReject) hash ^= NewReject.GetHashCode();
      if (innerCase_ == InnerOneofCase.CancelReject) hash ^= CancelReject.GetHashCode();
      if (innerCase_ == InnerOneofCase.ModifyReject) hash ^= ModifyReject.GetHashCode();
      if (innerCase_ == InnerOneofCase.Fill) hash ^= Fill.GetHashCode();
      if (innerCase_ == InnerOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (innerCase_ == InnerOneofCase.Position) hash ^= Position.GetHashCode();
      if (innerCase_ == InnerOneofCase.MassCancelAck) hash ^= MassCancelAck.GetHashCode();
      hash ^= (int) innerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (innerCase_ == InnerOneofCase.NewAck) {
        output.WriteRawTag(10);
        output.WriteMessage(NewAck);
      }
      if (innerCase_ == InnerOneofCase.CancelAck) {
        output.WriteRawTag(18);
        output.WriteMessage(CancelAck);
      }
      if (innerCase_ == InnerOneofCase.ModifyAck) {
        output.WriteRawTag(26);
        output.WriteMessage(ModifyAck);
      }
      if (innerCase_ == InnerOneofCase.NewReject) {
        output.WriteRawTag(34);
        output.WriteMessage(NewReject);
      }
      if (innerCase_ == InnerOneofCase.CancelReject) {
        output.WriteRawTag(42);
        output.WriteMessage(CancelReject);
      }
      if (innerCase_ == InnerOneofCase.ModifyReject) {
        output.WriteRawTag(50);
        output.WriteMessage(ModifyReject);
      }
      if (innerCase_ == InnerOneofCase.Fill) {
        output.WriteRawTag(58);
        output.WriteMessage(Fill);
      }
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(66);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Position) {
        output.WriteRawTag(74);
        output.WriteMessage(Position);
      }
      if (innerCase_ == InnerOneofCase.MassCancelAck) {
        output.WriteRawTag(82);
        output.WriteMessage(MassCancelAck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (innerCase_ == InnerOneofCase.NewAck) {
        output.WriteRawTag(10);
        output.WriteMessage(NewAck);
      }
      if (innerCase_ == InnerOneofCase.CancelAck) {
        output.WriteRawTag(18);
        output.WriteMessage(CancelAck);
      }
      if (innerCase_ == InnerOneofCase.ModifyAck) {
        output.WriteRawTag(26);
        output.WriteMessage(ModifyAck);
      }
      if (innerCase_ == InnerOneofCase.NewReject) {
        output.WriteRawTag(34);
        output.WriteMessage(NewReject);
      }
      if (innerCase_ == InnerOneofCase.CancelReject) {
        output.WriteRawTag(42);
        output.WriteMessage(CancelReject);
      }
      if (innerCase_ == InnerOneofCase.ModifyReject) {
        output.WriteRawTag(50);
        output.WriteMessage(ModifyReject);
      }
      if (innerCase_ == InnerOneofCase.Fill) {
        output.WriteRawTag(58);
        output.WriteMessage(Fill);
      }
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        output.WriteRawTag(66);
        output.WriteMessage(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Position) {
        output.WriteRawTag(74);
        output.WriteMessage(Position);
      }
      if (innerCase_ == InnerOneofCase.MassCancelAck) {
        output.WriteRawTag(82);
        output.WriteMessage(MassCancelAck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (innerCase_ == InnerOneofCase.NewAck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewAck);
      }
      if (innerCase_ == InnerOneofCase.CancelAck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelAck);
      }
      if (innerCase_ == InnerOneofCase.ModifyAck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifyAck);
      }
      if (innerCase_ == InnerOneofCase.NewReject) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewReject);
      }
      if (innerCase_ == InnerOneofCase.CancelReject) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelReject);
      }
      if (innerCase_ == InnerOneofCase.ModifyReject) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifyReject);
      }
      if (innerCase_ == InnerOneofCase.Fill) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fill);
      }
      if (innerCase_ == InnerOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (innerCase_ == InnerOneofCase.Position) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (innerCase_ == InnerOneofCase.MassCancelAck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MassCancelAck);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderResponse other) {
      if (other == null) {
        return;
      }
      switch (other.InnerCase) {
        case InnerOneofCase.NewAck:
          if (NewAck == null) {
            NewAck = new global::Cube.Trade.NewOrderAck();
          }
          NewAck.MergeFrom(other.NewAck);
          break;
        case InnerOneofCase.CancelAck:
          if (CancelAck == null) {
            CancelAck = new global::Cube.Trade.CancelOrderAck();
          }
          CancelAck.MergeFrom(other.CancelAck);
          break;
        case InnerOneofCase.ModifyAck:
          if (ModifyAck == null) {
            ModifyAck = new global::Cube.Trade.ModifyOrderAck();
          }
          ModifyAck.MergeFrom(other.ModifyAck);
          break;
        case InnerOneofCase.NewReject:
          if (NewReject == null) {
            NewReject = new global::Cube.Trade.NewOrderReject();
          }
          NewReject.MergeFrom(other.NewReject);
          break;
        case InnerOneofCase.CancelReject:
          if (CancelReject == null) {
            CancelReject = new global::Cube.Trade.CancelOrderReject();
          }
          CancelReject.MergeFrom(other.CancelReject);
          break;
        case InnerOneofCase.ModifyReject:
          if (ModifyReject == null) {
            ModifyReject = new global::Cube.Trade.ModifyOrderReject();
          }
          ModifyReject.MergeFrom(other.ModifyReject);
          break;
        case InnerOneofCase.Fill:
          if (Fill == null) {
            Fill = new global::Cube.Trade.Fill();
          }
          Fill.MergeFrom(other.Fill);
          break;
        case InnerOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Cube.Trade.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
        case InnerOneofCase.Position:
          if (Position == null) {
            Position = new global::Cube.Trade.AssetPosition();
          }
          Position.MergeFrom(other.Position);
          break;
        case InnerOneofCase.MassCancelAck:
          if (MassCancelAck == null) {
            MassCancelAck = new global::Cube.Trade.MassCancelAck();
          }
          MassCancelAck.MergeFrom(other.MassCancelAck);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Cube.Trade.NewOrderAck subBuilder = new global::Cube.Trade.NewOrderAck();
            if (innerCase_ == InnerOneofCase.NewAck) {
              subBuilder.MergeFrom(NewAck);
            }
            input.ReadMessage(subBuilder);
            NewAck = subBuilder;
            break;
          }
          case 18: {
            global::Cube.Trade.CancelOrderAck subBuilder = new global::Cube.Trade.CancelOrderAck();
            if (innerCase_ == InnerOneofCase.CancelAck) {
              subBuilder.MergeFrom(CancelAck);
            }
            input.ReadMessage(subBuilder);
            CancelAck = subBuilder;
            break;
          }
          case 26: {
            global::Cube.Trade.ModifyOrderAck subBuilder = new global::Cube.Trade.ModifyOrderAck();
            if (innerCase_ == InnerOneofCase.ModifyAck) {
              subBuilder.MergeFrom(ModifyAck);
            }
            input.ReadMessage(subBuilder);
            ModifyAck = subBuilder;
            break;
          }
          case 34: {
            global::Cube.Trade.NewOrderReject subBuilder = new global::Cube.Trade.NewOrderReject();
            if (innerCase_ == InnerOneofCase.NewReject) {
              subBuilder.MergeFrom(NewReject);
            }
            input.ReadMessage(subBuilder);
            NewReject = subBuilder;
            break;
          }
          case 42: {
            global::Cube.Trade.CancelOrderReject subBuilder = new global::Cube.Trade.CancelOrderReject();
            if (innerCase_ == InnerOneofCase.CancelReject) {
              subBuilder.MergeFrom(CancelReject);
            }
            input.ReadMessage(subBuilder);
            CancelReject = subBuilder;
            break;
          }
          case 50: {
            global::Cube.Trade.ModifyOrderReject subBuilder = new global::Cube.Trade.ModifyOrderReject();
            if (innerCase_ == InnerOneofCase.ModifyReject) {
              subBuilder.MergeFrom(ModifyReject);
            }
            input.ReadMessage(subBuilder);
            ModifyReject = subBuilder;
            break;
          }
          case 58: {
            global::Cube.Trade.Fill subBuilder = new global::Cube.Trade.Fill();
            if (innerCase_ == InnerOneofCase.Fill) {
              subBuilder.MergeFrom(Fill);
            }
            input.ReadMessage(subBuilder);
            Fill = subBuilder;
            break;
          }
          case 66: {
            global::Cube.Trade.Heartbeat subBuilder = new global::Cube.Trade.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 74: {
            global::Cube.Trade.AssetPosition subBuilder = new global::Cube.Trade.AssetPosition();
            if (innerCase_ == InnerOneofCase.Position) {
              subBuilder.MergeFrom(Position);
            }
            input.ReadMessage(subBuilder);
            Position = subBuilder;
            break;
          }
          case 82: {
            global::Cube.Trade.MassCancelAck subBuilder = new global::Cube.Trade.MassCancelAck();
            if (innerCase_ == InnerOneofCase.MassCancelAck) {
              subBuilder.MergeFrom(MassCancelAck);
            }
            input.ReadMessage(subBuilder);
            MassCancelAck = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Cube.Trade.NewOrderAck subBuilder = new global::Cube.Trade.NewOrderAck();
            if (innerCase_ == InnerOneofCase.NewAck) {
              subBuilder.MergeFrom(NewAck);
            }
            input.ReadMessage(subBuilder);
            NewAck = subBuilder;
            break;
          }
          case 18: {
            global::Cube.Trade.CancelOrderAck subBuilder = new global::Cube.Trade.CancelOrderAck();
            if (innerCase_ == InnerOneofCase.CancelAck) {
              subBuilder.MergeFrom(CancelAck);
            }
            input.ReadMessage(subBuilder);
            CancelAck = subBuilder;
            break;
          }
          case 26: {
            global::Cube.Trade.ModifyOrderAck subBuilder = new global::Cube.Trade.ModifyOrderAck();
            if (innerCase_ == InnerOneofCase.ModifyAck) {
              subBuilder.MergeFrom(ModifyAck);
            }
            input.ReadMessage(subBuilder);
            ModifyAck = subBuilder;
            break;
          }
          case 34: {
            global::Cube.Trade.NewOrderReject subBuilder = new global::Cube.Trade.NewOrderReject();
            if (innerCase_ == InnerOneofCase.NewReject) {
              subBuilder.MergeFrom(NewReject);
            }
            input.ReadMessage(subBuilder);
            NewReject = subBuilder;
            break;
          }
          case 42: {
            global::Cube.Trade.CancelOrderReject subBuilder = new global::Cube.Trade.CancelOrderReject();
            if (innerCase_ == InnerOneofCase.CancelReject) {
              subBuilder.MergeFrom(CancelReject);
            }
            input.ReadMessage(subBuilder);
            CancelReject = subBuilder;
            break;
          }
          case 50: {
            global::Cube.Trade.ModifyOrderReject subBuilder = new global::Cube.Trade.ModifyOrderReject();
            if (innerCase_ == InnerOneofCase.ModifyReject) {
              subBuilder.MergeFrom(ModifyReject);
            }
            input.ReadMessage(subBuilder);
            ModifyReject = subBuilder;
            break;
          }
          case 58: {
            global::Cube.Trade.Fill subBuilder = new global::Cube.Trade.Fill();
            if (innerCase_ == InnerOneofCase.Fill) {
              subBuilder.MergeFrom(Fill);
            }
            input.ReadMessage(subBuilder);
            Fill = subBuilder;
            break;
          }
          case 66: {
            global::Cube.Trade.Heartbeat subBuilder = new global::Cube.Trade.Heartbeat();
            if (innerCase_ == InnerOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 74: {
            global::Cube.Trade.AssetPosition subBuilder = new global::Cube.Trade.AssetPosition();
            if (innerCase_ == InnerOneofCase.Position) {
              subBuilder.MergeFrom(Position);
            }
            input.ReadMessage(subBuilder);
            Position = subBuilder;
            break;
          }
          case 82: {
            global::Cube.Trade.MassCancelAck subBuilder = new global::Cube.Trade.MassCancelAck();
            if (innerCase_ == InnerOneofCase.MassCancelAck) {
              subBuilder.MergeFrom(MassCancelAck);
            }
            input.ReadMessage(subBuilder);
            MassCancelAck = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// New-order-ack confirms a new-order request. The ack will be ordered before
  /// any fills for this order.
  /// </summary>
  public sealed partial class NewOrderAck : pb::IMessage<NewOrderAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewOrderAck> _parser = new pb::MessageParser<NewOrderAck>(() => new NewOrderAck());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewOrderAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderAck(NewOrderAck other) : this() {
      _hasBits0 = other._hasBits0;
      msgSeqNum_ = other.msgSeqNum_;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      exchangeOrderId_ = other.exchangeOrderId_;
      marketId_ = other.marketId_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      side_ = other.side_;
      timeInForce_ = other.timeInForce_;
      orderType_ = other.orderType_;
      transactTime_ = other.transactTime_;
      subaccountId_ = other.subaccountId_;
      cancelOnDisconnect_ = other.cancelOnDisconnect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderAck Clone() {
      return new NewOrderAck(this);
    }

    /// <summary>Field number for the "msg_seq_num" field.</summary>
    public const int MsgSeqNumFieldNumber = 1;
    private ulong msgSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgSeqNum {
      get { return msgSeqNum_; }
      set {
        msgSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 2;
    private ulong clientOrderId_;
    /// <summary>
    /// The client order ID specified in the new-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// The request ID specified in the new-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "exchange_order_id" field.</summary>
    public const int ExchangeOrderIdFieldNumber = 4;
    private ulong exchangeOrderId_;
    /// <summary>
    /// [Exchange order ID](#exchange-order-id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExchangeOrderId {
      get { return exchangeOrderId_; }
      set {
        exchangeOrderId_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 5;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 6;
    private ulong price_;
    /// <summary>
    /// If the order ultimately rests, the `price` field will include the resting
    /// price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Price {
      get { if ((_hasBits0 & 1) != 0) { return price_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 7;
    private ulong quantity_;
    /// <summary>
    /// The quantity submitted in the new-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 8;
    private global::Cube.Trade.Side side_ = global::Cube.Trade.Side.Bid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Side Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "time_in_force" field.</summary>
    public const int TimeInForceFieldNumber = 9;
    private global::Cube.Trade.TimeInForce timeInForce_ = global::Cube.Trade.TimeInForce.ImmediateOrCancel;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.TimeInForce TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 10;
    private global::Cube.Trade.OrderType orderType_ = global::Cube.Trade.OrderType.Limit;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 11;
    private ulong transactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 12;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "cancel_on_disconnect" field.</summary>
    public const int CancelOnDisconnectFieldNumber = 13;
    private bool cancelOnDisconnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancelOnDisconnect {
      get { return cancelOnDisconnect_; }
      set {
        cancelOnDisconnect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewOrderAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewOrderAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgSeqNum != other.MsgSeqNum) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (ExchangeOrderId != other.ExchangeOrderId) return false;
      if (MarketId != other.MarketId) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (Side != other.Side) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (OrderType != other.OrderType) return false;
      if (TransactTime != other.TransactTime) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (CancelOnDisconnect != other.CancelOnDisconnect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgSeqNum != 0UL) hash ^= MsgSeqNum.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (ExchangeOrderId != 0UL) hash ^= ExchangeOrderId.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
      if (Side != global::Cube.Trade.Side.Bid) hash ^= Side.GetHashCode();
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) hash ^= TimeInForce.GetHashCode();
      if (OrderType != global::Cube.Trade.OrderType.Limit) hash ^= OrderType.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (CancelOnDisconnect != false) hash ^= CancelOnDisconnect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (ExchangeOrderId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ExchangeOrderId);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MarketId);
      }
      if (HasPrice) {
        output.WriteRawTag(48);
        output.WriteUInt64(Price);
      }
      if (Quantity != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OrderType);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(SubaccountId);
      }
      if (CancelOnDisconnect != false) {
        output.WriteRawTag(104);
        output.WriteBool(CancelOnDisconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (ExchangeOrderId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ExchangeOrderId);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MarketId);
      }
      if (HasPrice) {
        output.WriteRawTag(48);
        output.WriteUInt64(Price);
      }
      if (Quantity != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OrderType);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(SubaccountId);
      }
      if (CancelOnDisconnect != false) {
        output.WriteRawTag(104);
        output.WriteBool(CancelOnDisconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (ExchangeOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExchangeOrderId);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
      }
      if (Quantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (CancelOnDisconnect != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewOrderAck other) {
      if (other == null) {
        return;
      }
      if (other.MsgSeqNum != 0UL) {
        MsgSeqNum = other.MsgSeqNum;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.ExchangeOrderId != 0UL) {
        ExchangeOrderId = other.ExchangeOrderId;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.Quantity != 0UL) {
        Quantity = other.Quantity;
      }
      if (other.Side != global::Cube.Trade.Side.Bid) {
        Side = other.Side;
      }
      if (other.TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        TimeInForce = other.TimeInForce;
      }
      if (other.OrderType != global::Cube.Trade.OrderType.Limit) {
        OrderType = other.OrderType;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.CancelOnDisconnect != false) {
        CancelOnDisconnect = other.CancelOnDisconnect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            ExchangeOrderId = input.ReadUInt64();
            break;
          }
          case 40: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 48: {
            Price = input.ReadUInt64();
            break;
          }
          case 56: {
            Quantity = input.ReadUInt64();
            break;
          }
          case 64: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
          case 72: {
            TimeInForce = (global::Cube.Trade.TimeInForce) input.ReadEnum();
            break;
          }
          case 80: {
            OrderType = (global::Cube.Trade.OrderType) input.ReadEnum();
            break;
          }
          case 88: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 96: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 104: {
            CancelOnDisconnect = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            ExchangeOrderId = input.ReadUInt64();
            break;
          }
          case 40: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 48: {
            Price = input.ReadUInt64();
            break;
          }
          case 56: {
            Quantity = input.ReadUInt64();
            break;
          }
          case 64: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
          case 72: {
            TimeInForce = (global::Cube.Trade.TimeInForce) input.ReadEnum();
            break;
          }
          case 80: {
            OrderType = (global::Cube.Trade.OrderType) input.ReadEnum();
            break;
          }
          case 88: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 96: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 104: {
            CancelOnDisconnect = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Cancel-order-ack confirms a cancel request, or that an order has been
  /// canceled as the result of a different user-initiated reason.
  /// </summary>
  public sealed partial class CancelOrderAck : pb::IMessage<CancelOrderAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelOrderAck> _parser = new pb::MessageParser<CancelOrderAck>(() => new CancelOrderAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelOrderAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderAck(CancelOrderAck other) : this() {
      msgSeqNum_ = other.msgSeqNum_;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      transactTime_ = other.transactTime_;
      subaccountId_ = other.subaccountId_;
      reason_ = other.reason_;
      marketId_ = other.marketId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderAck Clone() {
      return new CancelOrderAck(this);
    }

    /// <summary>Field number for the "msg_seq_num" field.</summary>
    public const int MsgSeqNumFieldNumber = 1;
    private ulong msgSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgSeqNum {
      get { return msgSeqNum_; }
      set {
        msgSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 2;
    private ulong clientOrderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// If the Reason is `DISCONNECT`, `IOC`, `STP_RESTING`, or `STP_AGGRESSING`,
    /// this request ID will be `u64::MAX`. Otherwise, it will be the request ID of
    /// the initiated cancel action. For a mass cancel, each cancel order ack will
    /// have the MassCancel's request_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 4;
    private ulong transactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 5;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private global::Cube.Trade.CancelOrderAck.Types.Reason reason_ = global::Cube.Trade.CancelOrderAck.Types.Reason.Unclassified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.CancelOrderAck.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 7;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelOrderAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelOrderAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgSeqNum != other.MsgSeqNum) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (TransactTime != other.TransactTime) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (Reason != other.Reason) return false;
      if (MarketId != other.MarketId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgSeqNum != 0UL) hash ^= MsgSeqNum.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (Reason != global::Cube.Trade.CancelOrderAck.Types.Reason.Unclassified) hash ^= Reason.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SubaccountId);
      }
      if (Reason != global::Cube.Trade.CancelOrderAck.Types.Reason.Unclassified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SubaccountId);
      }
      if (Reason != global::Cube.Trade.CancelOrderAck.Types.Reason.Unclassified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (Reason != global::Cube.Trade.CancelOrderAck.Types.Reason.Unclassified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelOrderAck other) {
      if (other == null) {
        return;
      }
      if (other.MsgSeqNum != 0UL) {
        MsgSeqNum = other.MsgSeqNum;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.Reason != global::Cube.Trade.CancelOrderAck.Types.Reason.Unclassified) {
        Reason = other.Reason;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.CancelOrderAck.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.CancelOrderAck.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CancelOrderAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("UNCLASSIFIED")] Unclassified = 0,
        [pbr::OriginalName("DISCONNECT")] Disconnect = 1,
        /// <summary>
        /// This order was specified in a cancel request.
        /// </summary>
        [pbr::OriginalName("REQUESTED")] Requested = 2,
        /// <summary>
        /// This was an IOC new-order that does not get fully filled.
        /// </summary>
        [pbr::OriginalName("IOC")] Ioc = 3,
        /// <summary>
        /// A resting order was STP canceled.
        /// </summary>
        [pbr::OriginalName("STP_RESTING")] StpResting = 4,
        /// <summary>
        /// An aggressing order was STP canceled.
        /// </summary>
        [pbr::OriginalName("STP_AGGRESSING")] StpAggressing = 5,
        /// <summary>
        /// This order was covered by a mass-cancel request.
        /// </summary>
        [pbr::OriginalName("MASS_CANCEL")] MassCancel = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Modify-order-ack confirms a modify-order request. If the modify resulted in
  /// an aggressing cancel-replace, the ack will be ordered before any fills for
  /// this order.
  /// </summary>
  public sealed partial class ModifyOrderAck : pb::IMessage<ModifyOrderAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModifyOrderAck> _parser = new pb::MessageParser<ModifyOrderAck>(() => new ModifyOrderAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyOrderAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrderAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrderAck(ModifyOrderAck other) : this() {
      msgSeqNum_ = other.msgSeqNum_;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      transactTime_ = other.transactTime_;
      remainingQuantity_ = other.remainingQuantity_;
      subaccountId_ = other.subaccountId_;
      marketId_ = other.marketId_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      cumulativeQuantity_ = other.cumulativeQuantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrderAck Clone() {
      return new ModifyOrderAck(this);
    }

    /// <summary>Field number for the "msg_seq_num" field.</summary>
    public const int MsgSeqNumFieldNumber = 1;
    private ulong msgSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgSeqNum {
      get { return msgSeqNum_; }
      set {
        msgSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 2;
    private ulong clientOrderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// The request ID specified in the modify request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 4;
    private ulong transactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "remaining_quantity" field.</summary>
    public const int RemainingQuantityFieldNumber = 5;
    private ulong remainingQuantity_;
    /// <summary>
    /// The quantity remaining on the book after applying the modify request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RemainingQuantity {
      get { return remainingQuantity_; }
      set {
        remainingQuantity_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 6;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 7;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 8;
    private ulong price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 9;
    private ulong quantity_;
    /// <summary>
    /// The quantity submitted in the modify request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "cumulative_quantity" field.</summary>
    public const int CumulativeQuantityFieldNumber = 10;
    private ulong cumulativeQuantity_;
    /// <summary>
    /// The cumulative filled quantity for this order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CumulativeQuantity {
      get { return cumulativeQuantity_; }
      set {
        cumulativeQuantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyOrderAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyOrderAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgSeqNum != other.MsgSeqNum) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (TransactTime != other.TransactTime) return false;
      if (RemainingQuantity != other.RemainingQuantity) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (MarketId != other.MarketId) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (CumulativeQuantity != other.CumulativeQuantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgSeqNum != 0UL) hash ^= MsgSeqNum.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (RemainingQuantity != 0UL) hash ^= RemainingQuantity.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (Price != 0UL) hash ^= Price.GetHashCode();
      if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
      if (CumulativeQuantity != 0UL) hash ^= CumulativeQuantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (RemainingQuantity != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RemainingQuantity);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SubaccountId);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (Price != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Price);
      }
      if (Quantity != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Quantity);
      }
      if (CumulativeQuantity != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (RemainingQuantity != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RemainingQuantity);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SubaccountId);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (Price != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Price);
      }
      if (Quantity != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Quantity);
      }
      if (CumulativeQuantity != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (RemainingQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RemainingQuantity);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (Price != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
      }
      if (Quantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
      }
      if (CumulativeQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyOrderAck other) {
      if (other == null) {
        return;
      }
      if (other.MsgSeqNum != 0UL) {
        MsgSeqNum = other.MsgSeqNum;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.RemainingQuantity != 0UL) {
        RemainingQuantity = other.RemainingQuantity;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.Price != 0UL) {
        Price = other.Price;
      }
      if (other.Quantity != 0UL) {
        Quantity = other.Quantity;
      }
      if (other.CumulativeQuantity != 0UL) {
        CumulativeQuantity = other.CumulativeQuantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            RemainingQuantity = input.ReadUInt64();
            break;
          }
          case 48: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 64: {
            Price = input.ReadUInt64();
            break;
          }
          case 72: {
            Quantity = input.ReadUInt64();
            break;
          }
          case 80: {
            CumulativeQuantity = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            RemainingQuantity = input.ReadUInt64();
            break;
          }
          case 48: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 64: {
            Price = input.ReadUInt64();
            break;
          }
          case 72: {
            Quantity = input.ReadUInt64();
            break;
          }
          case 80: {
            CumulativeQuantity = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Mass-cancel-ack confirms a mass-cancel request. If `reason` is set, the mass
  /// cancel was not applied and there are no affected orders. Individual
  /// CancelOrderAck's will be sent for each order that was affected.
  /// </summary>
  public sealed partial class MassCancelAck : pb::IMessage<MassCancelAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MassCancelAck> _parser = new pb::MessageParser<MassCancelAck>(() => new MassCancelAck());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MassCancelAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassCancelAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassCancelAck(MassCancelAck other) : this() {
      _hasBits0 = other._hasBits0;
      msgSeqNum_ = other.msgSeqNum_;
      subaccountId_ = other.subaccountId_;
      requestId_ = other.requestId_;
      transactTime_ = other.transactTime_;
      reason_ = other.reason_;
      totalAffectedOrders_ = other.totalAffectedOrders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassCancelAck Clone() {
      return new MassCancelAck(this);
    }

    /// <summary>Field number for the "msg_seq_num" field.</summary>
    public const int MsgSeqNumFieldNumber = 1;
    private ulong msgSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgSeqNum {
      get { return msgSeqNum_; }
      set {
        msgSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 2;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// The request ID specified in the mass-cancel request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 4;
    private ulong transactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private global::Cube.Trade.MassCancelAck.Types.Reason reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.MassCancelAck.Types.Reason Reason {
      get { if ((_hasBits0 & 1) != 0) { return reason_; } else { return global::Cube.Trade.MassCancelAck.Types.Reason.Unclassified; } }
      set {
        _hasBits0 |= 1;
        reason_ = value;
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "total_affected_orders" field.</summary>
    public const int TotalAffectedOrdersFieldNumber = 7;
    private uint totalAffectedOrders_;
    /// <summary>
    /// The total number of orders that were canceled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalAffectedOrders {
      get { return totalAffectedOrders_; }
      set {
        totalAffectedOrders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MassCancelAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MassCancelAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgSeqNum != other.MsgSeqNum) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (RequestId != other.RequestId) return false;
      if (TransactTime != other.TransactTime) return false;
      if (Reason != other.Reason) return false;
      if (TotalAffectedOrders != other.TotalAffectedOrders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgSeqNum != 0UL) hash ^= MsgSeqNum.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (TotalAffectedOrders != 0) hash ^= TotalAffectedOrders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SubaccountId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (HasReason) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (TotalAffectedOrders != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TotalAffectedOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SubaccountId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (HasReason) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (TotalAffectedOrders != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TotalAffectedOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgSeqNum);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (TotalAffectedOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalAffectedOrders);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MassCancelAck other) {
      if (other == null) {
        return;
      }
      if (other.MsgSeqNum != 0UL) {
        MsgSeqNum = other.MsgSeqNum;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.TotalAffectedOrders != 0) {
        TotalAffectedOrders = other.TotalAffectedOrders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.MassCancelAck.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            TotalAffectedOrders = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.MassCancelAck.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            TotalAffectedOrders = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MassCancelAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("UNCLASSIFIED")] Unclassified = 0,
        [pbr::OriginalName("INVALID_MARKET_ID")] InvalidMarketId = 1,
        [pbr::OriginalName("INVALID_SIDE")] InvalidSide = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// New-order-reject indicates that a new-order request was not applied.
  /// </summary>
  public sealed partial class NewOrderReject : pb::IMessage<NewOrderReject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewOrderReject> _parser = new pb::MessageParser<NewOrderReject>(() => new NewOrderReject());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewOrderReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderReject(NewOrderReject other) : this() {
      _hasBits0 = other._hasBits0;
      msgSeqNum_ = other.msgSeqNum_;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      transactTime_ = other.transactTime_;
      subaccountId_ = other.subaccountId_;
      reason_ = other.reason_;
      marketId_ = other.marketId_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      side_ = other.side_;
      timeInForce_ = other.timeInForce_;
      orderType_ = other.orderType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderReject Clone() {
      return new NewOrderReject(this);
    }

    /// <summary>Field number for the "msg_seq_num" field.</summary>
    public const int MsgSeqNumFieldNumber = 1;
    private ulong msgSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgSeqNum {
      get { return msgSeqNum_; }
      set {
        msgSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 2;
    private ulong clientOrderId_;
    /// <summary>
    /// The client order ID specified in the new-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// The request ID specified in the new-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 4;
    private ulong transactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 5;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private global::Cube.Trade.NewOrderReject.Types.Reason reason_ = global::Cube.Trade.NewOrderReject.Types.Reason.Unclassified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.NewOrderReject.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 7;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 8;
    private ulong price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Price {
      get { if ((_hasBits0 & 1) != 0) { return price_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        price_ = value;
      }
    }
    /// <summary>Gets whether the "price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrice() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 9;
    private ulong quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 10;
    private global::Cube.Trade.Side side_ = global::Cube.Trade.Side.Bid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Side Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "time_in_force" field.</summary>
    public const int TimeInForceFieldNumber = 11;
    private global::Cube.Trade.TimeInForce timeInForce_ = global::Cube.Trade.TimeInForce.ImmediateOrCancel;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.TimeInForce TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 12;
    private global::Cube.Trade.OrderType orderType_ = global::Cube.Trade.OrderType.Limit;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewOrderReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewOrderReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgSeqNum != other.MsgSeqNum) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (TransactTime != other.TransactTime) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (Reason != other.Reason) return false;
      if (MarketId != other.MarketId) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (Side != other.Side) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (OrderType != other.OrderType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgSeqNum != 0UL) hash ^= MsgSeqNum.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (Reason != global::Cube.Trade.NewOrderReject.Types.Reason.Unclassified) hash ^= Reason.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (HasPrice) hash ^= Price.GetHashCode();
      if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
      if (Side != global::Cube.Trade.Side.Bid) hash ^= Side.GetHashCode();
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) hash ^= TimeInForce.GetHashCode();
      if (OrderType != global::Cube.Trade.OrderType.Limit) hash ^= OrderType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SubaccountId);
      }
      if (Reason != global::Cube.Trade.NewOrderReject.Types.Reason.Unclassified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (HasPrice) {
        output.WriteRawTag(64);
        output.WriteUInt64(Price);
      }
      if (Quantity != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OrderType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SubaccountId);
      }
      if (Reason != global::Cube.Trade.NewOrderReject.Types.Reason.Unclassified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (HasPrice) {
        output.WriteRawTag(64);
        output.WriteUInt64(Price);
      }
      if (Quantity != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OrderType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (Reason != global::Cube.Trade.NewOrderReject.Types.Reason.Unclassified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (HasPrice) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
      }
      if (Quantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewOrderReject other) {
      if (other == null) {
        return;
      }
      if (other.MsgSeqNum != 0UL) {
        MsgSeqNum = other.MsgSeqNum;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.Reason != global::Cube.Trade.NewOrderReject.Types.Reason.Unclassified) {
        Reason = other.Reason;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.HasPrice) {
        Price = other.Price;
      }
      if (other.Quantity != 0UL) {
        Quantity = other.Quantity;
      }
      if (other.Side != global::Cube.Trade.Side.Bid) {
        Side = other.Side;
      }
      if (other.TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        TimeInForce = other.TimeInForce;
      }
      if (other.OrderType != global::Cube.Trade.OrderType.Limit) {
        OrderType = other.OrderType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.NewOrderReject.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 64: {
            Price = input.ReadUInt64();
            break;
          }
          case 72: {
            Quantity = input.ReadUInt64();
            break;
          }
          case 80: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
          case 88: {
            TimeInForce = (global::Cube.Trade.TimeInForce) input.ReadEnum();
            break;
          }
          case 96: {
            OrderType = (global::Cube.Trade.OrderType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.NewOrderReject.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 64: {
            Price = input.ReadUInt64();
            break;
          }
          case 72: {
            Quantity = input.ReadUInt64();
            break;
          }
          case 80: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
          case 88: {
            TimeInForce = (global::Cube.Trade.TimeInForce) input.ReadEnum();
            break;
          }
          case 96: {
            OrderType = (global::Cube.Trade.OrderType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the NewOrderReject message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Reasons that are prefixed with `INVALID_` normally indicate that the
      /// corresponding field did not take a valid value.
      /// </summary>
      public enum Reason {
        [pbr::OriginalName("UNCLASSIFIED")] Unclassified = 0,
        /// <summary>
        /// Quantity was zero.
        /// </summary>
        [pbr::OriginalName("INVALID_QUANTITY")] InvalidQuantity = 1,
        /// <summary>
        /// The specified market ID does not exist.
        /// </summary>
        [pbr::OriginalName("INVALID_MARKET_ID")] InvalidMarketId = 2,
        /// <summary>
        /// The specified client order ID was not unique among open orders for this
        /// subaccount.
        /// </summary>
        [pbr::OriginalName("DUPLICATE_ORDER_ID")] DuplicateOrderId = 3,
        [pbr::OriginalName("INVALID_SIDE")] InvalidSide = 4,
        [pbr::OriginalName("INVALID_TIME_IN_FORCE")] InvalidTimeInForce = 5,
        [pbr::OriginalName("INVALID_ORDER_TYPE")] InvalidOrderType = 6,
        [pbr::OriginalName("INVALID_POST_ONLY")] InvalidPostOnly = 7,
        [pbr::OriginalName("INVALID_SELF_TRADE_PREVENTION")] InvalidSelfTradePrevention = 8,
        /// <summary>
        /// Internal error: the matching engine could not find this subaccounts
        /// positions.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_TRADER")] UnknownTrader = 9,
        [pbr::OriginalName("PRICE_WITH_MARKET_ORDER")] PriceWithMarketOrder = 10,
        [pbr::OriginalName("POST_ONLY_WITH_MARKET_ORDER")] PostOnlyWithMarketOrder = 11,
        [pbr::OriginalName("POST_ONLY_WITH_INVALID_TIF")] PostOnlyWithInvalidTif = 12,
        /// <summary>
        /// The sum of open orders and this new-order would exceed the subaccounts
        /// spot limits.
        /// </summary>
        [pbr::OriginalName("EXCEEDED_SPOT_POSITION")] ExceededSpotPosition = 13,
        [pbr::OriginalName("NO_OPPOSING_LIMIT_ORDER")] NoOpposingLimitOrder = 14,
        /// <summary>
        /// The post-only order would have crossed and traded.
        /// </summary>
        [pbr::OriginalName("POST_ONLY_WOULD_TRADE")] PostOnlyWouldTrade = 15,
        /// <summary>
        /// A FOK was not fully fillable against resting orders at the requested
        /// price and quantity.
        /// </summary>
        [pbr::OriginalName("DID_NOT_FULLY_FILL")] DidNotFullyFill = 16,
      }

    }
    #endregion

  }

  /// <summary>
  /// Cancel-order-reject indicates that a cancel-order request was not applied.
  /// </summary>
  public sealed partial class CancelOrderReject : pb::IMessage<CancelOrderReject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelOrderReject> _parser = new pb::MessageParser<CancelOrderReject>(() => new CancelOrderReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelOrderReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderReject(CancelOrderReject other) : this() {
      msgSeqNum_ = other.msgSeqNum_;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      transactTime_ = other.transactTime_;
      subaccountId_ = other.subaccountId_;
      reason_ = other.reason_;
      marketId_ = other.marketId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrderReject Clone() {
      return new CancelOrderReject(this);
    }

    /// <summary>Field number for the "msg_seq_num" field.</summary>
    public const int MsgSeqNumFieldNumber = 1;
    private ulong msgSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgSeqNum {
      get { return msgSeqNum_; }
      set {
        msgSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 2;
    private ulong clientOrderId_;
    /// <summary>
    /// The client order ID specified in the cancel-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// The request ID specified in the cancel-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 4;
    private ulong transactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 5;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private global::Cube.Trade.CancelOrderReject.Types.Reason reason_ = global::Cube.Trade.CancelOrderReject.Types.Reason.Unclassified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.CancelOrderReject.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 7;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelOrderReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelOrderReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgSeqNum != other.MsgSeqNum) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (TransactTime != other.TransactTime) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (Reason != other.Reason) return false;
      if (MarketId != other.MarketId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgSeqNum != 0UL) hash ^= MsgSeqNum.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (Reason != global::Cube.Trade.CancelOrderReject.Types.Reason.Unclassified) hash ^= Reason.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SubaccountId);
      }
      if (Reason != global::Cube.Trade.CancelOrderReject.Types.Reason.Unclassified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SubaccountId);
      }
      if (Reason != global::Cube.Trade.CancelOrderReject.Types.Reason.Unclassified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (Reason != global::Cube.Trade.CancelOrderReject.Types.Reason.Unclassified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelOrderReject other) {
      if (other == null) {
        return;
      }
      if (other.MsgSeqNum != 0UL) {
        MsgSeqNum = other.MsgSeqNum;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.Reason != global::Cube.Trade.CancelOrderReject.Types.Reason.Unclassified) {
        Reason = other.Reason;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.CancelOrderReject.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.CancelOrderReject.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CancelOrderReject message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("UNCLASSIFIED")] Unclassified = 0,
        /// <summary>
        /// The specified market ID does not exist.
        /// </summary>
        [pbr::OriginalName("INVALID_MARKET_ID")] InvalidMarketId = 1,
        /// <summary>
        /// The specified client order ID does not exist for the corresponding market
        /// ID and subaccount ID.
        /// </summary>
        [pbr::OriginalName("ORDER_NOT_FOUND")] OrderNotFound = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Modify-order-reject indicates that a modify-order request was not applied.
  /// </summary>
  public sealed partial class ModifyOrderReject : pb::IMessage<ModifyOrderReject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ModifyOrderReject> _parser = new pb::MessageParser<ModifyOrderReject>(() => new ModifyOrderReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyOrderReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrderReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrderReject(ModifyOrderReject other) : this() {
      msgSeqNum_ = other.msgSeqNum_;
      clientOrderId_ = other.clientOrderId_;
      requestId_ = other.requestId_;
      transactTime_ = other.transactTime_;
      subaccountId_ = other.subaccountId_;
      reason_ = other.reason_;
      marketId_ = other.marketId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyOrderReject Clone() {
      return new ModifyOrderReject(this);
    }

    /// <summary>Field number for the "msg_seq_num" field.</summary>
    public const int MsgSeqNumFieldNumber = 1;
    private ulong msgSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgSeqNum {
      get { return msgSeqNum_; }
      set {
        msgSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 2;
    private ulong clientOrderId_;
    /// <summary>
    /// The client order ID specified in the modify-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private ulong requestId_;
    /// <summary>
    /// The request ID specified in the modify-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 4;
    private ulong transactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 5;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private global::Cube.Trade.ModifyOrderReject.Types.Reason reason_ = global::Cube.Trade.ModifyOrderReject.Types.Reason.Unclassified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.ModifyOrderReject.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 7;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyOrderReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyOrderReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgSeqNum != other.MsgSeqNum) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (RequestId != other.RequestId) return false;
      if (TransactTime != other.TransactTime) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (Reason != other.Reason) return false;
      if (MarketId != other.MarketId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgSeqNum != 0UL) hash ^= MsgSeqNum.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (RequestId != 0UL) hash ^= RequestId.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (Reason != global::Cube.Trade.ModifyOrderReject.Types.Reason.Unclassified) hash ^= Reason.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SubaccountId);
      }
      if (Reason != global::Cube.Trade.ModifyOrderReject.Types.Reason.Unclassified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClientOrderId);
      }
      if (RequestId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SubaccountId);
      }
      if (Reason != global::Cube.Trade.ModifyOrderReject.Types.Reason.Unclassified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Reason);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MarketId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgSeqNum);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (RequestId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (Reason != global::Cube.Trade.ModifyOrderReject.Types.Reason.Unclassified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyOrderReject other) {
      if (other == null) {
        return;
      }
      if (other.MsgSeqNum != 0UL) {
        MsgSeqNum = other.MsgSeqNum;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.RequestId != 0UL) {
        RequestId = other.RequestId;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.Reason != global::Cube.Trade.ModifyOrderReject.Types.Reason.Unclassified) {
        Reason = other.Reason;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.ModifyOrderReject.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 40: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 48: {
            Reason = (global::Cube.Trade.ModifyOrderReject.Types.Reason) input.ReadEnum();
            break;
          }
          case 56: {
            MarketId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ModifyOrderReject message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Reasons that are prefixed with `INVALID_` normally indicate that the
      /// corresponding field did not take a valid value.
      /// </summary>
      public enum Reason {
        [pbr::OriginalName("UNCLASSIFIED")] Unclassified = 0,
        /// <summary>
        /// Quantity was zero.
        /// </summary>
        [pbr::OriginalName("INVALID_QUANTITY")] InvalidQuantity = 1,
        /// <summary>
        /// The specified market ID does not exist.
        /// </summary>
        [pbr::OriginalName("INVALID_MARKET_ID")] InvalidMarketId = 2,
        /// <summary>
        /// The specified client order ID does not exist for the corresponding market
        /// ID and subaccount ID.
        /// </summary>
        [pbr::OriginalName("ORDER_NOT_FOUND")] OrderNotFound = 3,
        [pbr::OriginalName("INVALID_IFM")] InvalidIfm = 4,
        [pbr::OriginalName("INVALID_POST_ONLY")] InvalidPostOnly = 5,
        [pbr::OriginalName("INVALID_SELF_TRADE_PREVENTION")] InvalidSelfTradePrevention = 6,
        /// <summary>
        /// Internal error: the matching engine could not find this subaccounts
        /// positions.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_TRADER")] UnknownTrader = 7,
        /// <summary>
        /// If the modify-order would cause a cancel-replace, the sum of open orders
        /// and this replacement order would exceed the subaccounts spot limits.
        /// </summary>
        [pbr::OriginalName("EXCEEDED_SPOT_POSITION")] ExceededSpotPosition = 8,
        /// <summary>
        /// If the modify-order would cause a cancel-replace, the post-only
        /// replacement would have crossed and traded.
        /// </summary>
        [pbr::OriginalName("POST_ONLY_WOULD_TRADE")] PostOnlyWouldTrade = 9,
      }

    }
    #endregion

  }

  /// <summary>
  /// A fill for an order.
  /// </summary>
  public sealed partial class Fill : pb::IMessage<Fill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Fill> _parser = new pb::MessageParser<Fill>(() => new Fill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Fill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fill(Fill other) : this() {
      msgSeqNum_ = other.msgSeqNum_;
      marketId_ = other.marketId_;
      clientOrderId_ = other.clientOrderId_;
      exchangeOrderId_ = other.exchangeOrderId_;
      fillPrice_ = other.fillPrice_;
      fillQuantity_ = other.fillQuantity_;
      leavesQuantity_ = other.leavesQuantity_;
      transactTime_ = other.transactTime_;
      subaccountId_ = other.subaccountId_;
      cumulativeQuantity_ = other.cumulativeQuantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fill Clone() {
      return new Fill(this);
    }

    /// <summary>Field number for the "msg_seq_num" field.</summary>
    public const int MsgSeqNumFieldNumber = 1;
    private ulong msgSeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgSeqNum {
      get { return msgSeqNum_; }
      set {
        msgSeqNum_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 2;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 3;
    private ulong clientOrderId_;
    /// <summary>
    /// The client order ID specified in the new-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "exchange_order_id" field.</summary>
    public const int ExchangeOrderIdFieldNumber = 4;
    private ulong exchangeOrderId_;
    /// <summary>
    /// [Exchange order ID](#exchange-order-id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExchangeOrderId {
      get { return exchangeOrderId_; }
      set {
        exchangeOrderId_ = value;
      }
    }

    /// <summary>Field number for the "fill_price" field.</summary>
    public const int FillPriceFieldNumber = 5;
    private ulong fillPrice_;
    /// <summary>
    /// The price that this trade occured at.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FillPrice {
      get { return fillPrice_; }
      set {
        fillPrice_ = value;
      }
    }

    /// <summary>Field number for the "fill_quantity" field.</summary>
    public const int FillQuantityFieldNumber = 6;
    private ulong fillQuantity_;
    /// <summary>
    /// The quantity that was traded in this fill.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FillQuantity {
      get { return fillQuantity_; }
      set {
        fillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "leaves_quantity" field.</summary>
    public const int LeavesQuantityFieldNumber = 7;
    private ulong leavesQuantity_;
    /// <summary>
    /// The remaining quantity for this order after the fill is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeavesQuantity {
      get { return leavesQuantity_; }
      set {
        leavesQuantity_ = value;
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 8;
    private ulong transactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 9;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "cumulative_quantity" field.</summary>
    public const int CumulativeQuantityFieldNumber = 10;
    private ulong cumulativeQuantity_;
    /// <summary>
    /// The cumulative filled quantity for this order after the fill is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CumulativeQuantity {
      get { return cumulativeQuantity_; }
      set {
        cumulativeQuantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Fill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Fill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgSeqNum != other.MsgSeqNum) return false;
      if (MarketId != other.MarketId) return false;
      if (ClientOrderId != other.ClientOrderId) return false;
      if (ExchangeOrderId != other.ExchangeOrderId) return false;
      if (FillPrice != other.FillPrice) return false;
      if (FillQuantity != other.FillQuantity) return false;
      if (LeavesQuantity != other.LeavesQuantity) return false;
      if (TransactTime != other.TransactTime) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (CumulativeQuantity != other.CumulativeQuantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgSeqNum != 0UL) hash ^= MsgSeqNum.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (ExchangeOrderId != 0UL) hash ^= ExchangeOrderId.GetHashCode();
      if (FillPrice != 0UL) hash ^= FillPrice.GetHashCode();
      if (FillQuantity != 0UL) hash ^= FillQuantity.GetHashCode();
      if (LeavesQuantity != 0UL) hash ^= LeavesQuantity.GetHashCode();
      if (TransactTime != 0UL) hash ^= TransactTime.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (CumulativeQuantity != 0UL) hash ^= CumulativeQuantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MarketId);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ClientOrderId);
      }
      if (ExchangeOrderId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ExchangeOrderId);
      }
      if (FillPrice != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FillPrice);
      }
      if (FillQuantity != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FillQuantity);
      }
      if (LeavesQuantity != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(LeavesQuantity);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(SubaccountId);
      }
      if (CumulativeQuantity != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgSeqNum != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgSeqNum);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MarketId);
      }
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ClientOrderId);
      }
      if (ExchangeOrderId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ExchangeOrderId);
      }
      if (FillPrice != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FillPrice);
      }
      if (FillQuantity != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FillQuantity);
      }
      if (LeavesQuantity != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(LeavesQuantity);
      }
      if (TransactTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TransactTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(SubaccountId);
      }
      if (CumulativeQuantity != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgSeqNum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgSeqNum);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (ExchangeOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExchangeOrderId);
      }
      if (FillPrice != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FillPrice);
      }
      if (FillQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FillQuantity);
      }
      if (LeavesQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeavesQuantity);
      }
      if (TransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactTime);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (CumulativeQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Fill other) {
      if (other == null) {
        return;
      }
      if (other.MsgSeqNum != 0UL) {
        MsgSeqNum = other.MsgSeqNum;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.ExchangeOrderId != 0UL) {
        ExchangeOrderId = other.ExchangeOrderId;
      }
      if (other.FillPrice != 0UL) {
        FillPrice = other.FillPrice;
      }
      if (other.FillQuantity != 0UL) {
        FillQuantity = other.FillQuantity;
      }
      if (other.LeavesQuantity != 0UL) {
        LeavesQuantity = other.LeavesQuantity;
      }
      if (other.TransactTime != 0UL) {
        TransactTime = other.TransactTime;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.CumulativeQuantity != 0UL) {
        CumulativeQuantity = other.CumulativeQuantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 24: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 32: {
            ExchangeOrderId = input.ReadUInt64();
            break;
          }
          case 40: {
            FillPrice = input.ReadUInt64();
            break;
          }
          case 48: {
            FillQuantity = input.ReadUInt64();
            break;
          }
          case 56: {
            LeavesQuantity = input.ReadUInt64();
            break;
          }
          case 64: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 72: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 80: {
            CumulativeQuantity = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgSeqNum = input.ReadUInt64();
            break;
          }
          case 16: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 24: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 32: {
            ExchangeOrderId = input.ReadUInt64();
            break;
          }
          case 40: {
            FillPrice = input.ReadUInt64();
            break;
          }
          case 48: {
            FillQuantity = input.ReadUInt64();
            break;
          }
          case 56: {
            LeavesQuantity = input.ReadUInt64();
            break;
          }
          case 64: {
            TransactTime = input.ReadUInt64();
            break;
          }
          case 72: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 80: {
            CumulativeQuantity = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The user's underlying asset position. These are sent asynchronously as
  /// positions are updated and broadcast through internal position channels. They
  /// can also be tracked by applying other OrderResponse messages individually.
  /// </summary>
  public sealed partial class AssetPosition : pb::IMessage<AssetPosition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetPosition> _parser = new pb::MessageParser<AssetPosition>(() => new AssetPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetPosition(AssetPosition other) : this() {
      subaccountId_ = other.subaccountId_;
      assetId_ = other.assetId_;
      total_ = other.total_ != null ? other.total_.Clone() : null;
      available_ = other.available_ != null ? other.available_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetPosition Clone() {
      return new AssetPosition(this);
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 1;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 2;
    private ulong assetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AssetId {
      get { return assetId_; }
      set {
        assetId_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private global::Cube.Trade.RawUnits total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.RawUnits Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 4;
    private global::Cube.Trade.RawUnits available_;
    /// <summary>
    /// The available amount after open orders are subtracted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.RawUnits Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubaccountId != other.SubaccountId) return false;
      if (AssetId != other.AssetId) return false;
      if (!object.Equals(Total, other.Total)) return false;
      if (!object.Equals(Available, other.Available)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (AssetId != 0UL) hash ^= AssetId.GetHashCode();
      if (total_ != null) hash ^= Total.GetHashCode();
      if (available_ != null) hash ^= Available.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SubaccountId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubaccountId);
      }
      if (AssetId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AssetId);
      }
      if (total_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Total);
      }
      if (available_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Available);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SubaccountId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubaccountId);
      }
      if (AssetId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AssetId);
      }
      if (total_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Total);
      }
      if (available_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Available);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (AssetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AssetId);
      }
      if (total_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Total);
      }
      if (available_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Available);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetPosition other) {
      if (other == null) {
        return;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.AssetId != 0UL) {
        AssetId = other.AssetId;
      }
      if (other.total_ != null) {
        if (total_ == null) {
          Total = new global::Cube.Trade.RawUnits();
        }
        Total.MergeFrom(other.Total);
      }
      if (other.available_ != null) {
        if (available_ == null) {
          Available = new global::Cube.Trade.RawUnits();
        }
        Available.MergeFrom(other.Available);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            AssetId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (total_ == null) {
              Total = new global::Cube.Trade.RawUnits();
            }
            input.ReadMessage(Total);
            break;
          }
          case 34: {
            if (available_ == null) {
              Available = new global::Cube.Trade.RawUnits();
            }
            input.ReadMessage(Available);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            AssetId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (total_ == null) {
              Total = new global::Cube.Trade.RawUnits();
            }
            input.ReadMessage(Total);
            break;
          }
          case 34: {
            if (available_ == null) {
              Available = new global::Cube.Trade.RawUnits();
            }
            input.ReadMessage(Available);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Raw-units is a 256-bit number for the amount of an asset. The precision is
  /// based on the underlying asset. For example, ETH is specified as if in
  /// fixed-point 10^18, while BTC is specified as if in fixed-point 10^8.
  ///
  /// The number is interpreted in 'little-endian' as `[word0, word1, word2,
  /// word3]`.
  /// </summary>
  public sealed partial class RawUnits : pb::IMessage<RawUnits>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RawUnits> _parser = new pb::MessageParser<RawUnits>(() => new RawUnits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawUnits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawUnits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawUnits(RawUnits other) : this() {
      word0_ = other.word0_;
      word1_ = other.word1_;
      word2_ = other.word2_;
      word3_ = other.word3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawUnits Clone() {
      return new RawUnits(this);
    }

    /// <summary>Field number for the "word0" field.</summary>
    public const int Word0FieldNumber = 1;
    private ulong word0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Word0 {
      get { return word0_; }
      set {
        word0_ = value;
      }
    }

    /// <summary>Field number for the "word1" field.</summary>
    public const int Word1FieldNumber = 2;
    private ulong word1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Word1 {
      get { return word1_; }
      set {
        word1_ = value;
      }
    }

    /// <summary>Field number for the "word2" field.</summary>
    public const int Word2FieldNumber = 3;
    private ulong word2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Word2 {
      get { return word2_; }
      set {
        word2_ = value;
      }
    }

    /// <summary>Field number for the "word3" field.</summary>
    public const int Word3FieldNumber = 4;
    private ulong word3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Word3 {
      get { return word3_; }
      set {
        word3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawUnits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawUnits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Word0 != other.Word0) return false;
      if (Word1 != other.Word1) return false;
      if (Word2 != other.Word2) return false;
      if (Word3 != other.Word3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Word0 != 0UL) hash ^= Word0.GetHashCode();
      if (Word1 != 0UL) hash ^= Word1.GetHashCode();
      if (Word2 != 0UL) hash ^= Word2.GetHashCode();
      if (Word3 != 0UL) hash ^= Word3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Word0 != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Word0);
      }
      if (Word1 != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Word1);
      }
      if (Word2 != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Word2);
      }
      if (Word3 != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Word3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Word0 != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Word0);
      }
      if (Word1 != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Word1);
      }
      if (Word2 != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Word2);
      }
      if (Word3 != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Word3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Word0 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Word0);
      }
      if (Word1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Word1);
      }
      if (Word2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Word2);
      }
      if (Word3 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Word3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawUnits other) {
      if (other == null) {
        return;
      }
      if (other.Word0 != 0UL) {
        Word0 = other.Word0;
      }
      if (other.Word1 != 0UL) {
        Word1 = other.Word1;
      }
      if (other.Word2 != 0UL) {
        Word2 = other.Word2;
      }
      if (other.Word3 != 0UL) {
        Word3 = other.Word3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Word0 = input.ReadUInt64();
            break;
          }
          case 16: {
            Word1 = input.ReadUInt64();
            break;
          }
          case 24: {
            Word2 = input.ReadUInt64();
            break;
          }
          case 32: {
            Word3 = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Word0 = input.ReadUInt64();
            break;
          }
          case 16: {
            Word1 = input.ReadUInt64();
            break;
          }
          case 24: {
            Word2 = input.ReadUInt64();
            break;
          }
          case 32: {
            Word3 = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A bootstrap message sent after Credentials authentication.
  /// Client resting and pending orders used to bootstrap state. Sent as the first
  /// message(s) after initialization. Bootstrap is complete after a message tagged
  /// `Done` is received and every message after that will be an `OrderResponse`.
  /// Multiple messages may be received for `RestingOrders` and `AssetPositions`
  /// and these should be concatenated.
  /// </summary>
  public sealed partial class Bootstrap : pb::IMessage<Bootstrap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bootstrap> _parser = new pb::MessageParser<Bootstrap>(() => new Bootstrap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bootstrap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bootstrap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bootstrap(Bootstrap other) : this() {
      switch (other.InnerCase) {
        case InnerOneofCase.Done:
          Done = other.Done.Clone();
          break;
        case InnerOneofCase.Resting:
          Resting = other.Resting.Clone();
          break;
        case InnerOneofCase.Position:
          Position = other.Position.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bootstrap Clone() {
      return new Bootstrap(this);
    }

    /// <summary>Field number for the "done" field.</summary>
    public const int DoneFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Done Done {
      get { return innerCase_ == InnerOneofCase.Done ? (global::Cube.Trade.Done) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Done;
      }
    }

    /// <summary>Field number for the "resting" field.</summary>
    public const int RestingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.RestingOrders Resting {
      get { return innerCase_ == InnerOneofCase.Resting ? (global::Cube.Trade.RestingOrders) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Resting;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.AssetPositions Position {
      get { return innerCase_ == InnerOneofCase.Position ? (global::Cube.Trade.AssetPositions) inner_ : null; }
      set {
        inner_ = value;
        innerCase_ = value == null ? InnerOneofCase.None : InnerOneofCase.Position;
      }
    }

    private object inner_;
    /// <summary>Enum of possible cases for the "inner" oneof.</summary>
    public enum InnerOneofCase {
      None = 0,
      Done = 1,
      Resting = 2,
      Position = 3,
    }
    private InnerOneofCase innerCase_ = InnerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerOneofCase InnerCase {
      get { return innerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInner() {
      innerCase_ = InnerOneofCase.None;
      inner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bootstrap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bootstrap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Done, other.Done)) return false;
      if (!object.Equals(Resting, other.Resting)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (InnerCase != other.InnerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (innerCase_ == InnerOneofCase.Done) hash ^= Done.GetHashCode();
      if (innerCase_ == InnerOneofCase.Resting) hash ^= Resting.GetHashCode();
      if (innerCase_ == InnerOneofCase.Position) hash ^= Position.GetHashCode();
      hash ^= (int) innerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (innerCase_ == InnerOneofCase.Done) {
        output.WriteRawTag(10);
        output.WriteMessage(Done);
      }
      if (innerCase_ == InnerOneofCase.Resting) {
        output.WriteRawTag(18);
        output.WriteMessage(Resting);
      }
      if (innerCase_ == InnerOneofCase.Position) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (innerCase_ == InnerOneofCase.Done) {
        output.WriteRawTag(10);
        output.WriteMessage(Done);
      }
      if (innerCase_ == InnerOneofCase.Resting) {
        output.WriteRawTag(18);
        output.WriteMessage(Resting);
      }
      if (innerCase_ == InnerOneofCase.Position) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (innerCase_ == InnerOneofCase.Done) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Done);
      }
      if (innerCase_ == InnerOneofCase.Resting) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resting);
      }
      if (innerCase_ == InnerOneofCase.Position) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bootstrap other) {
      if (other == null) {
        return;
      }
      switch (other.InnerCase) {
        case InnerOneofCase.Done:
          if (Done == null) {
            Done = new global::Cube.Trade.Done();
          }
          Done.MergeFrom(other.Done);
          break;
        case InnerOneofCase.Resting:
          if (Resting == null) {
            Resting = new global::Cube.Trade.RestingOrders();
          }
          Resting.MergeFrom(other.Resting);
          break;
        case InnerOneofCase.Position:
          if (Position == null) {
            Position = new global::Cube.Trade.AssetPositions();
          }
          Position.MergeFrom(other.Position);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Cube.Trade.Done subBuilder = new global::Cube.Trade.Done();
            if (innerCase_ == InnerOneofCase.Done) {
              subBuilder.MergeFrom(Done);
            }
            input.ReadMessage(subBuilder);
            Done = subBuilder;
            break;
          }
          case 18: {
            global::Cube.Trade.RestingOrders subBuilder = new global::Cube.Trade.RestingOrders();
            if (innerCase_ == InnerOneofCase.Resting) {
              subBuilder.MergeFrom(Resting);
            }
            input.ReadMessage(subBuilder);
            Resting = subBuilder;
            break;
          }
          case 26: {
            global::Cube.Trade.AssetPositions subBuilder = new global::Cube.Trade.AssetPositions();
            if (innerCase_ == InnerOneofCase.Position) {
              subBuilder.MergeFrom(Position);
            }
            input.ReadMessage(subBuilder);
            Position = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Cube.Trade.Done subBuilder = new global::Cube.Trade.Done();
            if (innerCase_ == InnerOneofCase.Done) {
              subBuilder.MergeFrom(Done);
            }
            input.ReadMessage(subBuilder);
            Done = subBuilder;
            break;
          }
          case 18: {
            global::Cube.Trade.RestingOrders subBuilder = new global::Cube.Trade.RestingOrders();
            if (innerCase_ == InnerOneofCase.Resting) {
              subBuilder.MergeFrom(Resting);
            }
            input.ReadMessage(subBuilder);
            Resting = subBuilder;
            break;
          }
          case 26: {
            global::Cube.Trade.AssetPositions subBuilder = new global::Cube.Trade.AssetPositions();
            if (innerCase_ == InnerOneofCase.Position) {
              subBuilder.MergeFrom(Position);
            }
            input.ReadMessage(subBuilder);
            Position = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A chunk of resting orders. Sent on bootstrap.
  /// </summary>
  public sealed partial class RestingOrders : pb::IMessage<RestingOrders>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RestingOrders> _parser = new pb::MessageParser<RestingOrders>(() => new RestingOrders());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestingOrders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestingOrders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestingOrders(RestingOrders other) : this() {
      orders_ = other.orders_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestingOrders Clone() {
      return new RestingOrders(this);
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.Trade.RestingOrder> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.Trade.RestingOrder.Parser);
    private readonly pbc::RepeatedField<global::Cube.Trade.RestingOrder> orders_ = new pbc::RepeatedField<global::Cube.Trade.RestingOrder>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.Trade.RestingOrder> Orders {
      get { return orders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestingOrders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestingOrders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orders_.Equals(other.orders_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orders_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orders_.WriteTo(output, _repeated_orders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orders_.WriteTo(ref output, _repeated_orders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestingOrders other) {
      if (other == null) {
        return;
      }
      orders_.Add(other.orders_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            orders_.AddEntriesFrom(ref input, _repeated_orders_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A chunk of asset positions. Sent on bootstrap.
  /// </summary>
  public sealed partial class AssetPositions : pb::IMessage<AssetPositions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetPositions> _parser = new pb::MessageParser<AssetPositions>(() => new AssetPositions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetPositions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetPositions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetPositions(AssetPositions other) : this() {
      positions_ = other.positions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetPositions Clone() {
      return new AssetPositions(this);
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cube.Trade.AssetPosition> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(10, global::Cube.Trade.AssetPosition.Parser);
    private readonly pbc::RepeatedField<global::Cube.Trade.AssetPosition> positions_ = new pbc::RepeatedField<global::Cube.Trade.AssetPosition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cube.Trade.AssetPosition> Positions {
      get { return positions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetPositions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetPositions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!positions_.Equals(other.positions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= positions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      positions_.WriteTo(output, _repeated_positions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      positions_.WriteTo(ref output, _repeated_positions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetPositions other) {
      if (other == null) {
        return;
      }
      positions_.Add(other.positions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            positions_.AddEntriesFrom(ref input, _repeated_positions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An indication that bootstrap is complete.
  /// </summary>
  public sealed partial class Done : pb::IMessage<Done>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Done> _parser = new pb::MessageParser<Done>(() => new Done());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Done> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done(Done other) : this() {
      latestTransactTime_ = other.latestTransactTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Done Clone() {
      return new Done(this);
    }

    /// <summary>Field number for the "latest_transact_time" field.</summary>
    public const int LatestTransactTimeFieldNumber = 1;
    private ulong latestTransactTime_;
    /// <summary>
    /// [Transact time](#transact-time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LatestTransactTime {
      get { return latestTransactTime_; }
      set {
        latestTransactTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Done);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Done other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LatestTransactTime != other.LatestTransactTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LatestTransactTime != 0UL) hash ^= LatestTransactTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LatestTransactTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(LatestTransactTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LatestTransactTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(LatestTransactTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LatestTransactTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestTransactTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Done other) {
      if (other == null) {
        return;
      }
      if (other.LatestTransactTime != 0UL) {
        LatestTransactTime = other.LatestTransactTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LatestTransactTime = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LatestTransactTime = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A resting order. Sent on bootstrap in `RestingOrders`.
  /// </summary>
  public sealed partial class RestingOrder : pb::IMessage<RestingOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RestingOrder> _parser = new pb::MessageParser<RestingOrder>(() => new RestingOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestingOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cube.Trade.TradeReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestingOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestingOrder(RestingOrder other) : this() {
      clientOrderId_ = other.clientOrderId_;
      exchangeOrderId_ = other.exchangeOrderId_;
      marketId_ = other.marketId_;
      price_ = other.price_;
      orderQuantity_ = other.orderQuantity_;
      side_ = other.side_;
      timeInForce_ = other.timeInForce_;
      orderType_ = other.orderType_;
      remainingQuantity_ = other.remainingQuantity_;
      restTime_ = other.restTime_;
      subaccountId_ = other.subaccountId_;
      cumulativeQuantity_ = other.cumulativeQuantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestingOrder Clone() {
      return new RestingOrder(this);
    }

    /// <summary>Field number for the "client_order_id" field.</summary>
    public const int ClientOrderIdFieldNumber = 1;
    private ulong clientOrderId_;
    /// <summary>
    /// The client order ID specified in the new-order request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientOrderId {
      get { return clientOrderId_; }
      set {
        clientOrderId_ = value;
      }
    }

    /// <summary>Field number for the "exchange_order_id" field.</summary>
    public const int ExchangeOrderIdFieldNumber = 2;
    private ulong exchangeOrderId_;
    /// <summary>
    /// [Exchange order ID](#exchange-order-id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExchangeOrderId {
      get { return exchangeOrderId_; }
      set {
        exchangeOrderId_ = value;
      }
    }

    /// <summary>Field number for the "market_id" field.</summary>
    public const int MarketIdFieldNumber = 3;
    private ulong marketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MarketId {
      get { return marketId_; }
      set {
        marketId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private ulong price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "order_quantity" field.</summary>
    public const int OrderQuantityFieldNumber = 5;
    private ulong orderQuantity_;
    /// <summary>
    /// The quantity submitted in the latest quantity-modifying request. If the
    /// order has not been modified, then it is the quantity on the new-order-ack.
    /// If it has been modified, then it is the quantity of the latest
    /// modify-order-ack.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OrderQuantity {
      get { return orderQuantity_; }
      set {
        orderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 6;
    private global::Cube.Trade.Side side_ = global::Cube.Trade.Side.Bid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.Side Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "time_in_force" field.</summary>
    public const int TimeInForceFieldNumber = 7;
    private global::Cube.Trade.TimeInForce timeInForce_ = global::Cube.Trade.TimeInForce.ImmediateOrCancel;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.TimeInForce TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 8;
    private global::Cube.Trade.OrderType orderType_ = global::Cube.Trade.OrderType.Limit;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cube.Trade.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "remaining_quantity" field.</summary>
    public const int RemainingQuantityFieldNumber = 9;
    private ulong remainingQuantity_;
    /// <summary>
    /// The current remaining quantity on the book.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RemainingQuantity {
      get { return remainingQuantity_; }
      set {
        remainingQuantity_ = value;
      }
    }

    /// <summary>Field number for the "rest_time" field.</summary>
    public const int RestTimeFieldNumber = 10;
    private ulong restTime_;
    /// <summary>
    /// [Transact time](#transact-time) of the NewOrderAck
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RestTime {
      get { return restTime_; }
      set {
        restTime_ = value;
      }
    }

    /// <summary>Field number for the "subaccount_id" field.</summary>
    public const int SubaccountIdFieldNumber = 11;
    private ulong subaccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubaccountId {
      get { return subaccountId_; }
      set {
        subaccountId_ = value;
      }
    }

    /// <summary>Field number for the "cumulative_quantity" field.</summary>
    public const int CumulativeQuantityFieldNumber = 12;
    private ulong cumulativeQuantity_;
    /// <summary>
    /// The cumulative filled quantity for this order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CumulativeQuantity {
      get { return cumulativeQuantity_; }
      set {
        cumulativeQuantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestingOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestingOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientOrderId != other.ClientOrderId) return false;
      if (ExchangeOrderId != other.ExchangeOrderId) return false;
      if (MarketId != other.MarketId) return false;
      if (Price != other.Price) return false;
      if (OrderQuantity != other.OrderQuantity) return false;
      if (Side != other.Side) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (OrderType != other.OrderType) return false;
      if (RemainingQuantity != other.RemainingQuantity) return false;
      if (RestTime != other.RestTime) return false;
      if (SubaccountId != other.SubaccountId) return false;
      if (CumulativeQuantity != other.CumulativeQuantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientOrderId != 0UL) hash ^= ClientOrderId.GetHashCode();
      if (ExchangeOrderId != 0UL) hash ^= ExchangeOrderId.GetHashCode();
      if (MarketId != 0UL) hash ^= MarketId.GetHashCode();
      if (Price != 0UL) hash ^= Price.GetHashCode();
      if (OrderQuantity != 0UL) hash ^= OrderQuantity.GetHashCode();
      if (Side != global::Cube.Trade.Side.Bid) hash ^= Side.GetHashCode();
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) hash ^= TimeInForce.GetHashCode();
      if (OrderType != global::Cube.Trade.OrderType.Limit) hash ^= OrderType.GetHashCode();
      if (RemainingQuantity != 0UL) hash ^= RemainingQuantity.GetHashCode();
      if (RestTime != 0UL) hash ^= RestTime.GetHashCode();
      if (SubaccountId != 0UL) hash ^= SubaccountId.GetHashCode();
      if (CumulativeQuantity != 0UL) hash ^= CumulativeQuantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClientOrderId);
      }
      if (ExchangeOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExchangeOrderId);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MarketId);
      }
      if (Price != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Price);
      }
      if (OrderQuantity != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(OrderQuantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OrderType);
      }
      if (RemainingQuantity != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(RemainingQuantity);
      }
      if (RestTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(RestTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(SubaccountId);
      }
      if (CumulativeQuantity != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClientOrderId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClientOrderId);
      }
      if (ExchangeOrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExchangeOrderId);
      }
      if (MarketId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MarketId);
      }
      if (Price != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Price);
      }
      if (OrderQuantity != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(OrderQuantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OrderType);
      }
      if (RemainingQuantity != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(RemainingQuantity);
      }
      if (RestTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(RestTime);
      }
      if (SubaccountId != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(SubaccountId);
      }
      if (CumulativeQuantity != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientOrderId);
      }
      if (ExchangeOrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExchangeOrderId);
      }
      if (MarketId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MarketId);
      }
      if (Price != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
      }
      if (OrderQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OrderQuantity);
      }
      if (Side != global::Cube.Trade.Side.Bid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (OrderType != global::Cube.Trade.OrderType.Limit) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (RemainingQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RemainingQuantity);
      }
      if (RestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RestTime);
      }
      if (SubaccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubaccountId);
      }
      if (CumulativeQuantity != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CumulativeQuantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestingOrder other) {
      if (other == null) {
        return;
      }
      if (other.ClientOrderId != 0UL) {
        ClientOrderId = other.ClientOrderId;
      }
      if (other.ExchangeOrderId != 0UL) {
        ExchangeOrderId = other.ExchangeOrderId;
      }
      if (other.MarketId != 0UL) {
        MarketId = other.MarketId;
      }
      if (other.Price != 0UL) {
        Price = other.Price;
      }
      if (other.OrderQuantity != 0UL) {
        OrderQuantity = other.OrderQuantity;
      }
      if (other.Side != global::Cube.Trade.Side.Bid) {
        Side = other.Side;
      }
      if (other.TimeInForce != global::Cube.Trade.TimeInForce.ImmediateOrCancel) {
        TimeInForce = other.TimeInForce;
      }
      if (other.OrderType != global::Cube.Trade.OrderType.Limit) {
        OrderType = other.OrderType;
      }
      if (other.RemainingQuantity != 0UL) {
        RemainingQuantity = other.RemainingQuantity;
      }
      if (other.RestTime != 0UL) {
        RestTime = other.RestTime;
      }
      if (other.SubaccountId != 0UL) {
        SubaccountId = other.SubaccountId;
      }
      if (other.CumulativeQuantity != 0UL) {
        CumulativeQuantity = other.CumulativeQuantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 16: {
            ExchangeOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 32: {
            Price = input.ReadUInt64();
            break;
          }
          case 40: {
            OrderQuantity = input.ReadUInt64();
            break;
          }
          case 48: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
          case 56: {
            TimeInForce = (global::Cube.Trade.TimeInForce) input.ReadEnum();
            break;
          }
          case 64: {
            OrderType = (global::Cube.Trade.OrderType) input.ReadEnum();
            break;
          }
          case 72: {
            RemainingQuantity = input.ReadUInt64();
            break;
          }
          case 80: {
            RestTime = input.ReadUInt64();
            break;
          }
          case 88: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 96: {
            CumulativeQuantity = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ClientOrderId = input.ReadUInt64();
            break;
          }
          case 16: {
            ExchangeOrderId = input.ReadUInt64();
            break;
          }
          case 24: {
            MarketId = input.ReadUInt64();
            break;
          }
          case 32: {
            Price = input.ReadUInt64();
            break;
          }
          case 40: {
            OrderQuantity = input.ReadUInt64();
            break;
          }
          case 48: {
            Side = (global::Cube.Trade.Side) input.ReadEnum();
            break;
          }
          case 56: {
            TimeInForce = (global::Cube.Trade.TimeInForce) input.ReadEnum();
            break;
          }
          case 64: {
            OrderType = (global::Cube.Trade.OrderType) input.ReadEnum();
            break;
          }
          case 72: {
            RemainingQuantity = input.ReadUInt64();
            break;
          }
          case 80: {
            RestTime = input.ReadUInt64();
            break;
          }
          case 88: {
            SubaccountId = input.ReadUInt64();
            break;
          }
          case 96: {
            CumulativeQuantity = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
