/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: trade.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace trade {
    export enum Side {
        BID = 0,
        ASK = 1
    }
    export enum TimeInForce {
        IMMEDIATE_OR_CANCEL = 0,
        GOOD_FOR_SESSION = 1,
        FILL_OR_KILL = 2
    }
    export enum OrderType {
        LIMIT = 0,
        MARKET_LIMIT = 1,
        MARKET_WITH_PROTECTION = 2
    }
    export enum SelfTradePrevention {
        CANCEL_RESTING = 0,
        CANCEL_AGGRESSING = 1,
        ALLOW_SELF_TRADE = 2
    }
    export enum PostOnly {
        DISABLED = 0,
        ENABLED = 1
    }
    export class Credentials extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_key_id?: string;
            signature?: string;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_key_id" in data && data.access_key_id != undefined) {
                    this.access_key_id = data.access_key_id;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get access_key_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_key_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            access_key_id?: string;
            signature?: string;
            timestamp?: number;
        }): Credentials {
            const message = new Credentials({});
            if (data.access_key_id != null) {
                message.access_key_id = data.access_key_id;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                access_key_id?: string;
                signature?: string;
                timestamp?: number;
            } = {};
            if (this.access_key_id != null) {
                data.access_key_id = this.access_key_id;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_key_id.length)
                writer.writeString(1, this.access_key_id);
            if (this.signature.length)
                writer.writeString(2, this.signature);
            if (this.timestamp != 0)
                writer.writeUint64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Credentials {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Credentials();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_key_id = reader.readString();
                        break;
                    case 2:
                        message.signature = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Credentials {
            return Credentials.deserialize(bytes);
        }
    }
    export class OrderRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            new?: NewOrder;
            cancel?: never;
            modify?: never;
            heartbeat?: never;
            mc?: never;
        } | {
            new?: never;
            cancel?: CancelOrder;
            modify?: never;
            heartbeat?: never;
            mc?: never;
        } | {
            new?: never;
            cancel?: never;
            modify?: ModifyOrder;
            heartbeat?: never;
            mc?: never;
        } | {
            new?: never;
            cancel?: never;
            modify?: never;
            heartbeat?: Heartbeat;
            mc?: never;
        } | {
            new?: never;
            cancel?: never;
            modify?: never;
            heartbeat?: never;
            mc?: MassCancel;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new" in data && data.new != undefined) {
                    this.new = data.new;
                }
                if ("cancel" in data && data.cancel != undefined) {
                    this.cancel = data.cancel;
                }
                if ("modify" in data && data.modify != undefined) {
                    this.modify = data.modify;
                }
                if ("heartbeat" in data && data.heartbeat != undefined) {
                    this.heartbeat = data.heartbeat;
                }
                if ("mc" in data && data.mc != undefined) {
                    this.mc = data.mc;
                }
            }
        }
        get new() {
            return pb_1.Message.getWrapperField(this, NewOrder, 1) as NewOrder;
        }
        set new(value: NewOrder) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get cancel() {
            return pb_1.Message.getWrapperField(this, CancelOrder, 2) as CancelOrder;
        }
        set cancel(value: CancelOrder) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_cancel() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get modify() {
            return pb_1.Message.getWrapperField(this, ModifyOrder, 3) as ModifyOrder;
        }
        set modify(value: ModifyOrder) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_modify() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get heartbeat() {
            return pb_1.Message.getWrapperField(this, Heartbeat, 4) as Heartbeat;
        }
        set heartbeat(value: Heartbeat) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_heartbeat() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get mc() {
            return pb_1.Message.getWrapperField(this, MassCancel, 5) as MassCancel;
        }
        set mc(value: MassCancel) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_mc() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get inner() {
            const cases: {
                [index: number]: "none" | "new" | "cancel" | "modify" | "heartbeat" | "mc";
            } = {
                0: "none",
                1: "new",
                2: "cancel",
                3: "modify",
                4: "heartbeat",
                5: "mc"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            new?: ReturnType<typeof NewOrder.prototype.toObject>;
            cancel?: ReturnType<typeof CancelOrder.prototype.toObject>;
            modify?: ReturnType<typeof ModifyOrder.prototype.toObject>;
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            mc?: ReturnType<typeof MassCancel.prototype.toObject>;
        }): OrderRequest {
            const message = new OrderRequest({});
            if (data.new != null) {
                message.new = NewOrder.fromObject(data.new);
            }
            if (data.cancel != null) {
                message.cancel = CancelOrder.fromObject(data.cancel);
            }
            if (data.modify != null) {
                message.modify = ModifyOrder.fromObject(data.modify);
            }
            if (data.heartbeat != null) {
                message.heartbeat = Heartbeat.fromObject(data.heartbeat);
            }
            if (data.mc != null) {
                message.mc = MassCancel.fromObject(data.mc);
            }
            return message;
        }
        toObject() {
            const data: {
                new?: ReturnType<typeof NewOrder.prototype.toObject>;
                cancel?: ReturnType<typeof CancelOrder.prototype.toObject>;
                modify?: ReturnType<typeof ModifyOrder.prototype.toObject>;
                heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
                mc?: ReturnType<typeof MassCancel.prototype.toObject>;
            } = {};
            if (this.new != null) {
                data.new = this.new.toObject();
            }
            if (this.cancel != null) {
                data.cancel = this.cancel.toObject();
            }
            if (this.modify != null) {
                data.modify = this.modify.toObject();
            }
            if (this.heartbeat != null) {
                data.heartbeat = this.heartbeat.toObject();
            }
            if (this.mc != null) {
                data.mc = this.mc.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new)
                writer.writeMessage(1, this.new, () => this.new.serialize(writer));
            if (this.has_cancel)
                writer.writeMessage(2, this.cancel, () => this.cancel.serialize(writer));
            if (this.has_modify)
                writer.writeMessage(3, this.modify, () => this.modify.serialize(writer));
            if (this.has_heartbeat)
                writer.writeMessage(4, this.heartbeat, () => this.heartbeat.serialize(writer));
            if (this.has_mc)
                writer.writeMessage(5, this.mc, () => this.mc.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new, () => message.new = NewOrder.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.cancel, () => message.cancel = CancelOrder.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.modify, () => message.modify = ModifyOrder.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.heartbeat, () => message.heartbeat = Heartbeat.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.mc, () => message.mc = MassCancel.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OrderRequest {
            return OrderRequest.deserialize(bytes);
        }
    }
    export class NewOrder extends pb_1.Message {
        #one_of_decls: number[][] = [[4], [10]];
        constructor(data?: any[] | ({
            client_order_id?: number;
            request_id?: number;
            market_id?: number;
            quantity?: number;
            side?: Side;
            time_in_force?: TimeInForce;
            order_type?: OrderType;
            subaccount_id?: number;
            post_only?: PostOnly;
            cancel_on_disconnect?: boolean;
        } & (({
            price?: number;
        }) | ({
            self_trade_prevention?: SelfTradePrevention;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
                if ("time_in_force" in data && data.time_in_force != undefined) {
                    this.time_in_force = data.time_in_force;
                }
                if ("order_type" in data && data.order_type != undefined) {
                    this.order_type = data.order_type;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("self_trade_prevention" in data && data.self_trade_prevention != undefined) {
                    this.self_trade_prevention = data.self_trade_prevention;
                }
                if ("post_only" in data && data.post_only != undefined) {
                    this.post_only = data.post_only;
                }
                if ("cancel_on_disconnect" in data && data.cancel_on_disconnect != undefined) {
                    this.cancel_on_disconnect = data.cancel_on_disconnect;
                }
            }
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 6, Side.BID) as Side;
        }
        set side(value: Side) {
            pb_1.Message.setField(this, 6, value);
        }
        get time_in_force() {
            return pb_1.Message.getFieldWithDefault(this, 7, TimeInForce.IMMEDIATE_OR_CANCEL) as TimeInForce;
        }
        set time_in_force(value: TimeInForce) {
            pb_1.Message.setField(this, 7, value);
        }
        get order_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, OrderType.LIMIT) as OrderType;
        }
        set order_type(value: OrderType) {
            pb_1.Message.setField(this, 8, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get self_trade_prevention() {
            return pb_1.Message.getFieldWithDefault(this, 10, SelfTradePrevention.CANCEL_RESTING) as SelfTradePrevention;
        }
        set self_trade_prevention(value: SelfTradePrevention) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[1], value);
        }
        get has_self_trade_prevention() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get post_only() {
            return pb_1.Message.getFieldWithDefault(this, 11, PostOnly.DISABLED) as PostOnly;
        }
        set post_only(value: PostOnly) {
            pb_1.Message.setField(this, 11, value);
        }
        get cancel_on_disconnect() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set cancel_on_disconnect(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get _price() {
            const cases: {
                [index: number]: "none" | "price";
            } = {
                0: "none",
                4: "price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _self_trade_prevention() {
            const cases: {
                [index: number]: "none" | "self_trade_prevention";
            } = {
                0: "none",
                10: "self_trade_prevention"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        static fromObject(data: {
            client_order_id?: number;
            request_id?: number;
            market_id?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            time_in_force?: TimeInForce;
            order_type?: OrderType;
            subaccount_id?: number;
            self_trade_prevention?: SelfTradePrevention;
            post_only?: PostOnly;
            cancel_on_disconnect?: boolean;
        }): NewOrder {
            const message = new NewOrder({});
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            if (data.time_in_force != null) {
                message.time_in_force = data.time_in_force;
            }
            if (data.order_type != null) {
                message.order_type = data.order_type;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.self_trade_prevention != null) {
                message.self_trade_prevention = data.self_trade_prevention;
            }
            if (data.post_only != null) {
                message.post_only = data.post_only;
            }
            if (data.cancel_on_disconnect != null) {
                message.cancel_on_disconnect = data.cancel_on_disconnect;
            }
            return message;
        }
        toObject() {
            const data: {
                client_order_id?: number;
                request_id?: number;
                market_id?: number;
                price?: number;
                quantity?: number;
                side?: Side;
                time_in_force?: TimeInForce;
                order_type?: OrderType;
                subaccount_id?: number;
                self_trade_prevention?: SelfTradePrevention;
                post_only?: PostOnly;
                cancel_on_disconnect?: boolean;
            } = {};
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            if (this.time_in_force != null) {
                data.time_in_force = this.time_in_force;
            }
            if (this.order_type != null) {
                data.order_type = this.order_type;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.self_trade_prevention != null) {
                data.self_trade_prevention = this.self_trade_prevention;
            }
            if (this.post_only != null) {
                data.post_only = this.post_only;
            }
            if (this.cancel_on_disconnect != null) {
                data.cancel_on_disconnect = this.cancel_on_disconnect;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_order_id != 0)
                writer.writeUint64(1, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(2, this.request_id);
            if (this.market_id != 0)
                writer.writeUint64(3, this.market_id);
            if (this.has_price)
                writer.writeUint64(4, this.price);
            if (this.quantity != 0)
                writer.writeUint64(5, this.quantity);
            if (this.side != Side.BID)
                writer.writeEnum(6, this.side);
            if (this.time_in_force != TimeInForce.IMMEDIATE_OR_CANCEL)
                writer.writeEnum(7, this.time_in_force);
            if (this.order_type != OrderType.LIMIT)
                writer.writeEnum(8, this.order_type);
            if (this.subaccount_id != 0)
                writer.writeUint64(9, this.subaccount_id);
            if (this.has_self_trade_prevention)
                writer.writeEnum(10, this.self_trade_prevention);
            if (this.post_only != PostOnly.DISABLED)
                writer.writeEnum(11, this.post_only);
            if (this.cancel_on_disconnect != false)
                writer.writeBool(12, this.cancel_on_disconnect);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 2:
                        message.request_id = reader.readUint64();
                        break;
                    case 3:
                        message.market_id = reader.readUint64();
                        break;
                    case 4:
                        message.price = reader.readUint64();
                        break;
                    case 5:
                        message.quantity = reader.readUint64();
                        break;
                    case 6:
                        message.side = reader.readEnum();
                        break;
                    case 7:
                        message.time_in_force = reader.readEnum();
                        break;
                    case 8:
                        message.order_type = reader.readEnum();
                        break;
                    case 9:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 10:
                        message.self_trade_prevention = reader.readEnum();
                        break;
                    case 11:
                        message.post_only = reader.readEnum();
                        break;
                    case 12:
                        message.cancel_on_disconnect = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewOrder {
            return NewOrder.deserialize(bytes);
        }
    }
    export class CancelOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            market_id?: number;
            client_order_id?: number;
            request_id?: number;
            subaccount_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
            }
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            market_id?: number;
            client_order_id?: number;
            request_id?: number;
            subaccount_id?: number;
        }): CancelOrder {
            const message = new CancelOrder({});
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            return message;
        }
        toObject() {
            const data: {
                market_id?: number;
                client_order_id?: number;
                request_id?: number;
                subaccount_id?: number;
            } = {};
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.market_id != 0)
                writer.writeUint64(1, this.market_id);
            if (this.client_order_id != 0)
                writer.writeUint64(2, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.subaccount_id != 0)
                writer.writeUint64(4, this.subaccount_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.market_id = reader.readUint64();
                        break;
                    case 2:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.subaccount_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelOrder {
            return CancelOrder.deserialize(bytes);
        }
    }
    export class ModifyOrder extends pb_1.Message {
        #one_of_decls: number[][] = [[7]];
        constructor(data?: any[] | ({
            market_id?: number;
            client_order_id?: number;
            request_id?: number;
            new_price?: number;
            new_quantity?: number;
            subaccount_id?: number;
            post_only?: PostOnly;
        } & (({
            self_trade_prevention?: SelfTradePrevention;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("new_price" in data && data.new_price != undefined) {
                    this.new_price = data.new_price;
                }
                if ("new_quantity" in data && data.new_quantity != undefined) {
                    this.new_quantity = data.new_quantity;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("self_trade_prevention" in data && data.self_trade_prevention != undefined) {
                    this.self_trade_prevention = data.self_trade_prevention;
                }
                if ("post_only" in data && data.post_only != undefined) {
                    this.post_only = data.post_only;
                }
            }
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get new_price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set new_price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get new_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set new_quantity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get self_trade_prevention() {
            return pb_1.Message.getFieldWithDefault(this, 7, SelfTradePrevention.CANCEL_RESTING) as SelfTradePrevention;
        }
        set self_trade_prevention(value: SelfTradePrevention) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
        }
        get has_self_trade_prevention() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get post_only() {
            return pb_1.Message.getFieldWithDefault(this, 8, PostOnly.DISABLED) as PostOnly;
        }
        set post_only(value: PostOnly) {
            pb_1.Message.setField(this, 8, value);
        }
        get _self_trade_prevention() {
            const cases: {
                [index: number]: "none" | "self_trade_prevention";
            } = {
                0: "none",
                7: "self_trade_prevention"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            market_id?: number;
            client_order_id?: number;
            request_id?: number;
            new_price?: number;
            new_quantity?: number;
            subaccount_id?: number;
            self_trade_prevention?: SelfTradePrevention;
            post_only?: PostOnly;
        }): ModifyOrder {
            const message = new ModifyOrder({});
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.new_price != null) {
                message.new_price = data.new_price;
            }
            if (data.new_quantity != null) {
                message.new_quantity = data.new_quantity;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.self_trade_prevention != null) {
                message.self_trade_prevention = data.self_trade_prevention;
            }
            if (data.post_only != null) {
                message.post_only = data.post_only;
            }
            return message;
        }
        toObject() {
            const data: {
                market_id?: number;
                client_order_id?: number;
                request_id?: number;
                new_price?: number;
                new_quantity?: number;
                subaccount_id?: number;
                self_trade_prevention?: SelfTradePrevention;
                post_only?: PostOnly;
            } = {};
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.new_price != null) {
                data.new_price = this.new_price;
            }
            if (this.new_quantity != null) {
                data.new_quantity = this.new_quantity;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.self_trade_prevention != null) {
                data.self_trade_prevention = this.self_trade_prevention;
            }
            if (this.post_only != null) {
                data.post_only = this.post_only;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.market_id != 0)
                writer.writeUint64(1, this.market_id);
            if (this.client_order_id != 0)
                writer.writeUint64(2, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.new_price != 0)
                writer.writeUint64(4, this.new_price);
            if (this.new_quantity != 0)
                writer.writeUint64(5, this.new_quantity);
            if (this.subaccount_id != 0)
                writer.writeUint64(6, this.subaccount_id);
            if (this.has_self_trade_prevention)
                writer.writeEnum(7, this.self_trade_prevention);
            if (this.post_only != PostOnly.DISABLED)
                writer.writeEnum(8, this.post_only);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.market_id = reader.readUint64();
                        break;
                    case 2:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.new_price = reader.readUint64();
                        break;
                    case 5:
                        message.new_quantity = reader.readUint64();
                        break;
                    case 6:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 7:
                        message.self_trade_prevention = reader.readEnum();
                        break;
                    case 8:
                        message.post_only = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModifyOrder {
            return ModifyOrder.deserialize(bytes);
        }
    }
    export class MassCancel extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4]];
        constructor(data?: any[] | ({
            subaccount_id?: number;
            request_id?: number;
        } & (({
            market_id?: number;
        }) | ({
            side?: Side;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
            }
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_market_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 4, Side.BID) as Side;
        }
        set side(value: Side) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_side() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _market_id() {
            const cases: {
                [index: number]: "none" | "market_id";
            } = {
                0: "none",
                3: "market_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _side() {
            const cases: {
                [index: number]: "none" | "side";
            } = {
                0: "none",
                4: "side"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            subaccount_id?: number;
            request_id?: number;
            market_id?: number;
            side?: Side;
        }): MassCancel {
            const message = new MassCancel({});
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            return message;
        }
        toObject() {
            const data: {
                subaccount_id?: number;
                request_id?: number;
                market_id?: number;
                side?: Side;
            } = {};
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subaccount_id != 0)
                writer.writeUint64(1, this.subaccount_id);
            if (this.request_id != 0)
                writer.writeUint64(2, this.request_id);
            if (this.has_market_id)
                writer.writeUint64(3, this.market_id);
            if (this.has_side)
                writer.writeEnum(4, this.side);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MassCancel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MassCancel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 2:
                        message.request_id = reader.readUint64();
                        break;
                    case 3:
                        message.market_id = reader.readUint64();
                        break;
                    case 4:
                        message.side = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MassCancel {
            return MassCancel.deserialize(bytes);
        }
    }
    export class Heartbeat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            request_id?: number;
            timestamp?: number;
        }): Heartbeat {
            const message = new Heartbeat({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
                timestamp?: number;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Heartbeat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Heartbeat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Heartbeat {
            return Heartbeat.deserialize(bytes);
        }
    }
    export class OrderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];
        constructor(data?: any[] | ({} & (({
            new_ack?: NewOrderAck;
            cancel_ack?: never;
            modify_ack?: never;
            new_reject?: never;
            cancel_reject?: never;
            modify_reject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: CancelOrderAck;
            modify_ack?: never;
            new_reject?: never;
            cancel_reject?: never;
            modify_reject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: never;
            modify_ack?: ModifyOrderAck;
            new_reject?: never;
            cancel_reject?: never;
            modify_reject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: never;
            modify_ack?: never;
            new_reject?: NewOrderReject;
            cancel_reject?: never;
            modify_reject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: never;
            modify_ack?: never;
            new_reject?: never;
            cancel_reject?: CancelOrderReject;
            modify_reject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: never;
            modify_ack?: never;
            new_reject?: never;
            cancel_reject?: never;
            modify_reject?: ModifyOrderReject;
            fill?: never;
            heartbeat?: never;
            position?: never;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: never;
            modify_ack?: never;
            new_reject?: never;
            cancel_reject?: never;
            modify_reject?: never;
            fill?: Fill;
            heartbeat?: never;
            position?: never;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: never;
            modify_ack?: never;
            new_reject?: never;
            cancel_reject?: never;
            modify_reject?: never;
            fill?: never;
            heartbeat?: Heartbeat;
            position?: never;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: never;
            modify_ack?: never;
            new_reject?: never;
            cancel_reject?: never;
            modify_reject?: never;
            fill?: never;
            heartbeat?: never;
            position?: AssetPosition;
            mass_cancel_ack?: never;
        } | {
            new_ack?: never;
            cancel_ack?: never;
            modify_ack?: never;
            new_reject?: never;
            cancel_reject?: never;
            modify_reject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            mass_cancel_ack?: MassCancelAck;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_ack" in data && data.new_ack != undefined) {
                    this.new_ack = data.new_ack;
                }
                if ("cancel_ack" in data && data.cancel_ack != undefined) {
                    this.cancel_ack = data.cancel_ack;
                }
                if ("modify_ack" in data && data.modify_ack != undefined) {
                    this.modify_ack = data.modify_ack;
                }
                if ("new_reject" in data && data.new_reject != undefined) {
                    this.new_reject = data.new_reject;
                }
                if ("cancel_reject" in data && data.cancel_reject != undefined) {
                    this.cancel_reject = data.cancel_reject;
                }
                if ("modify_reject" in data && data.modify_reject != undefined) {
                    this.modify_reject = data.modify_reject;
                }
                if ("fill" in data && data.fill != undefined) {
                    this.fill = data.fill;
                }
                if ("heartbeat" in data && data.heartbeat != undefined) {
                    this.heartbeat = data.heartbeat;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("mass_cancel_ack" in data && data.mass_cancel_ack != undefined) {
                    this.mass_cancel_ack = data.mass_cancel_ack;
                }
            }
        }
        get new_ack() {
            return pb_1.Message.getWrapperField(this, NewOrderAck, 1) as NewOrderAck;
        }
        set new_ack(value: NewOrderAck) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_ack() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get cancel_ack() {
            return pb_1.Message.getWrapperField(this, CancelOrderAck, 2) as CancelOrderAck;
        }
        set cancel_ack(value: CancelOrderAck) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_cancel_ack() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get modify_ack() {
            return pb_1.Message.getWrapperField(this, ModifyOrderAck, 3) as ModifyOrderAck;
        }
        set modify_ack(value: ModifyOrderAck) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_modify_ack() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get new_reject() {
            return pb_1.Message.getWrapperField(this, NewOrderReject, 4) as NewOrderReject;
        }
        set new_reject(value: NewOrderReject) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_new_reject() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get cancel_reject() {
            return pb_1.Message.getWrapperField(this, CancelOrderReject, 5) as CancelOrderReject;
        }
        set cancel_reject(value: CancelOrderReject) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_cancel_reject() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get modify_reject() {
            return pb_1.Message.getWrapperField(this, ModifyOrderReject, 6) as ModifyOrderReject;
        }
        set modify_reject(value: ModifyOrderReject) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_modify_reject() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get fill() {
            return pb_1.Message.getWrapperField(this, Fill, 7) as Fill;
        }
        set fill(value: Fill) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_fill() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get heartbeat() {
            return pb_1.Message.getWrapperField(this, Heartbeat, 8) as Heartbeat;
        }
        set heartbeat(value: Heartbeat) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_heartbeat() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get position() {
            return pb_1.Message.getWrapperField(this, AssetPosition, 9) as AssetPosition;
        }
        set position(value: AssetPosition) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get mass_cancel_ack() {
            return pb_1.Message.getWrapperField(this, MassCancelAck, 10) as MassCancelAck;
        }
        set mass_cancel_ack(value: MassCancelAck) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_mass_cancel_ack() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get inner() {
            const cases: {
                [index: number]: "none" | "new_ack" | "cancel_ack" | "modify_ack" | "new_reject" | "cancel_reject" | "modify_reject" | "fill" | "heartbeat" | "position" | "mass_cancel_ack";
            } = {
                0: "none",
                1: "new_ack",
                2: "cancel_ack",
                3: "modify_ack",
                4: "new_reject",
                5: "cancel_reject",
                6: "modify_reject",
                7: "fill",
                8: "heartbeat",
                9: "position",
                10: "mass_cancel_ack"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data: {
            new_ack?: ReturnType<typeof NewOrderAck.prototype.toObject>;
            cancel_ack?: ReturnType<typeof CancelOrderAck.prototype.toObject>;
            modify_ack?: ReturnType<typeof ModifyOrderAck.prototype.toObject>;
            new_reject?: ReturnType<typeof NewOrderReject.prototype.toObject>;
            cancel_reject?: ReturnType<typeof CancelOrderReject.prototype.toObject>;
            modify_reject?: ReturnType<typeof ModifyOrderReject.prototype.toObject>;
            fill?: ReturnType<typeof Fill.prototype.toObject>;
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            position?: ReturnType<typeof AssetPosition.prototype.toObject>;
            mass_cancel_ack?: ReturnType<typeof MassCancelAck.prototype.toObject>;
        }): OrderResponse {
            const message = new OrderResponse({});
            if (data.new_ack != null) {
                message.new_ack = NewOrderAck.fromObject(data.new_ack);
            }
            if (data.cancel_ack != null) {
                message.cancel_ack = CancelOrderAck.fromObject(data.cancel_ack);
            }
            if (data.modify_ack != null) {
                message.modify_ack = ModifyOrderAck.fromObject(data.modify_ack);
            }
            if (data.new_reject != null) {
                message.new_reject = NewOrderReject.fromObject(data.new_reject);
            }
            if (data.cancel_reject != null) {
                message.cancel_reject = CancelOrderReject.fromObject(data.cancel_reject);
            }
            if (data.modify_reject != null) {
                message.modify_reject = ModifyOrderReject.fromObject(data.modify_reject);
            }
            if (data.fill != null) {
                message.fill = Fill.fromObject(data.fill);
            }
            if (data.heartbeat != null) {
                message.heartbeat = Heartbeat.fromObject(data.heartbeat);
            }
            if (data.position != null) {
                message.position = AssetPosition.fromObject(data.position);
            }
            if (data.mass_cancel_ack != null) {
                message.mass_cancel_ack = MassCancelAck.fromObject(data.mass_cancel_ack);
            }
            return message;
        }
        toObject() {
            const data: {
                new_ack?: ReturnType<typeof NewOrderAck.prototype.toObject>;
                cancel_ack?: ReturnType<typeof CancelOrderAck.prototype.toObject>;
                modify_ack?: ReturnType<typeof ModifyOrderAck.prototype.toObject>;
                new_reject?: ReturnType<typeof NewOrderReject.prototype.toObject>;
                cancel_reject?: ReturnType<typeof CancelOrderReject.prototype.toObject>;
                modify_reject?: ReturnType<typeof ModifyOrderReject.prototype.toObject>;
                fill?: ReturnType<typeof Fill.prototype.toObject>;
                heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
                position?: ReturnType<typeof AssetPosition.prototype.toObject>;
                mass_cancel_ack?: ReturnType<typeof MassCancelAck.prototype.toObject>;
            } = {};
            if (this.new_ack != null) {
                data.new_ack = this.new_ack.toObject();
            }
            if (this.cancel_ack != null) {
                data.cancel_ack = this.cancel_ack.toObject();
            }
            if (this.modify_ack != null) {
                data.modify_ack = this.modify_ack.toObject();
            }
            if (this.new_reject != null) {
                data.new_reject = this.new_reject.toObject();
            }
            if (this.cancel_reject != null) {
                data.cancel_reject = this.cancel_reject.toObject();
            }
            if (this.modify_reject != null) {
                data.modify_reject = this.modify_reject.toObject();
            }
            if (this.fill != null) {
                data.fill = this.fill.toObject();
            }
            if (this.heartbeat != null) {
                data.heartbeat = this.heartbeat.toObject();
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.mass_cancel_ack != null) {
                data.mass_cancel_ack = this.mass_cancel_ack.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_ack)
                writer.writeMessage(1, this.new_ack, () => this.new_ack.serialize(writer));
            if (this.has_cancel_ack)
                writer.writeMessage(2, this.cancel_ack, () => this.cancel_ack.serialize(writer));
            if (this.has_modify_ack)
                writer.writeMessage(3, this.modify_ack, () => this.modify_ack.serialize(writer));
            if (this.has_new_reject)
                writer.writeMessage(4, this.new_reject, () => this.new_reject.serialize(writer));
            if (this.has_cancel_reject)
                writer.writeMessage(5, this.cancel_reject, () => this.cancel_reject.serialize(writer));
            if (this.has_modify_reject)
                writer.writeMessage(6, this.modify_reject, () => this.modify_reject.serialize(writer));
            if (this.has_fill)
                writer.writeMessage(7, this.fill, () => this.fill.serialize(writer));
            if (this.has_heartbeat)
                writer.writeMessage(8, this.heartbeat, () => this.heartbeat.serialize(writer));
            if (this.has_position)
                writer.writeMessage(9, this.position, () => this.position.serialize(writer));
            if (this.has_mass_cancel_ack)
                writer.writeMessage(10, this.mass_cancel_ack, () => this.mass_cancel_ack.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_ack, () => message.new_ack = NewOrderAck.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.cancel_ack, () => message.cancel_ack = CancelOrderAck.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.modify_ack, () => message.modify_ack = ModifyOrderAck.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.new_reject, () => message.new_reject = NewOrderReject.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.cancel_reject, () => message.cancel_reject = CancelOrderReject.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.modify_reject, () => message.modify_reject = ModifyOrderReject.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.fill, () => message.fill = Fill.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.heartbeat, () => message.heartbeat = Heartbeat.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.position, () => message.position = AssetPosition.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.mass_cancel_ack, () => message.mass_cancel_ack = MassCancelAck.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OrderResponse {
            return OrderResponse.deserialize(bytes);
        }
    }
    export class NewOrderAck extends pb_1.Message {
        #one_of_decls: number[][] = [[6]];
        constructor(data?: any[] | ({
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            exchange_order_id?: number;
            market_id?: number;
            quantity?: number;
            side?: Side;
            time_in_force?: TimeInForce;
            order_type?: OrderType;
            transact_time?: number;
            subaccount_id?: number;
            cancel_on_disconnect?: boolean;
        } & (({
            price?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_seq_num" in data && data.msg_seq_num != undefined) {
                    this.msg_seq_num = data.msg_seq_num;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("exchange_order_id" in data && data.exchange_order_id != undefined) {
                    this.exchange_order_id = data.exchange_order_id;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
                if ("time_in_force" in data && data.time_in_force != undefined) {
                    this.time_in_force = data.time_in_force;
                }
                if ("order_type" in data && data.order_type != undefined) {
                    this.order_type = data.order_type;
                }
                if ("transact_time" in data && data.transact_time != undefined) {
                    this.transact_time = data.transact_time;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("cancel_on_disconnect" in data && data.cancel_on_disconnect != undefined) {
                    this.cancel_on_disconnect = data.cancel_on_disconnect;
                }
            }
        }
        get msg_seq_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_seq_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get exchange_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set exchange_order_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 8, Side.BID) as Side;
        }
        set side(value: Side) {
            pb_1.Message.setField(this, 8, value);
        }
        get time_in_force() {
            return pb_1.Message.getFieldWithDefault(this, 9, TimeInForce.IMMEDIATE_OR_CANCEL) as TimeInForce;
        }
        set time_in_force(value: TimeInForce) {
            pb_1.Message.setField(this, 9, value);
        }
        get order_type() {
            return pb_1.Message.getFieldWithDefault(this, 10, OrderType.LIMIT) as OrderType;
        }
        set order_type(value: OrderType) {
            pb_1.Message.setField(this, 10, value);
        }
        get transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set transact_time(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get cancel_on_disconnect() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set cancel_on_disconnect(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get _price() {
            const cases: {
                [index: number]: "none" | "price";
            } = {
                0: "none",
                6: "price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            exchange_order_id?: number;
            market_id?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            time_in_force?: TimeInForce;
            order_type?: OrderType;
            transact_time?: number;
            subaccount_id?: number;
            cancel_on_disconnect?: boolean;
        }): NewOrderAck {
            const message = new NewOrderAck({});
            if (data.msg_seq_num != null) {
                message.msg_seq_num = data.msg_seq_num;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.exchange_order_id != null) {
                message.exchange_order_id = data.exchange_order_id;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            if (data.time_in_force != null) {
                message.time_in_force = data.time_in_force;
            }
            if (data.order_type != null) {
                message.order_type = data.order_type;
            }
            if (data.transact_time != null) {
                message.transact_time = data.transact_time;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.cancel_on_disconnect != null) {
                message.cancel_on_disconnect = data.cancel_on_disconnect;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_seq_num?: number;
                client_order_id?: number;
                request_id?: number;
                exchange_order_id?: number;
                market_id?: number;
                price?: number;
                quantity?: number;
                side?: Side;
                time_in_force?: TimeInForce;
                order_type?: OrderType;
                transact_time?: number;
                subaccount_id?: number;
                cancel_on_disconnect?: boolean;
            } = {};
            if (this.msg_seq_num != null) {
                data.msg_seq_num = this.msg_seq_num;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.exchange_order_id != null) {
                data.exchange_order_id = this.exchange_order_id;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            if (this.time_in_force != null) {
                data.time_in_force = this.time_in_force;
            }
            if (this.order_type != null) {
                data.order_type = this.order_type;
            }
            if (this.transact_time != null) {
                data.transact_time = this.transact_time;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.cancel_on_disconnect != null) {
                data.cancel_on_disconnect = this.cancel_on_disconnect;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_seq_num != 0)
                writer.writeUint64(1, this.msg_seq_num);
            if (this.client_order_id != 0)
                writer.writeUint64(2, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.exchange_order_id != 0)
                writer.writeUint64(4, this.exchange_order_id);
            if (this.market_id != 0)
                writer.writeUint64(5, this.market_id);
            if (this.has_price)
                writer.writeUint64(6, this.price);
            if (this.quantity != 0)
                writer.writeUint64(7, this.quantity);
            if (this.side != Side.BID)
                writer.writeEnum(8, this.side);
            if (this.time_in_force != TimeInForce.IMMEDIATE_OR_CANCEL)
                writer.writeEnum(9, this.time_in_force);
            if (this.order_type != OrderType.LIMIT)
                writer.writeEnum(10, this.order_type);
            if (this.transact_time != 0)
                writer.writeUint64(11, this.transact_time);
            if (this.subaccount_id != 0)
                writer.writeUint64(12, this.subaccount_id);
            if (this.cancel_on_disconnect != false)
                writer.writeBool(13, this.cancel_on_disconnect);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewOrderAck {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewOrderAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_seq_num = reader.readUint64();
                        break;
                    case 2:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.exchange_order_id = reader.readUint64();
                        break;
                    case 5:
                        message.market_id = reader.readUint64();
                        break;
                    case 6:
                        message.price = reader.readUint64();
                        break;
                    case 7:
                        message.quantity = reader.readUint64();
                        break;
                    case 8:
                        message.side = reader.readEnum();
                        break;
                    case 9:
                        message.time_in_force = reader.readEnum();
                        break;
                    case 10:
                        message.order_type = reader.readEnum();
                        break;
                    case 11:
                        message.transact_time = reader.readUint64();
                        break;
                    case 12:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 13:
                        message.cancel_on_disconnect = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewOrderAck {
            return NewOrderAck.deserialize(bytes);
        }
    }
    export class CancelOrderAck extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            subaccount_id?: number;
            reason?: CancelOrderAck.Reason;
            market_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_seq_num" in data && data.msg_seq_num != undefined) {
                    this.msg_seq_num = data.msg_seq_num;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("transact_time" in data && data.transact_time != undefined) {
                    this.transact_time = data.transact_time;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
            }
        }
        get msg_seq_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_seq_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set transact_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, CancelOrderAck.Reason.UNCLASSIFIED) as CancelOrderAck.Reason;
        }
        set reason(value: CancelOrderAck.Reason) {
            pb_1.Message.setField(this, 6, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            subaccount_id?: number;
            reason?: CancelOrderAck.Reason;
            market_id?: number;
        }): CancelOrderAck {
            const message = new CancelOrderAck({});
            if (data.msg_seq_num != null) {
                message.msg_seq_num = data.msg_seq_num;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.transact_time != null) {
                message.transact_time = data.transact_time;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_seq_num?: number;
                client_order_id?: number;
                request_id?: number;
                transact_time?: number;
                subaccount_id?: number;
                reason?: CancelOrderAck.Reason;
                market_id?: number;
            } = {};
            if (this.msg_seq_num != null) {
                data.msg_seq_num = this.msg_seq_num;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.transact_time != null) {
                data.transact_time = this.transact_time;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_seq_num != 0)
                writer.writeUint64(1, this.msg_seq_num);
            if (this.client_order_id != 0)
                writer.writeUint64(2, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.transact_time != 0)
                writer.writeUint64(4, this.transact_time);
            if (this.subaccount_id != 0)
                writer.writeUint64(5, this.subaccount_id);
            if (this.reason != CancelOrderAck.Reason.UNCLASSIFIED)
                writer.writeEnum(6, this.reason);
            if (this.market_id != 0)
                writer.writeUint64(7, this.market_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOrderAck {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOrderAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_seq_num = reader.readUint64();
                        break;
                    case 2:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.transact_time = reader.readUint64();
                        break;
                    case 5:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.market_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelOrderAck {
            return CancelOrderAck.deserialize(bytes);
        }
    }
    export namespace CancelOrderAck {
        export enum Reason {
            UNCLASSIFIED = 0,
            DISCONNECT = 1,
            REQUESTED = 2,
            IOC = 3,
            STP_RESTING = 4,
            STP_AGGRESSING = 5,
            MASS_CANCEL = 6
        }
    }
    export class ModifyOrderAck extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            remaining_quantity?: number;
            subaccount_id?: number;
            market_id?: number;
            price?: number;
            quantity?: number;
            cumulative_quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_seq_num" in data && data.msg_seq_num != undefined) {
                    this.msg_seq_num = data.msg_seq_num;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("transact_time" in data && data.transact_time != undefined) {
                    this.transact_time = data.transact_time;
                }
                if ("remaining_quantity" in data && data.remaining_quantity != undefined) {
                    this.remaining_quantity = data.remaining_quantity;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("cumulative_quantity" in data && data.cumulative_quantity != undefined) {
                    this.cumulative_quantity = data.cumulative_quantity;
                }
            }
        }
        get msg_seq_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_seq_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set transact_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get remaining_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set remaining_quantity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get cumulative_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set cumulative_quantity(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            remaining_quantity?: number;
            subaccount_id?: number;
            market_id?: number;
            price?: number;
            quantity?: number;
            cumulative_quantity?: number;
        }): ModifyOrderAck {
            const message = new ModifyOrderAck({});
            if (data.msg_seq_num != null) {
                message.msg_seq_num = data.msg_seq_num;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.transact_time != null) {
                message.transact_time = data.transact_time;
            }
            if (data.remaining_quantity != null) {
                message.remaining_quantity = data.remaining_quantity;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.cumulative_quantity != null) {
                message.cumulative_quantity = data.cumulative_quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_seq_num?: number;
                client_order_id?: number;
                request_id?: number;
                transact_time?: number;
                remaining_quantity?: number;
                subaccount_id?: number;
                market_id?: number;
                price?: number;
                quantity?: number;
                cumulative_quantity?: number;
            } = {};
            if (this.msg_seq_num != null) {
                data.msg_seq_num = this.msg_seq_num;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.transact_time != null) {
                data.transact_time = this.transact_time;
            }
            if (this.remaining_quantity != null) {
                data.remaining_quantity = this.remaining_quantity;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.cumulative_quantity != null) {
                data.cumulative_quantity = this.cumulative_quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_seq_num != 0)
                writer.writeUint64(1, this.msg_seq_num);
            if (this.client_order_id != 0)
                writer.writeUint64(2, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.transact_time != 0)
                writer.writeUint64(4, this.transact_time);
            if (this.remaining_quantity != 0)
                writer.writeUint64(5, this.remaining_quantity);
            if (this.subaccount_id != 0)
                writer.writeUint64(6, this.subaccount_id);
            if (this.market_id != 0)
                writer.writeUint64(7, this.market_id);
            if (this.price != 0)
                writer.writeUint64(8, this.price);
            if (this.quantity != 0)
                writer.writeUint64(9, this.quantity);
            if (this.cumulative_quantity != 0)
                writer.writeUint64(10, this.cumulative_quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyOrderAck {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyOrderAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_seq_num = reader.readUint64();
                        break;
                    case 2:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.transact_time = reader.readUint64();
                        break;
                    case 5:
                        message.remaining_quantity = reader.readUint64();
                        break;
                    case 6:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 7:
                        message.market_id = reader.readUint64();
                        break;
                    case 8:
                        message.price = reader.readUint64();
                        break;
                    case 9:
                        message.quantity = reader.readUint64();
                        break;
                    case 10:
                        message.cumulative_quantity = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModifyOrderAck {
            return ModifyOrderAck.deserialize(bytes);
        }
    }
    export class MassCancelAck extends pb_1.Message {
        #one_of_decls: number[][] = [[6]];
        constructor(data?: any[] | ({
            msg_seq_num?: number;
            subaccount_id?: number;
            request_id?: number;
            transact_time?: number;
            total_affected_orders?: number;
        } & (({
            reason?: MassCancelAck.Reason;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_seq_num" in data && data.msg_seq_num != undefined) {
                    this.msg_seq_num = data.msg_seq_num;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("transact_time" in data && data.transact_time != undefined) {
                    this.transact_time = data.transact_time;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("total_affected_orders" in data && data.total_affected_orders != undefined) {
                    this.total_affected_orders = data.total_affected_orders;
                }
            }
        }
        get msg_seq_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_seq_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set transact_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, MassCancelAck.Reason.UNCLASSIFIED) as MassCancelAck.Reason;
        }
        set reason(value: MassCancelAck.Reason) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_reason() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get total_affected_orders() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set total_affected_orders(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get _reason() {
            const cases: {
                [index: number]: "none" | "reason";
            } = {
                0: "none",
                6: "reason"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            msg_seq_num?: number;
            subaccount_id?: number;
            request_id?: number;
            transact_time?: number;
            reason?: MassCancelAck.Reason;
            total_affected_orders?: number;
        }): MassCancelAck {
            const message = new MassCancelAck({});
            if (data.msg_seq_num != null) {
                message.msg_seq_num = data.msg_seq_num;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.transact_time != null) {
                message.transact_time = data.transact_time;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.total_affected_orders != null) {
                message.total_affected_orders = data.total_affected_orders;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_seq_num?: number;
                subaccount_id?: number;
                request_id?: number;
                transact_time?: number;
                reason?: MassCancelAck.Reason;
                total_affected_orders?: number;
            } = {};
            if (this.msg_seq_num != null) {
                data.msg_seq_num = this.msg_seq_num;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.transact_time != null) {
                data.transact_time = this.transact_time;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.total_affected_orders != null) {
                data.total_affected_orders = this.total_affected_orders;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_seq_num != 0)
                writer.writeUint64(1, this.msg_seq_num);
            if (this.subaccount_id != 0)
                writer.writeUint64(2, this.subaccount_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.transact_time != 0)
                writer.writeUint64(4, this.transact_time);
            if (this.has_reason)
                writer.writeEnum(6, this.reason);
            if (this.total_affected_orders != 0)
                writer.writeUint32(7, this.total_affected_orders);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MassCancelAck {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MassCancelAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_seq_num = reader.readUint64();
                        break;
                    case 2:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.transact_time = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.total_affected_orders = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MassCancelAck {
            return MassCancelAck.deserialize(bytes);
        }
    }
    export namespace MassCancelAck {
        export enum Reason {
            UNCLASSIFIED = 0,
            INVALID_MARKET_ID = 1,
            INVALID_SIDE = 2
        }
    }
    export class NewOrderReject extends pb_1.Message {
        #one_of_decls: number[][] = [[8]];
        constructor(data?: any[] | ({
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            subaccount_id?: number;
            reason?: NewOrderReject.Reason;
            market_id?: number;
            quantity?: number;
            side?: Side;
            time_in_force?: TimeInForce;
            order_type?: OrderType;
        } & (({
            price?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_seq_num" in data && data.msg_seq_num != undefined) {
                    this.msg_seq_num = data.msg_seq_num;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("transact_time" in data && data.transact_time != undefined) {
                    this.transact_time = data.transact_time;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
                if ("time_in_force" in data && data.time_in_force != undefined) {
                    this.time_in_force = data.time_in_force;
                }
                if ("order_type" in data && data.order_type != undefined) {
                    this.order_type = data.order_type;
                }
            }
        }
        get msg_seq_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_seq_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set transact_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, NewOrderReject.Reason.UNCLASSIFIED) as NewOrderReject.Reason;
        }
        set reason(value: NewOrderReject.Reason) {
            pb_1.Message.setField(this, 6, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[0], value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 10, Side.BID) as Side;
        }
        set side(value: Side) {
            pb_1.Message.setField(this, 10, value);
        }
        get time_in_force() {
            return pb_1.Message.getFieldWithDefault(this, 11, TimeInForce.IMMEDIATE_OR_CANCEL) as TimeInForce;
        }
        set time_in_force(value: TimeInForce) {
            pb_1.Message.setField(this, 11, value);
        }
        get order_type() {
            return pb_1.Message.getFieldWithDefault(this, 12, OrderType.LIMIT) as OrderType;
        }
        set order_type(value: OrderType) {
            pb_1.Message.setField(this, 12, value);
        }
        get _price() {
            const cases: {
                [index: number]: "none" | "price";
            } = {
                0: "none",
                8: "price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        static fromObject(data: {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            subaccount_id?: number;
            reason?: NewOrderReject.Reason;
            market_id?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            time_in_force?: TimeInForce;
            order_type?: OrderType;
        }): NewOrderReject {
            const message = new NewOrderReject({});
            if (data.msg_seq_num != null) {
                message.msg_seq_num = data.msg_seq_num;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.transact_time != null) {
                message.transact_time = data.transact_time;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            if (data.time_in_force != null) {
                message.time_in_force = data.time_in_force;
            }
            if (data.order_type != null) {
                message.order_type = data.order_type;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_seq_num?: number;
                client_order_id?: number;
                request_id?: number;
                transact_time?: number;
                subaccount_id?: number;
                reason?: NewOrderReject.Reason;
                market_id?: number;
                price?: number;
                quantity?: number;
                side?: Side;
                time_in_force?: TimeInForce;
                order_type?: OrderType;
            } = {};
            if (this.msg_seq_num != null) {
                data.msg_seq_num = this.msg_seq_num;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.transact_time != null) {
                data.transact_time = this.transact_time;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            if (this.time_in_force != null) {
                data.time_in_force = this.time_in_force;
            }
            if (this.order_type != null) {
                data.order_type = this.order_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_seq_num != 0)
                writer.writeUint64(1, this.msg_seq_num);
            if (this.client_order_id != 0)
                writer.writeUint64(2, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.transact_time != 0)
                writer.writeUint64(4, this.transact_time);
            if (this.subaccount_id != 0)
                writer.writeUint64(5, this.subaccount_id);
            if (this.reason != NewOrderReject.Reason.UNCLASSIFIED)
                writer.writeEnum(6, this.reason);
            if (this.market_id != 0)
                writer.writeUint64(7, this.market_id);
            if (this.has_price)
                writer.writeUint64(8, this.price);
            if (this.quantity != 0)
                writer.writeUint64(9, this.quantity);
            if (this.side != Side.BID)
                writer.writeEnum(10, this.side);
            if (this.time_in_force != TimeInForce.IMMEDIATE_OR_CANCEL)
                writer.writeEnum(11, this.time_in_force);
            if (this.order_type != OrderType.LIMIT)
                writer.writeEnum(12, this.order_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewOrderReject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewOrderReject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_seq_num = reader.readUint64();
                        break;
                    case 2:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.transact_time = reader.readUint64();
                        break;
                    case 5:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.market_id = reader.readUint64();
                        break;
                    case 8:
                        message.price = reader.readUint64();
                        break;
                    case 9:
                        message.quantity = reader.readUint64();
                        break;
                    case 10:
                        message.side = reader.readEnum();
                        break;
                    case 11:
                        message.time_in_force = reader.readEnum();
                        break;
                    case 12:
                        message.order_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewOrderReject {
            return NewOrderReject.deserialize(bytes);
        }
    }
    export namespace NewOrderReject {
        export enum Reason {
            UNCLASSIFIED = 0,
            INVALID_QUANTITY = 1,
            INVALID_MARKET_ID = 2,
            DUPLICATE_ORDER_ID = 3,
            INVALID_SIDE = 4,
            INVALID_TIME_IN_FORCE = 5,
            INVALID_ORDER_TYPE = 6,
            INVALID_POST_ONLY = 7,
            INVALID_SELF_TRADE_PREVENTION = 8,
            UNKNOWN_TRADER = 9,
            PRICE_WITH_MARKET_ORDER = 10,
            POST_ONLY_WITH_MARKET_ORDER = 11,
            POST_ONLY_WITH_INVALID_TIF = 12,
            EXCEEDED_SPOT_POSITION = 13,
            NO_OPPOSING_LIMIT_ORDER = 14,
            POST_ONLY_WOULD_TRADE = 15,
            DID_NOT_FULLY_FILL = 16
        }
    }
    export class CancelOrderReject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            subaccount_id?: number;
            reason?: CancelOrderReject.Reason;
            market_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_seq_num" in data && data.msg_seq_num != undefined) {
                    this.msg_seq_num = data.msg_seq_num;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("transact_time" in data && data.transact_time != undefined) {
                    this.transact_time = data.transact_time;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
            }
        }
        get msg_seq_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_seq_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set transact_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, CancelOrderReject.Reason.UNCLASSIFIED) as CancelOrderReject.Reason;
        }
        set reason(value: CancelOrderReject.Reason) {
            pb_1.Message.setField(this, 6, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            subaccount_id?: number;
            reason?: CancelOrderReject.Reason;
            market_id?: number;
        }): CancelOrderReject {
            const message = new CancelOrderReject({});
            if (data.msg_seq_num != null) {
                message.msg_seq_num = data.msg_seq_num;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.transact_time != null) {
                message.transact_time = data.transact_time;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_seq_num?: number;
                client_order_id?: number;
                request_id?: number;
                transact_time?: number;
                subaccount_id?: number;
                reason?: CancelOrderReject.Reason;
                market_id?: number;
            } = {};
            if (this.msg_seq_num != null) {
                data.msg_seq_num = this.msg_seq_num;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.transact_time != null) {
                data.transact_time = this.transact_time;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_seq_num != 0)
                writer.writeUint64(1, this.msg_seq_num);
            if (this.client_order_id != 0)
                writer.writeUint64(2, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.transact_time != 0)
                writer.writeUint64(4, this.transact_time);
            if (this.subaccount_id != 0)
                writer.writeUint64(5, this.subaccount_id);
            if (this.reason != CancelOrderReject.Reason.UNCLASSIFIED)
                writer.writeEnum(6, this.reason);
            if (this.market_id != 0)
                writer.writeUint64(7, this.market_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOrderReject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOrderReject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_seq_num = reader.readUint64();
                        break;
                    case 2:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.transact_time = reader.readUint64();
                        break;
                    case 5:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.market_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelOrderReject {
            return CancelOrderReject.deserialize(bytes);
        }
    }
    export namespace CancelOrderReject {
        export enum Reason {
            UNCLASSIFIED = 0,
            INVALID_MARKET_ID = 1,
            ORDER_NOT_FOUND = 2
        }
    }
    export class ModifyOrderReject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            subaccount_id?: number;
            reason?: ModifyOrderReject.Reason;
            market_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_seq_num" in data && data.msg_seq_num != undefined) {
                    this.msg_seq_num = data.msg_seq_num;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("transact_time" in data && data.transact_time != undefined) {
                    this.transact_time = data.transact_time;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
            }
        }
        get msg_seq_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_seq_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set transact_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, ModifyOrderReject.Reason.UNCLASSIFIED) as ModifyOrderReject.Reason;
        }
        set reason(value: ModifyOrderReject.Reason) {
            pb_1.Message.setField(this, 6, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            msg_seq_num?: number;
            client_order_id?: number;
            request_id?: number;
            transact_time?: number;
            subaccount_id?: number;
            reason?: ModifyOrderReject.Reason;
            market_id?: number;
        }): ModifyOrderReject {
            const message = new ModifyOrderReject({});
            if (data.msg_seq_num != null) {
                message.msg_seq_num = data.msg_seq_num;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.transact_time != null) {
                message.transact_time = data.transact_time;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_seq_num?: number;
                client_order_id?: number;
                request_id?: number;
                transact_time?: number;
                subaccount_id?: number;
                reason?: ModifyOrderReject.Reason;
                market_id?: number;
            } = {};
            if (this.msg_seq_num != null) {
                data.msg_seq_num = this.msg_seq_num;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.transact_time != null) {
                data.transact_time = this.transact_time;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_seq_num != 0)
                writer.writeUint64(1, this.msg_seq_num);
            if (this.client_order_id != 0)
                writer.writeUint64(2, this.client_order_id);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.transact_time != 0)
                writer.writeUint64(4, this.transact_time);
            if (this.subaccount_id != 0)
                writer.writeUint64(5, this.subaccount_id);
            if (this.reason != ModifyOrderReject.Reason.UNCLASSIFIED)
                writer.writeEnum(6, this.reason);
            if (this.market_id != 0)
                writer.writeUint64(7, this.market_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyOrderReject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyOrderReject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_seq_num = reader.readUint64();
                        break;
                    case 2:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.transact_time = reader.readUint64();
                        break;
                    case 5:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.market_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModifyOrderReject {
            return ModifyOrderReject.deserialize(bytes);
        }
    }
    export namespace ModifyOrderReject {
        export enum Reason {
            UNCLASSIFIED = 0,
            INVALID_QUANTITY = 1,
            INVALID_MARKET_ID = 2,
            ORDER_NOT_FOUND = 3,
            INVALID_IFM = 4,
            INVALID_POST_ONLY = 5,
            INVALID_SELF_TRADE_PREVENTION = 6,
            UNKNOWN_TRADER = 7,
            EXCEEDED_SPOT_POSITION = 8,
            POST_ONLY_WOULD_TRADE = 9
        }
    }
    export class Fill extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg_seq_num?: number;
            market_id?: number;
            client_order_id?: number;
            exchange_order_id?: number;
            fill_price?: number;
            fill_quantity?: number;
            leaves_quantity?: number;
            transact_time?: number;
            subaccount_id?: number;
            cumulative_quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_seq_num" in data && data.msg_seq_num != undefined) {
                    this.msg_seq_num = data.msg_seq_num;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("exchange_order_id" in data && data.exchange_order_id != undefined) {
                    this.exchange_order_id = data.exchange_order_id;
                }
                if ("fill_price" in data && data.fill_price != undefined) {
                    this.fill_price = data.fill_price;
                }
                if ("fill_quantity" in data && data.fill_quantity != undefined) {
                    this.fill_quantity = data.fill_quantity;
                }
                if ("leaves_quantity" in data && data.leaves_quantity != undefined) {
                    this.leaves_quantity = data.leaves_quantity;
                }
                if ("transact_time" in data && data.transact_time != undefined) {
                    this.transact_time = data.transact_time;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("cumulative_quantity" in data && data.cumulative_quantity != undefined) {
                    this.cumulative_quantity = data.cumulative_quantity;
                }
            }
        }
        get msg_seq_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_seq_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get exchange_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set exchange_order_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fill_price() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set fill_price(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get fill_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set fill_quantity(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get leaves_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set leaves_quantity(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set transact_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get cumulative_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set cumulative_quantity(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            msg_seq_num?: number;
            market_id?: number;
            client_order_id?: number;
            exchange_order_id?: number;
            fill_price?: number;
            fill_quantity?: number;
            leaves_quantity?: number;
            transact_time?: number;
            subaccount_id?: number;
            cumulative_quantity?: number;
        }): Fill {
            const message = new Fill({});
            if (data.msg_seq_num != null) {
                message.msg_seq_num = data.msg_seq_num;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.exchange_order_id != null) {
                message.exchange_order_id = data.exchange_order_id;
            }
            if (data.fill_price != null) {
                message.fill_price = data.fill_price;
            }
            if (data.fill_quantity != null) {
                message.fill_quantity = data.fill_quantity;
            }
            if (data.leaves_quantity != null) {
                message.leaves_quantity = data.leaves_quantity;
            }
            if (data.transact_time != null) {
                message.transact_time = data.transact_time;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.cumulative_quantity != null) {
                message.cumulative_quantity = data.cumulative_quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_seq_num?: number;
                market_id?: number;
                client_order_id?: number;
                exchange_order_id?: number;
                fill_price?: number;
                fill_quantity?: number;
                leaves_quantity?: number;
                transact_time?: number;
                subaccount_id?: number;
                cumulative_quantity?: number;
            } = {};
            if (this.msg_seq_num != null) {
                data.msg_seq_num = this.msg_seq_num;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.exchange_order_id != null) {
                data.exchange_order_id = this.exchange_order_id;
            }
            if (this.fill_price != null) {
                data.fill_price = this.fill_price;
            }
            if (this.fill_quantity != null) {
                data.fill_quantity = this.fill_quantity;
            }
            if (this.leaves_quantity != null) {
                data.leaves_quantity = this.leaves_quantity;
            }
            if (this.transact_time != null) {
                data.transact_time = this.transact_time;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.cumulative_quantity != null) {
                data.cumulative_quantity = this.cumulative_quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_seq_num != 0)
                writer.writeUint64(1, this.msg_seq_num);
            if (this.market_id != 0)
                writer.writeUint64(2, this.market_id);
            if (this.client_order_id != 0)
                writer.writeUint64(3, this.client_order_id);
            if (this.exchange_order_id != 0)
                writer.writeUint64(4, this.exchange_order_id);
            if (this.fill_price != 0)
                writer.writeUint64(5, this.fill_price);
            if (this.fill_quantity != 0)
                writer.writeUint64(6, this.fill_quantity);
            if (this.leaves_quantity != 0)
                writer.writeUint64(7, this.leaves_quantity);
            if (this.transact_time != 0)
                writer.writeUint64(8, this.transact_time);
            if (this.subaccount_id != 0)
                writer.writeUint64(9, this.subaccount_id);
            if (this.cumulative_quantity != 0)
                writer.writeUint64(10, this.cumulative_quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fill {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fill();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_seq_num = reader.readUint64();
                        break;
                    case 2:
                        message.market_id = reader.readUint64();
                        break;
                    case 3:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 4:
                        message.exchange_order_id = reader.readUint64();
                        break;
                    case 5:
                        message.fill_price = reader.readUint64();
                        break;
                    case 6:
                        message.fill_quantity = reader.readUint64();
                        break;
                    case 7:
                        message.leaves_quantity = reader.readUint64();
                        break;
                    case 8:
                        message.transact_time = reader.readUint64();
                        break;
                    case 9:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 10:
                        message.cumulative_quantity = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Fill {
            return Fill.deserialize(bytes);
        }
    }
    export class AssetPosition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subaccount_id?: number;
            asset_id?: number;
            total?: RawUnits;
            available?: RawUnits;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("asset_id" in data && data.asset_id != undefined) {
                    this.asset_id = data.asset_id;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("available" in data && data.available != undefined) {
                    this.available = data.available;
                }
            }
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get asset_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set asset_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getWrapperField(this, RawUnits, 3) as RawUnits;
        }
        set total(value: RawUnits) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_total() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get available() {
            return pb_1.Message.getWrapperField(this, RawUnits, 4) as RawUnits;
        }
        set available(value: RawUnits) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_available() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            subaccount_id?: number;
            asset_id?: number;
            total?: ReturnType<typeof RawUnits.prototype.toObject>;
            available?: ReturnType<typeof RawUnits.prototype.toObject>;
        }): AssetPosition {
            const message = new AssetPosition({});
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.asset_id != null) {
                message.asset_id = data.asset_id;
            }
            if (data.total != null) {
                message.total = RawUnits.fromObject(data.total);
            }
            if (data.available != null) {
                message.available = RawUnits.fromObject(data.available);
            }
            return message;
        }
        toObject() {
            const data: {
                subaccount_id?: number;
                asset_id?: number;
                total?: ReturnType<typeof RawUnits.prototype.toObject>;
                available?: ReturnType<typeof RawUnits.prototype.toObject>;
            } = {};
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.asset_id != null) {
                data.asset_id = this.asset_id;
            }
            if (this.total != null) {
                data.total = this.total.toObject();
            }
            if (this.available != null) {
                data.available = this.available.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subaccount_id != 0)
                writer.writeUint64(1, this.subaccount_id);
            if (this.asset_id != 0)
                writer.writeUint64(2, this.asset_id);
            if (this.has_total)
                writer.writeMessage(3, this.total, () => this.total.serialize(writer));
            if (this.has_available)
                writer.writeMessage(4, this.available, () => this.available.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetPosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetPosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 2:
                        message.asset_id = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.total, () => message.total = RawUnits.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.available, () => message.available = RawUnits.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetPosition {
            return AssetPosition.deserialize(bytes);
        }
    }
    export class RawUnits extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            word0?: number;
            word1?: number;
            word2?: number;
            word3?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("word0" in data && data.word0 != undefined) {
                    this.word0 = data.word0;
                }
                if ("word1" in data && data.word1 != undefined) {
                    this.word1 = data.word1;
                }
                if ("word2" in data && data.word2 != undefined) {
                    this.word2 = data.word2;
                }
                if ("word3" in data && data.word3 != undefined) {
                    this.word3 = data.word3;
                }
            }
        }
        get word0() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set word0(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get word1() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set word1(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get word2() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set word2(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get word3() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set word3(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            word0?: number;
            word1?: number;
            word2?: number;
            word3?: number;
        }): RawUnits {
            const message = new RawUnits({});
            if (data.word0 != null) {
                message.word0 = data.word0;
            }
            if (data.word1 != null) {
                message.word1 = data.word1;
            }
            if (data.word2 != null) {
                message.word2 = data.word2;
            }
            if (data.word3 != null) {
                message.word3 = data.word3;
            }
            return message;
        }
        toObject() {
            const data: {
                word0?: number;
                word1?: number;
                word2?: number;
                word3?: number;
            } = {};
            if (this.word0 != null) {
                data.word0 = this.word0;
            }
            if (this.word1 != null) {
                data.word1 = this.word1;
            }
            if (this.word2 != null) {
                data.word2 = this.word2;
            }
            if (this.word3 != null) {
                data.word3 = this.word3;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.word0 != 0)
                writer.writeUint64(1, this.word0);
            if (this.word1 != 0)
                writer.writeUint64(2, this.word1);
            if (this.word2 != 0)
                writer.writeUint64(3, this.word2);
            if (this.word3 != 0)
                writer.writeUint64(4, this.word3);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RawUnits {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RawUnits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.word0 = reader.readUint64();
                        break;
                    case 2:
                        message.word1 = reader.readUint64();
                        break;
                    case 3:
                        message.word2 = reader.readUint64();
                        break;
                    case 4:
                        message.word3 = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RawUnits {
            return RawUnits.deserialize(bytes);
        }
    }
    export class Bootstrap extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            done?: Done;
            resting?: never;
            position?: never;
        } | {
            done?: never;
            resting?: RestingOrders;
            position?: never;
        } | {
            done?: never;
            resting?: never;
            position?: AssetPositions;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("done" in data && data.done != undefined) {
                    this.done = data.done;
                }
                if ("resting" in data && data.resting != undefined) {
                    this.resting = data.resting;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get done() {
            return pb_1.Message.getWrapperField(this, Done, 1) as Done;
        }
        set done(value: Done) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_done() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get resting() {
            return pb_1.Message.getWrapperField(this, RestingOrders, 2) as RestingOrders;
        }
        set resting(value: RestingOrders) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_resting() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get position() {
            return pb_1.Message.getWrapperField(this, AssetPositions, 3) as AssetPositions;
        }
        set position(value: AssetPositions) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get inner() {
            const cases: {
                [index: number]: "none" | "done" | "resting" | "position";
            } = {
                0: "none",
                1: "done",
                2: "resting",
                3: "position"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            done?: ReturnType<typeof Done.prototype.toObject>;
            resting?: ReturnType<typeof RestingOrders.prototype.toObject>;
            position?: ReturnType<typeof AssetPositions.prototype.toObject>;
        }): Bootstrap {
            const message = new Bootstrap({});
            if (data.done != null) {
                message.done = Done.fromObject(data.done);
            }
            if (data.resting != null) {
                message.resting = RestingOrders.fromObject(data.resting);
            }
            if (data.position != null) {
                message.position = AssetPositions.fromObject(data.position);
            }
            return message;
        }
        toObject() {
            const data: {
                done?: ReturnType<typeof Done.prototype.toObject>;
                resting?: ReturnType<typeof RestingOrders.prototype.toObject>;
                position?: ReturnType<typeof AssetPositions.prototype.toObject>;
            } = {};
            if (this.done != null) {
                data.done = this.done.toObject();
            }
            if (this.resting != null) {
                data.resting = this.resting.toObject();
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_done)
                writer.writeMessage(1, this.done, () => this.done.serialize(writer));
            if (this.has_resting)
                writer.writeMessage(2, this.resting, () => this.resting.serialize(writer));
            if (this.has_position)
                writer.writeMessage(3, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bootstrap {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Bootstrap();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.done, () => message.done = Done.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.resting, () => message.resting = RestingOrders.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.position, () => message.position = AssetPositions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Bootstrap {
            return Bootstrap.deserialize(bytes);
        }
    }
    export class RestingOrders extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            orders?: RestingOrder[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("orders" in data && data.orders != undefined) {
                    this.orders = data.orders;
                }
            }
        }
        get orders() {
            return pb_1.Message.getRepeatedWrapperField(this, RestingOrder, 1) as RestingOrder[];
        }
        set orders(value: RestingOrder[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            orders?: ReturnType<typeof RestingOrder.prototype.toObject>[];
        }): RestingOrders {
            const message = new RestingOrders({});
            if (data.orders != null) {
                message.orders = data.orders.map(item => RestingOrder.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                orders?: ReturnType<typeof RestingOrder.prototype.toObject>[];
            } = {};
            if (this.orders != null) {
                data.orders = this.orders.map((item: RestingOrder) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.orders.length)
                writer.writeRepeatedMessage(1, this.orders, (item: RestingOrder) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RestingOrders {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RestingOrders();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.orders, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RestingOrder.deserialize(reader), RestingOrder));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RestingOrders {
            return RestingOrders.deserialize(bytes);
        }
    }
    export class AssetPositions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            positions?: AssetPosition[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("positions" in data && data.positions != undefined) {
                    this.positions = data.positions;
                }
            }
        }
        get positions() {
            return pb_1.Message.getRepeatedWrapperField(this, AssetPosition, 1) as AssetPosition[];
        }
        set positions(value: AssetPosition[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            positions?: ReturnType<typeof AssetPosition.prototype.toObject>[];
        }): AssetPositions {
            const message = new AssetPositions({});
            if (data.positions != null) {
                message.positions = data.positions.map(item => AssetPosition.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                positions?: ReturnType<typeof AssetPosition.prototype.toObject>[];
            } = {};
            if (this.positions != null) {
                data.positions = this.positions.map((item: AssetPosition) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.positions.length)
                writer.writeRepeatedMessage(1, this.positions, (item: AssetPosition) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetPositions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetPositions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.positions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AssetPosition.deserialize(reader), AssetPosition));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetPositions {
            return AssetPositions.deserialize(bytes);
        }
    }
    export class Done extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            latest_transact_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("latest_transact_time" in data && data.latest_transact_time != undefined) {
                    this.latest_transact_time = data.latest_transact_time;
                }
            }
        }
        get latest_transact_time() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set latest_transact_time(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            latest_transact_time?: number;
        }): Done {
            const message = new Done({});
            if (data.latest_transact_time != null) {
                message.latest_transact_time = data.latest_transact_time;
            }
            return message;
        }
        toObject() {
            const data: {
                latest_transact_time?: number;
            } = {};
            if (this.latest_transact_time != null) {
                data.latest_transact_time = this.latest_transact_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.latest_transact_time != 0)
                writer.writeUint64(1, this.latest_transact_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Done {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Done();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.latest_transact_time = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Done {
            return Done.deserialize(bytes);
        }
    }
    export class RestingOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_order_id?: number;
            exchange_order_id?: number;
            market_id?: number;
            price?: number;
            order_quantity?: number;
            side?: Side;
            time_in_force?: TimeInForce;
            order_type?: OrderType;
            remaining_quantity?: number;
            rest_time?: number;
            subaccount_id?: number;
            cumulative_quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_order_id" in data && data.client_order_id != undefined) {
                    this.client_order_id = data.client_order_id;
                }
                if ("exchange_order_id" in data && data.exchange_order_id != undefined) {
                    this.exchange_order_id = data.exchange_order_id;
                }
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("order_quantity" in data && data.order_quantity != undefined) {
                    this.order_quantity = data.order_quantity;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
                if ("time_in_force" in data && data.time_in_force != undefined) {
                    this.time_in_force = data.time_in_force;
                }
                if ("order_type" in data && data.order_type != undefined) {
                    this.order_type = data.order_type;
                }
                if ("remaining_quantity" in data && data.remaining_quantity != undefined) {
                    this.remaining_quantity = data.remaining_quantity;
                }
                if ("rest_time" in data && data.rest_time != undefined) {
                    this.rest_time = data.rest_time;
                }
                if ("subaccount_id" in data && data.subaccount_id != undefined) {
                    this.subaccount_id = data.subaccount_id;
                }
                if ("cumulative_quantity" in data && data.cumulative_quantity != undefined) {
                    this.cumulative_quantity = data.cumulative_quantity;
                }
            }
        }
        get client_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set client_order_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get exchange_order_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exchange_order_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get order_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set order_quantity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 6, Side.BID) as Side;
        }
        set side(value: Side) {
            pb_1.Message.setField(this, 6, value);
        }
        get time_in_force() {
            return pb_1.Message.getFieldWithDefault(this, 7, TimeInForce.IMMEDIATE_OR_CANCEL) as TimeInForce;
        }
        set time_in_force(value: TimeInForce) {
            pb_1.Message.setField(this, 7, value);
        }
        get order_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, OrderType.LIMIT) as OrderType;
        }
        set order_type(value: OrderType) {
            pb_1.Message.setField(this, 8, value);
        }
        get remaining_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set remaining_quantity(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get rest_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set rest_time(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get subaccount_id() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set subaccount_id(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get cumulative_quantity() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set cumulative_quantity(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            client_order_id?: number;
            exchange_order_id?: number;
            market_id?: number;
            price?: number;
            order_quantity?: number;
            side?: Side;
            time_in_force?: TimeInForce;
            order_type?: OrderType;
            remaining_quantity?: number;
            rest_time?: number;
            subaccount_id?: number;
            cumulative_quantity?: number;
        }): RestingOrder {
            const message = new RestingOrder({});
            if (data.client_order_id != null) {
                message.client_order_id = data.client_order_id;
            }
            if (data.exchange_order_id != null) {
                message.exchange_order_id = data.exchange_order_id;
            }
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.order_quantity != null) {
                message.order_quantity = data.order_quantity;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            if (data.time_in_force != null) {
                message.time_in_force = data.time_in_force;
            }
            if (data.order_type != null) {
                message.order_type = data.order_type;
            }
            if (data.remaining_quantity != null) {
                message.remaining_quantity = data.remaining_quantity;
            }
            if (data.rest_time != null) {
                message.rest_time = data.rest_time;
            }
            if (data.subaccount_id != null) {
                message.subaccount_id = data.subaccount_id;
            }
            if (data.cumulative_quantity != null) {
                message.cumulative_quantity = data.cumulative_quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                client_order_id?: number;
                exchange_order_id?: number;
                market_id?: number;
                price?: number;
                order_quantity?: number;
                side?: Side;
                time_in_force?: TimeInForce;
                order_type?: OrderType;
                remaining_quantity?: number;
                rest_time?: number;
                subaccount_id?: number;
                cumulative_quantity?: number;
            } = {};
            if (this.client_order_id != null) {
                data.client_order_id = this.client_order_id;
            }
            if (this.exchange_order_id != null) {
                data.exchange_order_id = this.exchange_order_id;
            }
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.order_quantity != null) {
                data.order_quantity = this.order_quantity;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            if (this.time_in_force != null) {
                data.time_in_force = this.time_in_force;
            }
            if (this.order_type != null) {
                data.order_type = this.order_type;
            }
            if (this.remaining_quantity != null) {
                data.remaining_quantity = this.remaining_quantity;
            }
            if (this.rest_time != null) {
                data.rest_time = this.rest_time;
            }
            if (this.subaccount_id != null) {
                data.subaccount_id = this.subaccount_id;
            }
            if (this.cumulative_quantity != null) {
                data.cumulative_quantity = this.cumulative_quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_order_id != 0)
                writer.writeUint64(1, this.client_order_id);
            if (this.exchange_order_id != 0)
                writer.writeUint64(2, this.exchange_order_id);
            if (this.market_id != 0)
                writer.writeUint64(3, this.market_id);
            if (this.price != 0)
                writer.writeUint64(4, this.price);
            if (this.order_quantity != 0)
                writer.writeUint64(5, this.order_quantity);
            if (this.side != Side.BID)
                writer.writeEnum(6, this.side);
            if (this.time_in_force != TimeInForce.IMMEDIATE_OR_CANCEL)
                writer.writeEnum(7, this.time_in_force);
            if (this.order_type != OrderType.LIMIT)
                writer.writeEnum(8, this.order_type);
            if (this.remaining_quantity != 0)
                writer.writeUint64(9, this.remaining_quantity);
            if (this.rest_time != 0)
                writer.writeUint64(10, this.rest_time);
            if (this.subaccount_id != 0)
                writer.writeUint64(11, this.subaccount_id);
            if (this.cumulative_quantity != 0)
                writer.writeUint64(12, this.cumulative_quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RestingOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RestingOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_order_id = reader.readUint64();
                        break;
                    case 2:
                        message.exchange_order_id = reader.readUint64();
                        break;
                    case 3:
                        message.market_id = reader.readUint64();
                        break;
                    case 4:
                        message.price = reader.readUint64();
                        break;
                    case 5:
                        message.order_quantity = reader.readUint64();
                        break;
                    case 6:
                        message.side = reader.readEnum();
                        break;
                    case 7:
                        message.time_in_force = reader.readEnum();
                        break;
                    case 8:
                        message.order_type = reader.readEnum();
                        break;
                    case 9:
                        message.remaining_quantity = reader.readUint64();
                        break;
                    case 10:
                        message.rest_time = reader.readUint64();
                        break;
                    case 11:
                        message.subaccount_id = reader.readUint64();
                        break;
                    case 12:
                        message.cumulative_quantity = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RestingOrder {
            return RestingOrder.deserialize(bytes);
        }
    }
}
