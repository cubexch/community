// This schema defines the Protobuf messages used for communication with the
// Cube Order Service (Osmium, OS).
//
// ### Connection
//
// The order service exposes a websocket endpoint for clients to connect to.
// Once connected, clients should submit a [`Credentials`](#credentials)
// message, listen for [`Bootstrap`](#bootstrap) messages for resting orders
// and positions, and then can begin submitting
// [`OrderRequest`](#order-request) and processing
// [`OrderResponse`](#order-response).
//
// ### Heartbeats
//
// Application-level heartbeats are expected every 30 seconds. If more than one
// interval is missed, the order service will disconnect the websocket.
//
// ### Price, Quantity, and Lots
//
// All orders are placed on a single market, specified by the market-id. The
// market definition specifies the base and quote assets and their respective
// lot sizes for the particular market. Prices and quantities in this API are in
// units of base and quote _lots_. That is, a quantity of 1 equals 1 base lot,
// and a price of 10 equals 10 quote lots / base lot (read as quote lots per
// base lot).
//
// For example, consider an ETHBTC market. ETH is the base asset and BTC is the
// quote asset. ETH has 18 decimal places (`1 ETH = 10^18 WEI`) and BTC has 8
// decimal places (`1 BTC = 10^8 SAT`). Suppose that in this example, the ETHBTC
// market has a base lot size of `10^15` and a quote lot size of `10^0` (`1`).
// Then an order placed with `quantity = 230` and `price = 6300` in
// market-agnostic terms is an order for `0.23 ETH` at a price of `0.06300 BTC /
// ETH`. In more detail, we have:
//
// ```text
// 230 base lots
//   * (10^15 WEI / base lot)
//   / (10^18 WEI / ETH)
//   = 230 ETH
//
// 6300 quote lots / base lot
//   * (1 SAT / quote lot)
//   / (10^15 WEI / base lot)
//   * (10^18 WEI / ETH)
//   / (10^8 SAT / BTC)
//   = 0.06300 BTC / ETH
// ```
//
// ### Exchange Order ID
//
// Each order is assigned a unique ID by the exchange. This order ID is
// consistent across modifies (including cancel-replace), and other operations.
// The exchange order ID can be used to find a particular order in the
// market-by-order market data feed, which allows the determination of FIFO
// queue priority, etc.
//
// ### Transact Time
//
// The transact time is the matching engine timestamp for when an event is
// processed. Events that occur with the same transact time occur atomically
// from the perspective of the matching engine.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.15.8
// source: trade.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Side specifies whether the order is buying or selling the base asset. A trade
// is matched when a buyer (BID) and a seller (ASK) agree on a price (cross).
// The bid-ask spread is the gap between the highest bid price and lowest ask
// price on the orderbook.
type Side int32

const (
	// A bid order buys the base asset with the quote asset.
	Side_BID Side = 0
	// An ask (or offer) order sells the base asset and gets the quote asset.
	Side_ASK Side = 1
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "BID",
		1: "ASK",
	}
	Side_value = map[string]int32{
		"BID": 0,
		"ASK": 1,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[0].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[0]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{0}
}

// Time-in-force (TIF) specifies how long the order remains in effect.
type TimeInForce int32

const (
	// Immediate-or-cancel (IOC), also known as fill-and-kill (FAK), orders are
	// immediately executed against resting orders. If the order cannot be fully
	// filled, the remaining balance will be canceled, and an additional
	// CancelOrderAck with the IOC reason will be sent.
	TimeInForce_IMMEDIATE_OR_CANCEL TimeInForce = 0
	// Good-for-session (GFS) orders are active until they are completely
	// executed, canceled, or when the session expires.
	TimeInForce_GOOD_FOR_SESSION TimeInForce = 1
	// Fill-or-kill (FOK), also known as all-or-none (AON), orders must be filled
	// immediately against resting orders or the entire order is canceled.
	TimeInForce_FILL_OR_KILL TimeInForce = 2
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "IMMEDIATE_OR_CANCEL",
		1: "GOOD_FOR_SESSION",
		2: "FILL_OR_KILL",
	}
	TimeInForce_value = map[string]int32{
		"IMMEDIATE_OR_CANCEL": 0,
		"GOOD_FOR_SESSION":    1,
		"FILL_OR_KILL":        2,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[1].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[1]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{1}
}

// Order-type specifies how the order will be placed into the order book.
type OrderType int32

const (
	// A limit order is accompanied with a price (inclusive) that specifies the
	// upper limit to buy and the lower limit to sell. If the price is not
	// immediately available and the TIF allows resting orders, the limit order
	// will rest until filled or canceled.
	OrderType_LIMIT OrderType = 0
	// A market limit order crosses the bid-ask spread and, if not fully filled,
	// becomes a limit order at the best available market price. If there is no
	// opposing market, the order is rejected with the NO_OPPOSING_LIMIT_ORDER
	// reason. Price must be null.
	OrderType_MARKET_LIMIT OrderType = 1
	// A market with protection order crosses the bid-ask spread and continues to
	// cross until the order is fully filled or the price protection level,
	// defined by the best market price widened by a market-specific protection
	// point count, is reached. If there is no opposing market, the order is
	// rejected with the NO_OPPOSING_LIMIT_ORDER reason. Price must be null.
	OrderType_MARKET_WITH_PROTECTION OrderType = 2
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "LIMIT",
		1: "MARKET_LIMIT",
		2: "MARKET_WITH_PROTECTION",
	}
	OrderType_value = map[string]int32{
		"LIMIT":                  0,
		"MARKET_LIMIT":           1,
		"MARKET_WITH_PROTECTION": 2,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[2].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[2]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{2}
}

// Self-trade-prevention (STP) allows market participants to prevent the matching
// of orders for accounts with common ownership. Currently, STP only applies for
// orders with the same subaccount_id. STP will only be applied when a match is
// about to occur between the two orders. That is, if the aggressing order is
// fully filled before reaching the resting order in FIFO order, no STP cancels
// will happen.
type SelfTradePrevention int32

const (
	// Cancel-resting specifies that if a self-trade is about to occur, the
	// resting order should be canceled instead and further order book processing
	// should occur as normal.
	SelfTradePrevention_CANCEL_RESTING SelfTradePrevention = 0
	// Cancel-aggressing specifies that if a self-trade is about to occur, the
	// aggressing order should be canceled instead and no further action should be
	// taken.
	SelfTradePrevention_CANCEL_AGGRESSING SelfTradePrevention = 1
	// Allow-self-trade disables STP functionality.
	SelfTradePrevention_ALLOW_SELF_TRADE SelfTradePrevention = 2
)

// Enum value maps for SelfTradePrevention.
var (
	SelfTradePrevention_name = map[int32]string{
		0: "CANCEL_RESTING",
		1: "CANCEL_AGGRESSING",
		2: "ALLOW_SELF_TRADE",
	}
	SelfTradePrevention_value = map[string]int32{
		"CANCEL_RESTING":    0,
		"CANCEL_AGGRESSING": 1,
		"ALLOW_SELF_TRADE":  2,
	}
)

func (x SelfTradePrevention) Enum() *SelfTradePrevention {
	p := new(SelfTradePrevention)
	*p = x
	return p
}

func (x SelfTradePrevention) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelfTradePrevention) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[3].Descriptor()
}

func (SelfTradePrevention) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[3]
}

func (x SelfTradePrevention) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelfTradePrevention.Descriptor instead.
func (SelfTradePrevention) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{3}
}

// Post-only specifies whether a new order is allowed to immediately execute.
// Post-only cannot be enabled with market orders or with a TIF that does not
// allow resting orders.
type PostOnly int32

const (
	PostOnly_DISABLED PostOnly = 0
	PostOnly_ENABLED  PostOnly = 1
)

// Enum value maps for PostOnly.
var (
	PostOnly_name = map[int32]string{
		0: "DISABLED",
		1: "ENABLED",
	}
	PostOnly_value = map[string]int32{
		"DISABLED": 0,
		"ENABLED":  1,
	}
)

func (x PostOnly) Enum() *PostOnly {
	p := new(PostOnly)
	*p = x
	return p
}

func (x PostOnly) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostOnly) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[4].Descriptor()
}

func (PostOnly) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[4]
}

func (x PostOnly) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostOnly.Descriptor instead.
func (PostOnly) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{4}
}

type CancelOrderAck_Reason int32

const (
	CancelOrderAck_UNCLASSIFIED CancelOrderAck_Reason = 0
	CancelOrderAck_DISCONNECT   CancelOrderAck_Reason = 1
	// This order was specified in a cancel request.
	CancelOrderAck_REQUESTED CancelOrderAck_Reason = 2
	// This was an IOC new-order that does not get fully filled.
	CancelOrderAck_IOC CancelOrderAck_Reason = 3
	// A resting order was STP canceled.
	CancelOrderAck_STP_RESTING CancelOrderAck_Reason = 4
	// An aggressing order was STP canceled.
	CancelOrderAck_STP_AGGRESSING CancelOrderAck_Reason = 5
	// This order was covered by a mass-cancel request.
	CancelOrderAck_MASS_CANCEL CancelOrderAck_Reason = 6
)

// Enum value maps for CancelOrderAck_Reason.
var (
	CancelOrderAck_Reason_name = map[int32]string{
		0: "UNCLASSIFIED",
		1: "DISCONNECT",
		2: "REQUESTED",
		3: "IOC",
		4: "STP_RESTING",
		5: "STP_AGGRESSING",
		6: "MASS_CANCEL",
	}
	CancelOrderAck_Reason_value = map[string]int32{
		"UNCLASSIFIED":   0,
		"DISCONNECT":     1,
		"REQUESTED":      2,
		"IOC":            3,
		"STP_RESTING":    4,
		"STP_AGGRESSING": 5,
		"MASS_CANCEL":    6,
	}
)

func (x CancelOrderAck_Reason) Enum() *CancelOrderAck_Reason {
	p := new(CancelOrderAck_Reason)
	*p = x
	return p
}

func (x CancelOrderAck_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelOrderAck_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[5].Descriptor()
}

func (CancelOrderAck_Reason) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[5]
}

func (x CancelOrderAck_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelOrderAck_Reason.Descriptor instead.
func (CancelOrderAck_Reason) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{9, 0}
}

type MassCancelAck_Reason int32

const (
	MassCancelAck_UNCLASSIFIED      MassCancelAck_Reason = 0
	MassCancelAck_INVALID_MARKET_ID MassCancelAck_Reason = 1
	MassCancelAck_INVALID_SIDE      MassCancelAck_Reason = 2
)

// Enum value maps for MassCancelAck_Reason.
var (
	MassCancelAck_Reason_name = map[int32]string{
		0: "UNCLASSIFIED",
		1: "INVALID_MARKET_ID",
		2: "INVALID_SIDE",
	}
	MassCancelAck_Reason_value = map[string]int32{
		"UNCLASSIFIED":      0,
		"INVALID_MARKET_ID": 1,
		"INVALID_SIDE":      2,
	}
)

func (x MassCancelAck_Reason) Enum() *MassCancelAck_Reason {
	p := new(MassCancelAck_Reason)
	*p = x
	return p
}

func (x MassCancelAck_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MassCancelAck_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[6].Descriptor()
}

func (MassCancelAck_Reason) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[6]
}

func (x MassCancelAck_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MassCancelAck_Reason.Descriptor instead.
func (MassCancelAck_Reason) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{11, 0}
}

// Reasons that are prefixed with `INVALID_` normally indicate that the
// corresponding field did not take a valid value.
type NewOrderReject_Reason int32

const (
	NewOrderReject_UNCLASSIFIED NewOrderReject_Reason = 0
	// Quantity was zero.
	NewOrderReject_INVALID_QUANTITY NewOrderReject_Reason = 1
	// The specified market ID does not exist.
	NewOrderReject_INVALID_MARKET_ID NewOrderReject_Reason = 2
	// The specified client order ID was not unique among open orders for this
	// subaccount.
	NewOrderReject_DUPLICATE_ORDER_ID            NewOrderReject_Reason = 3
	NewOrderReject_INVALID_SIDE                  NewOrderReject_Reason = 4
	NewOrderReject_INVALID_TIME_IN_FORCE         NewOrderReject_Reason = 5
	NewOrderReject_INVALID_ORDER_TYPE            NewOrderReject_Reason = 6
	NewOrderReject_INVALID_POST_ONLY             NewOrderReject_Reason = 7
	NewOrderReject_INVALID_SELF_TRADE_PREVENTION NewOrderReject_Reason = 8
	// Internal error: the matching engine could not find this subaccounts
	// positions.
	NewOrderReject_UNKNOWN_TRADER              NewOrderReject_Reason = 9
	NewOrderReject_PRICE_WITH_MARKET_ORDER     NewOrderReject_Reason = 10
	NewOrderReject_POST_ONLY_WITH_MARKET_ORDER NewOrderReject_Reason = 11
	NewOrderReject_POST_ONLY_WITH_INVALID_TIF  NewOrderReject_Reason = 12
	// The sum of open orders and this new-order would exceed the subaccounts
	// spot limits.
	NewOrderReject_EXCEEDED_SPOT_POSITION  NewOrderReject_Reason = 13
	NewOrderReject_NO_OPPOSING_LIMIT_ORDER NewOrderReject_Reason = 14
	// The post-only order would have crossed and traded.
	NewOrderReject_POST_ONLY_WOULD_TRADE NewOrderReject_Reason = 15
	// A FOK was not fully fillable against resting orders at the requested
	// price and quantity.
	NewOrderReject_DID_NOT_FULLY_FILL NewOrderReject_Reason = 16
)

// Enum value maps for NewOrderReject_Reason.
var (
	NewOrderReject_Reason_name = map[int32]string{
		0:  "UNCLASSIFIED",
		1:  "INVALID_QUANTITY",
		2:  "INVALID_MARKET_ID",
		3:  "DUPLICATE_ORDER_ID",
		4:  "INVALID_SIDE",
		5:  "INVALID_TIME_IN_FORCE",
		6:  "INVALID_ORDER_TYPE",
		7:  "INVALID_POST_ONLY",
		8:  "INVALID_SELF_TRADE_PREVENTION",
		9:  "UNKNOWN_TRADER",
		10: "PRICE_WITH_MARKET_ORDER",
		11: "POST_ONLY_WITH_MARKET_ORDER",
		12: "POST_ONLY_WITH_INVALID_TIF",
		13: "EXCEEDED_SPOT_POSITION",
		14: "NO_OPPOSING_LIMIT_ORDER",
		15: "POST_ONLY_WOULD_TRADE",
		16: "DID_NOT_FULLY_FILL",
	}
	NewOrderReject_Reason_value = map[string]int32{
		"UNCLASSIFIED":                  0,
		"INVALID_QUANTITY":              1,
		"INVALID_MARKET_ID":             2,
		"DUPLICATE_ORDER_ID":            3,
		"INVALID_SIDE":                  4,
		"INVALID_TIME_IN_FORCE":         5,
		"INVALID_ORDER_TYPE":            6,
		"INVALID_POST_ONLY":             7,
		"INVALID_SELF_TRADE_PREVENTION": 8,
		"UNKNOWN_TRADER":                9,
		"PRICE_WITH_MARKET_ORDER":       10,
		"POST_ONLY_WITH_MARKET_ORDER":   11,
		"POST_ONLY_WITH_INVALID_TIF":    12,
		"EXCEEDED_SPOT_POSITION":        13,
		"NO_OPPOSING_LIMIT_ORDER":       14,
		"POST_ONLY_WOULD_TRADE":         15,
		"DID_NOT_FULLY_FILL":            16,
	}
)

func (x NewOrderReject_Reason) Enum() *NewOrderReject_Reason {
	p := new(NewOrderReject_Reason)
	*p = x
	return p
}

func (x NewOrderReject_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewOrderReject_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[7].Descriptor()
}

func (NewOrderReject_Reason) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[7]
}

func (x NewOrderReject_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewOrderReject_Reason.Descriptor instead.
func (NewOrderReject_Reason) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{12, 0}
}

type CancelOrderReject_Reason int32

const (
	CancelOrderReject_UNCLASSIFIED CancelOrderReject_Reason = 0
	// The specified market ID does not exist.
	CancelOrderReject_INVALID_MARKET_ID CancelOrderReject_Reason = 1
	// The specified client order ID does not exist for the corresponding market
	// ID and subaccount ID.
	CancelOrderReject_ORDER_NOT_FOUND CancelOrderReject_Reason = 2
)

// Enum value maps for CancelOrderReject_Reason.
var (
	CancelOrderReject_Reason_name = map[int32]string{
		0: "UNCLASSIFIED",
		1: "INVALID_MARKET_ID",
		2: "ORDER_NOT_FOUND",
	}
	CancelOrderReject_Reason_value = map[string]int32{
		"UNCLASSIFIED":      0,
		"INVALID_MARKET_ID": 1,
		"ORDER_NOT_FOUND":   2,
	}
)

func (x CancelOrderReject_Reason) Enum() *CancelOrderReject_Reason {
	p := new(CancelOrderReject_Reason)
	*p = x
	return p
}

func (x CancelOrderReject_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelOrderReject_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[8].Descriptor()
}

func (CancelOrderReject_Reason) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[8]
}

func (x CancelOrderReject_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelOrderReject_Reason.Descriptor instead.
func (CancelOrderReject_Reason) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{13, 0}
}

// Reasons that are prefixed with `INVALID_` normally indicate that the
// corresponding field did not take a valid value.
type ModifyOrderReject_Reason int32

const (
	ModifyOrderReject_UNCLASSIFIED ModifyOrderReject_Reason = 0
	// Quantity was zero.
	ModifyOrderReject_INVALID_QUANTITY ModifyOrderReject_Reason = 1
	// The specified market ID does not exist.
	ModifyOrderReject_INVALID_MARKET_ID ModifyOrderReject_Reason = 2
	// The specified client order ID does not exist for the corresponding market
	// ID and subaccount ID.
	ModifyOrderReject_ORDER_NOT_FOUND               ModifyOrderReject_Reason = 3
	ModifyOrderReject_INVALID_IFM                   ModifyOrderReject_Reason = 4
	ModifyOrderReject_INVALID_POST_ONLY             ModifyOrderReject_Reason = 5
	ModifyOrderReject_INVALID_SELF_TRADE_PREVENTION ModifyOrderReject_Reason = 6
	// Internal error: the matching engine could not find this subaccounts
	// positions.
	ModifyOrderReject_UNKNOWN_TRADER ModifyOrderReject_Reason = 7
	// If the modify-order would cause a cancel-replace, the sum of open orders
	// and this replacement order would exceed the subaccounts spot limits.
	ModifyOrderReject_EXCEEDED_SPOT_POSITION ModifyOrderReject_Reason = 8
	// If the modify-order would cause a cancel-replace, the post-only
	// replacement would have crossed and traded.
	ModifyOrderReject_POST_ONLY_WOULD_TRADE ModifyOrderReject_Reason = 9
)

// Enum value maps for ModifyOrderReject_Reason.
var (
	ModifyOrderReject_Reason_name = map[int32]string{
		0: "UNCLASSIFIED",
		1: "INVALID_QUANTITY",
		2: "INVALID_MARKET_ID",
		3: "ORDER_NOT_FOUND",
		4: "INVALID_IFM",
		5: "INVALID_POST_ONLY",
		6: "INVALID_SELF_TRADE_PREVENTION",
		7: "UNKNOWN_TRADER",
		8: "EXCEEDED_SPOT_POSITION",
		9: "POST_ONLY_WOULD_TRADE",
	}
	ModifyOrderReject_Reason_value = map[string]int32{
		"UNCLASSIFIED":                  0,
		"INVALID_QUANTITY":              1,
		"INVALID_MARKET_ID":             2,
		"ORDER_NOT_FOUND":               3,
		"INVALID_IFM":                   4,
		"INVALID_POST_ONLY":             5,
		"INVALID_SELF_TRADE_PREVENTION": 6,
		"UNKNOWN_TRADER":                7,
		"EXCEEDED_SPOT_POSITION":        8,
		"POST_ONLY_WOULD_TRADE":         9,
	}
)

func (x ModifyOrderReject_Reason) Enum() *ModifyOrderReject_Reason {
	p := new(ModifyOrderReject_Reason)
	*p = x
	return p
}

func (x ModifyOrderReject_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyOrderReject_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[9].Descriptor()
}

func (ModifyOrderReject_Reason) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[9]
}

func (x ModifyOrderReject_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModifyOrderReject_Reason.Descriptor instead.
func (ModifyOrderReject_Reason) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{14, 0}
}

// Sent by client on websocket initialization. Once the websocket has been
// connected, the client is expected to send this credentials message
// immediately. The API key (UUID) and secret access key (hex-encoded 32-byte
// array) should be generated on the settings page with the write access. The
// signature should be calculated as the concatenation of the byte string
// `cube.xyz` and the current unix epoch in seconds interpreted at a
// little-endian 64-bit number. For example:
//
// ```rust compile_fail
// use hmac::{Hmac, Mac, NewMac};
// use std::time::SystemTime;
//
// let secret_key = [...];
//
// let timestamp = SystemTime::now()
//
//	.duration_since(SystemTime::UNIX_EPOCH)
//	.expect("clock went backwords")
//	.as_secs();
//
// let mut mac = Hmac::<sha2::Sha256>::new_from_slice(
//
//	secret_key
//
// ).expect("new HMAC error");
// mac.update(b"cube.xyz");
// mac.update(&timestamp.to_le_bytes());
// let signature = <[u8; 32]>::from(mac.finalize().into_bytes());
// ```
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public API key
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// HMAC signature
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Timestamp in seconds
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{0}
}

func (x *Credentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *Credentials) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Credentials) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Every client message, aside from Credentials, must be wrapped as an
// OrderRequest.
type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//
	//	*OrderRequest_New
	//	*OrderRequest_Cancel
	//	*OrderRequest_Modify
	//	*OrderRequest_Heartbeat
	//	*OrderRequest_Mc
	Inner isOrderRequest_Inner `protobuf_oneof:"inner"`
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{1}
}

func (m *OrderRequest) GetInner() isOrderRequest_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *OrderRequest) GetNew() *NewOrder {
	if x, ok := x.GetInner().(*OrderRequest_New); ok {
		return x.New
	}
	return nil
}

func (x *OrderRequest) GetCancel() *CancelOrder {
	if x, ok := x.GetInner().(*OrderRequest_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (x *OrderRequest) GetModify() *ModifyOrder {
	if x, ok := x.GetInner().(*OrderRequest_Modify); ok {
		return x.Modify
	}
	return nil
}

func (x *OrderRequest) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetInner().(*OrderRequest_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *OrderRequest) GetMc() *MassCancel {
	if x, ok := x.GetInner().(*OrderRequest_Mc); ok {
		return x.Mc
	}
	return nil
}

type isOrderRequest_Inner interface {
	isOrderRequest_Inner()
}

type OrderRequest_New struct {
	New *NewOrder `protobuf:"bytes,1,opt,name=new,proto3,oneof"`
}

type OrderRequest_Cancel struct {
	Cancel *CancelOrder `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

type OrderRequest_Modify struct {
	Modify *ModifyOrder `protobuf:"bytes,3,opt,name=modify,proto3,oneof"`
}

type OrderRequest_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,4,opt,name=heartbeat,proto3,oneof"`
}

type OrderRequest_Mc struct {
	Mc *MassCancel `protobuf:"bytes,5,opt,name=mc,proto3,oneof"`
}

func (*OrderRequest_New) isOrderRequest_Inner() {}

func (*OrderRequest_Cancel) isOrderRequest_Inner() {}

func (*OrderRequest_Modify) isOrderRequest_Inner() {}

func (*OrderRequest_Heartbeat) isOrderRequest_Inner() {}

func (*OrderRequest_Mc) isOrderRequest_Inner() {}

// Place a new order.
type NewOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique order ID assigned by the client for this order. The ID must be
	// unique among open orders by this subaccount.
	ClientOrderId uint64 `protobuf:"varint,1,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// A request ID that is echoed back on the NewOrderAck or NewOrderReject
	RequestId   uint64      `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	MarketId    uint64      `protobuf:"varint,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Price       *uint64     `protobuf:"varint,4,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Quantity    uint64      `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Side        Side        `protobuf:"varint,6,opt,name=side,proto3,enum=trade.Side" json:"side,omitempty"`
	TimeInForce TimeInForce `protobuf:"varint,7,opt,name=time_in_force,json=timeInForce,proto3,enum=trade.TimeInForce" json:"time_in_force,omitempty"`
	OrderType   OrderType   `protobuf:"varint,8,opt,name=order_type,json=orderType,proto3,enum=trade.OrderType" json:"order_type,omitempty"`
	// The subaccount to place this order on. This subaccount must be writable by
	// the API key specified in the Credentials message.
	SubaccountId        uint64               `protobuf:"varint,9,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	SelfTradePrevention *SelfTradePrevention `protobuf:"varint,10,opt,name=self_trade_prevention,json=selfTradePrevention,proto3,enum=trade.SelfTradePrevention,oneof" json:"self_trade_prevention,omitempty"`
	PostOnly            PostOnly             `protobuf:"varint,11,opt,name=post_only,json=postOnly,proto3,enum=trade.PostOnly" json:"post_only,omitempty"`
	// If true, this order will be automatically cancelled
	// after the closure of the network connection
	// between Cube's servers and the client that placed the order.
	//
	// If the client initiates the disconnect or network instability drops the connection,
	// the order will be cancelled when Cube's servers recognize the disconnection.
	//
	// In the event of a server-side disconnect that causes a halt in trading,
	// such as scheduled downtime, the order will be cancelled before trading resumes.
	CancelOnDisconnect bool `protobuf:"varint,12,opt,name=cancel_on_disconnect,json=cancelOnDisconnect,proto3" json:"cancel_on_disconnect,omitempty"`
}

func (x *NewOrder) Reset() {
	*x = NewOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrder) ProtoMessage() {}

func (x *NewOrder) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrder.ProtoReflect.Descriptor instead.
func (*NewOrder) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{2}
}

func (x *NewOrder) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *NewOrder) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *NewOrder) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *NewOrder) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *NewOrder) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *NewOrder) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

func (x *NewOrder) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_IMMEDIATE_OR_CANCEL
}

func (x *NewOrder) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_LIMIT
}

func (x *NewOrder) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *NewOrder) GetSelfTradePrevention() SelfTradePrevention {
	if x != nil && x.SelfTradePrevention != nil {
		return *x.SelfTradePrevention
	}
	return SelfTradePrevention_CANCEL_RESTING
}

func (x *NewOrder) GetPostOnly() PostOnly {
	if x != nil {
		return x.PostOnly
	}
	return PostOnly_DISABLED
}

func (x *NewOrder) GetCancelOnDisconnect() bool {
	if x != nil {
		return x.CancelOnDisconnect
	}
	return false
}

// Cancel a resting order.
// Note that this can be done before the order is acknowledged (an aggressive
// cancel) since the identifying field is the `client_order_id`.
type CancelOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The order ID specified by the client on the NewOrder request.
	ClientOrderId uint64 `protobuf:"varint,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// A request ID that is echoed back on the CancelOrderAck or CancelOrderReject
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The subaccount that the NewOrder was placed on.
	SubaccountId uint64 `protobuf:"varint,4,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (x *CancelOrder) Reset() {
	*x = CancelOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrder) ProtoMessage() {}

func (x *CancelOrder) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrder.ProtoReflect.Descriptor instead.
func (*CancelOrder) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{3}
}

func (x *CancelOrder) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *CancelOrder) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *CancelOrder) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *CancelOrder) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

// Modify a resting order.
// - If the `newPrice` and the current resting order's price is the same, and
// `newQuantity` is not greater, then the modify is considered a modify down,
// and the FIFO queue priority is maintained. Otherwise, the modify-order
// request is treated as an atomic cancel-replace and the replacement order is
// placed at the end of the FIFO queue for the new price level.
// - If post-only is specified and the replacement order would trade, then the
// request is rejected and the current resting order remains resting.
//
// Currently, in-flight-mitigation (IFM) is always enabled. That is, the
// cumulative fill qty is subtracted from `newQuantity` to calculate the new
// resting quantity. For example:
//
// ```text
//
//	| Resting | Filled
//
// ---------+---------+--------
// New 5    | 5       | 0
// Fill 2   | 3       | 2
// Modify 4 | 2       | 2
// ```
//
// The post-modify quantity will be `newQuantity - filled = 4 - 2 = 2`.
//
// Regardless of IFM, the invariant for order quantity is that `quantity =
// remaining_quantity + cumulative_quantity`.
type ModifyOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The order ID specified by the client on the NewOrder request.
	ClientOrderId uint64 `protobuf:"varint,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// A request ID that is echoed back on the ModifyOrderAck or ModifyOrderReject
	RequestId   uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	NewPrice    uint64 `protobuf:"varint,4,opt,name=new_price,json=newPrice,proto3" json:"new_price,omitempty"`
	NewQuantity uint64 `protobuf:"varint,5,opt,name=new_quantity,json=newQuantity,proto3" json:"new_quantity,omitempty"`
	// The subaccount that the NewOrder was placed on.
	SubaccountId        uint64               `protobuf:"varint,6,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	SelfTradePrevention *SelfTradePrevention `protobuf:"varint,7,opt,name=self_trade_prevention,json=selfTradePrevention,proto3,enum=trade.SelfTradePrevention,oneof" json:"self_trade_prevention,omitempty"`
	PostOnly            PostOnly             `protobuf:"varint,8,opt,name=post_only,json=postOnly,proto3,enum=trade.PostOnly" json:"post_only,omitempty"`
}

func (x *ModifyOrder) Reset() {
	*x = ModifyOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOrder) ProtoMessage() {}

func (x *ModifyOrder) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOrder.ProtoReflect.Descriptor instead.
func (*ModifyOrder) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{4}
}

func (x *ModifyOrder) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *ModifyOrder) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *ModifyOrder) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ModifyOrder) GetNewPrice() uint64 {
	if x != nil {
		return x.NewPrice
	}
	return 0
}

func (x *ModifyOrder) GetNewQuantity() uint64 {
	if x != nil {
		return x.NewQuantity
	}
	return 0
}

func (x *ModifyOrder) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *ModifyOrder) GetSelfTradePrevention() SelfTradePrevention {
	if x != nil && x.SelfTradePrevention != nil {
		return *x.SelfTradePrevention
	}
	return SelfTradePrevention_CANCEL_RESTING
}

func (x *ModifyOrder) GetPostOnly() PostOnly {
	if x != nil {
		return x.PostOnly
	}
	return PostOnly_DISABLED
}

// Cancel all resting orders, optionally limiting to a particular market and /
// or order book side.
type MassCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subaccount to cancel orders for.
	SubaccountId uint64 `protobuf:"varint,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// A request ID that is echoed back on the MassCancelAck and individual
	// CancelOrderAck's.
	RequestId uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// If specified, only orders on the corresponding market will be canceled.
	MarketId *uint64 `protobuf:"varint,3,opt,name=market_id,json=marketId,proto3,oneof" json:"market_id,omitempty"`
	// If specified, only orders with this side will be canceled.
	Side *Side `protobuf:"varint,4,opt,name=side,proto3,enum=trade.Side,oneof" json:"side,omitempty"`
}

func (x *MassCancel) Reset() {
	*x = MassCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassCancel) ProtoMessage() {}

func (x *MassCancel) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassCancel.ProtoReflect.Descriptor instead.
func (*MassCancel) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{5}
}

func (x *MassCancel) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *MassCancel) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *MassCancel) GetMarketId() uint64 {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return 0
}

func (x *MassCancel) GetSide() Side {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return Side_BID
}

// A client and server heartbeat. The heartbeat reply, including the timestamp
// value, comes from the order service and not the matching engine. Matching
// engine timestamps can be extracted from `transact_time` (below).
//
// Latency can be estimated from this, but only the relative difference between
// successive server messages should be used. In particular, the client and
// server clock should not be expected to be synchronized.
type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A request ID that is echoed back on the Heartbeat
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{6}
}

func (x *Heartbeat) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *Heartbeat) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Every exchange message after the initial bootstrap will be wrapped as an
// OrderResponse.
type OrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//
	//	*OrderResponse_NewAck
	//	*OrderResponse_CancelAck
	//	*OrderResponse_ModifyAck
	//	*OrderResponse_NewReject
	//	*OrderResponse_CancelReject
	//	*OrderResponse_ModifyReject
	//	*OrderResponse_Fill
	//	*OrderResponse_Heartbeat
	//	*OrderResponse_Position
	//	*OrderResponse_MassCancelAck
	Inner isOrderResponse_Inner `protobuf_oneof:"inner"`
}

func (x *OrderResponse) Reset() {
	*x = OrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponse) ProtoMessage() {}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponse.ProtoReflect.Descriptor instead.
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{7}
}

func (m *OrderResponse) GetInner() isOrderResponse_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *OrderResponse) GetNewAck() *NewOrderAck {
	if x, ok := x.GetInner().(*OrderResponse_NewAck); ok {
		return x.NewAck
	}
	return nil
}

func (x *OrderResponse) GetCancelAck() *CancelOrderAck {
	if x, ok := x.GetInner().(*OrderResponse_CancelAck); ok {
		return x.CancelAck
	}
	return nil
}

func (x *OrderResponse) GetModifyAck() *ModifyOrderAck {
	if x, ok := x.GetInner().(*OrderResponse_ModifyAck); ok {
		return x.ModifyAck
	}
	return nil
}

func (x *OrderResponse) GetNewReject() *NewOrderReject {
	if x, ok := x.GetInner().(*OrderResponse_NewReject); ok {
		return x.NewReject
	}
	return nil
}

func (x *OrderResponse) GetCancelReject() *CancelOrderReject {
	if x, ok := x.GetInner().(*OrderResponse_CancelReject); ok {
		return x.CancelReject
	}
	return nil
}

func (x *OrderResponse) GetModifyReject() *ModifyOrderReject {
	if x, ok := x.GetInner().(*OrderResponse_ModifyReject); ok {
		return x.ModifyReject
	}
	return nil
}

func (x *OrderResponse) GetFill() *Fill {
	if x, ok := x.GetInner().(*OrderResponse_Fill); ok {
		return x.Fill
	}
	return nil
}

func (x *OrderResponse) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetInner().(*OrderResponse_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *OrderResponse) GetPosition() *AssetPosition {
	if x, ok := x.GetInner().(*OrderResponse_Position); ok {
		return x.Position
	}
	return nil
}

func (x *OrderResponse) GetMassCancelAck() *MassCancelAck {
	if x, ok := x.GetInner().(*OrderResponse_MassCancelAck); ok {
		return x.MassCancelAck
	}
	return nil
}

type isOrderResponse_Inner interface {
	isOrderResponse_Inner()
}

type OrderResponse_NewAck struct {
	NewAck *NewOrderAck `protobuf:"bytes,1,opt,name=new_ack,json=newAck,proto3,oneof"`
}

type OrderResponse_CancelAck struct {
	CancelAck *CancelOrderAck `protobuf:"bytes,2,opt,name=cancel_ack,json=cancelAck,proto3,oneof"`
}

type OrderResponse_ModifyAck struct {
	ModifyAck *ModifyOrderAck `protobuf:"bytes,3,opt,name=modify_ack,json=modifyAck,proto3,oneof"`
}

type OrderResponse_NewReject struct {
	NewReject *NewOrderReject `protobuf:"bytes,4,opt,name=new_reject,json=newReject,proto3,oneof"`
}

type OrderResponse_CancelReject struct {
	CancelReject *CancelOrderReject `protobuf:"bytes,5,opt,name=cancel_reject,json=cancelReject,proto3,oneof"`
}

type OrderResponse_ModifyReject struct {
	ModifyReject *ModifyOrderReject `protobuf:"bytes,6,opt,name=modify_reject,json=modifyReject,proto3,oneof"`
}

type OrderResponse_Fill struct {
	Fill *Fill `protobuf:"bytes,7,opt,name=fill,proto3,oneof"`
}

type OrderResponse_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,8,opt,name=heartbeat,proto3,oneof"`
}

type OrderResponse_Position struct {
	Position *AssetPosition `protobuf:"bytes,9,opt,name=position,proto3,oneof"`
}

type OrderResponse_MassCancelAck struct {
	MassCancelAck *MassCancelAck `protobuf:"bytes,10,opt,name=mass_cancel_ack,json=massCancelAck,proto3,oneof"`
}

func (*OrderResponse_NewAck) isOrderResponse_Inner() {}

func (*OrderResponse_CancelAck) isOrderResponse_Inner() {}

func (*OrderResponse_ModifyAck) isOrderResponse_Inner() {}

func (*OrderResponse_NewReject) isOrderResponse_Inner() {}

func (*OrderResponse_CancelReject) isOrderResponse_Inner() {}

func (*OrderResponse_ModifyReject) isOrderResponse_Inner() {}

func (*OrderResponse_Fill) isOrderResponse_Inner() {}

func (*OrderResponse_Heartbeat) isOrderResponse_Inner() {}

func (*OrderResponse_Position) isOrderResponse_Inner() {}

func (*OrderResponse_MassCancelAck) isOrderResponse_Inner() {}

// New-order-ack confirms a new-order request. The ack will be ordered before
// any fills for this order.
type NewOrderAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeqNum uint64 `protobuf:"varint,1,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	// The client order ID specified in the new-order request.
	ClientOrderId uint64 `protobuf:"varint,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// The request ID specified in the new-order request.
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [Exchange order ID](#exchange-order-id)
	ExchangeOrderId uint64 `protobuf:"varint,4,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`
	MarketId        uint64 `protobuf:"varint,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// If the order ultimately rests, the `price` field will include the resting
	// price.
	Price *uint64 `protobuf:"varint,6,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// The quantity submitted in the new-order request.
	Quantity    uint64      `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Side        Side        `protobuf:"varint,8,opt,name=side,proto3,enum=trade.Side" json:"side,omitempty"`
	TimeInForce TimeInForce `protobuf:"varint,9,opt,name=time_in_force,json=timeInForce,proto3,enum=trade.TimeInForce" json:"time_in_force,omitempty"`
	OrderType   OrderType   `protobuf:"varint,10,opt,name=order_type,json=orderType,proto3,enum=trade.OrderType" json:"order_type,omitempty"`
	// [Transact time](#transact-time)
	TransactTime       uint64 `protobuf:"varint,11,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	SubaccountId       uint64 `protobuf:"varint,12,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	CancelOnDisconnect bool   `protobuf:"varint,13,opt,name=cancel_on_disconnect,json=cancelOnDisconnect,proto3" json:"cancel_on_disconnect,omitempty"`
}

func (x *NewOrderAck) Reset() {
	*x = NewOrderAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderAck) ProtoMessage() {}

func (x *NewOrderAck) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderAck.ProtoReflect.Descriptor instead.
func (*NewOrderAck) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{8}
}

func (x *NewOrderAck) GetMsgSeqNum() uint64 {
	if x != nil {
		return x.MsgSeqNum
	}
	return 0
}

func (x *NewOrderAck) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *NewOrderAck) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *NewOrderAck) GetExchangeOrderId() uint64 {
	if x != nil {
		return x.ExchangeOrderId
	}
	return 0
}

func (x *NewOrderAck) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *NewOrderAck) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *NewOrderAck) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *NewOrderAck) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

func (x *NewOrderAck) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_IMMEDIATE_OR_CANCEL
}

func (x *NewOrderAck) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_LIMIT
}

func (x *NewOrderAck) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *NewOrderAck) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *NewOrderAck) GetCancelOnDisconnect() bool {
	if x != nil {
		return x.CancelOnDisconnect
	}
	return false
}

// Cancel-order-ack confirms a cancel request, or that an order has been
// canceled as the result of a different user-initiated reason.
type CancelOrderAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeqNum     uint64 `protobuf:"varint,1,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	ClientOrderId uint64 `protobuf:"varint,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// If the Reason is `DISCONNECT`, `IOC`, `STP_RESTING`, or `STP_AGGRESSING`,
	// this request ID will be `u64::MAX`. Otherwise, it will be the request ID of
	// the initiated cancel action. For a mass cancel, each cancel order ack will
	// have the MassCancel's request_id.
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [Transact time](#transact-time)
	TransactTime uint64                `protobuf:"varint,4,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	SubaccountId uint64                `protobuf:"varint,5,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Reason       CancelOrderAck_Reason `protobuf:"varint,6,opt,name=reason,proto3,enum=trade.CancelOrderAck_Reason" json:"reason,omitempty"`
	MarketId     uint64                `protobuf:"varint,7,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *CancelOrderAck) Reset() {
	*x = CancelOrderAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderAck) ProtoMessage() {}

func (x *CancelOrderAck) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderAck.ProtoReflect.Descriptor instead.
func (*CancelOrderAck) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{9}
}

func (x *CancelOrderAck) GetMsgSeqNum() uint64 {
	if x != nil {
		return x.MsgSeqNum
	}
	return 0
}

func (x *CancelOrderAck) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *CancelOrderAck) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *CancelOrderAck) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *CancelOrderAck) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *CancelOrderAck) GetReason() CancelOrderAck_Reason {
	if x != nil {
		return x.Reason
	}
	return CancelOrderAck_UNCLASSIFIED
}

func (x *CancelOrderAck) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

// Modify-order-ack confirms a modify-order request. If the modify resulted in
// an aggressing cancel-replace, the ack will be ordered before any fills for
// this order.
type ModifyOrderAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeqNum     uint64 `protobuf:"varint,1,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	ClientOrderId uint64 `protobuf:"varint,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// The request ID specified in the modify request.
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [Transact time](#transact-time)
	TransactTime uint64 `protobuf:"varint,4,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	// The quantity remaining on the book after applying the modify request.
	RemainingQuantity uint64 `protobuf:"varint,5,opt,name=remaining_quantity,json=remainingQuantity,proto3" json:"remaining_quantity,omitempty"`
	SubaccountId      uint64 `protobuf:"varint,6,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketId          uint64 `protobuf:"varint,7,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Price             uint64 `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`
	// The quantity submitted in the modify request.
	Quantity uint64 `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// The cumulative filled quantity for this order.
	CumulativeQuantity uint64 `protobuf:"varint,10,opt,name=cumulative_quantity,json=cumulativeQuantity,proto3" json:"cumulative_quantity,omitempty"`
}

func (x *ModifyOrderAck) Reset() {
	*x = ModifyOrderAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOrderAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOrderAck) ProtoMessage() {}

func (x *ModifyOrderAck) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOrderAck.ProtoReflect.Descriptor instead.
func (*ModifyOrderAck) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyOrderAck) GetMsgSeqNum() uint64 {
	if x != nil {
		return x.MsgSeqNum
	}
	return 0
}

func (x *ModifyOrderAck) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *ModifyOrderAck) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ModifyOrderAck) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *ModifyOrderAck) GetRemainingQuantity() uint64 {
	if x != nil {
		return x.RemainingQuantity
	}
	return 0
}

func (x *ModifyOrderAck) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *ModifyOrderAck) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *ModifyOrderAck) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ModifyOrderAck) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ModifyOrderAck) GetCumulativeQuantity() uint64 {
	if x != nil {
		return x.CumulativeQuantity
	}
	return 0
}

// Mass-cancel-ack confirms a mass-cancel request. If `reason` is set, the mass
// cancel was not applied and there are no affected orders. Individual
// CancelOrderAck's will be sent for each order that was affected.
type MassCancelAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeqNum    uint64 `protobuf:"varint,1,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	SubaccountId uint64 `protobuf:"varint,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// The request ID specified in the mass-cancel request.
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [Transact time](#transact-time)
	TransactTime uint64                `protobuf:"varint,4,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	Reason       *MassCancelAck_Reason `protobuf:"varint,6,opt,name=reason,proto3,enum=trade.MassCancelAck_Reason,oneof" json:"reason,omitempty"`
	// The total number of orders that were canceled.
	TotalAffectedOrders uint32 `protobuf:"varint,7,opt,name=total_affected_orders,json=totalAffectedOrders,proto3" json:"total_affected_orders,omitempty"`
}

func (x *MassCancelAck) Reset() {
	*x = MassCancelAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassCancelAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassCancelAck) ProtoMessage() {}

func (x *MassCancelAck) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassCancelAck.ProtoReflect.Descriptor instead.
func (*MassCancelAck) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{11}
}

func (x *MassCancelAck) GetMsgSeqNum() uint64 {
	if x != nil {
		return x.MsgSeqNum
	}
	return 0
}

func (x *MassCancelAck) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *MassCancelAck) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *MassCancelAck) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *MassCancelAck) GetReason() MassCancelAck_Reason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return MassCancelAck_UNCLASSIFIED
}

func (x *MassCancelAck) GetTotalAffectedOrders() uint32 {
	if x != nil {
		return x.TotalAffectedOrders
	}
	return 0
}

// New-order-reject indicates that a new-order request was not applied.
type NewOrderReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeqNum uint64 `protobuf:"varint,1,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	// The client order ID specified in the new-order request.
	ClientOrderId uint64 `protobuf:"varint,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// The request ID specified in the new-order request.
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [Transact time](#transact-time)
	TransactTime uint64                `protobuf:"varint,4,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	SubaccountId uint64                `protobuf:"varint,5,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Reason       NewOrderReject_Reason `protobuf:"varint,6,opt,name=reason,proto3,enum=trade.NewOrderReject_Reason" json:"reason,omitempty"`
	MarketId     uint64                `protobuf:"varint,7,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Price        *uint64               `protobuf:"varint,8,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Quantity     uint64                `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Side         Side                  `protobuf:"varint,10,opt,name=side,proto3,enum=trade.Side" json:"side,omitempty"`
	TimeInForce  TimeInForce           `protobuf:"varint,11,opt,name=time_in_force,json=timeInForce,proto3,enum=trade.TimeInForce" json:"time_in_force,omitempty"`
	OrderType    OrderType             `protobuf:"varint,12,opt,name=order_type,json=orderType,proto3,enum=trade.OrderType" json:"order_type,omitempty"`
}

func (x *NewOrderReject) Reset() {
	*x = NewOrderReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderReject) ProtoMessage() {}

func (x *NewOrderReject) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderReject.ProtoReflect.Descriptor instead.
func (*NewOrderReject) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{12}
}

func (x *NewOrderReject) GetMsgSeqNum() uint64 {
	if x != nil {
		return x.MsgSeqNum
	}
	return 0
}

func (x *NewOrderReject) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *NewOrderReject) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *NewOrderReject) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *NewOrderReject) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *NewOrderReject) GetReason() NewOrderReject_Reason {
	if x != nil {
		return x.Reason
	}
	return NewOrderReject_UNCLASSIFIED
}

func (x *NewOrderReject) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *NewOrderReject) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *NewOrderReject) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *NewOrderReject) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

func (x *NewOrderReject) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_IMMEDIATE_OR_CANCEL
}

func (x *NewOrderReject) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_LIMIT
}

// Cancel-order-reject indicates that a cancel-order request was not applied.
type CancelOrderReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeqNum uint64 `protobuf:"varint,1,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	// The client order ID specified in the cancel-order request.
	ClientOrderId uint64 `protobuf:"varint,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// The request ID specified in the cancel-order request.
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [Transact time](#transact-time)
	TransactTime uint64                   `protobuf:"varint,4,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	SubaccountId uint64                   `protobuf:"varint,5,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Reason       CancelOrderReject_Reason `protobuf:"varint,6,opt,name=reason,proto3,enum=trade.CancelOrderReject_Reason" json:"reason,omitempty"`
	MarketId     uint64                   `protobuf:"varint,7,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *CancelOrderReject) Reset() {
	*x = CancelOrderReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderReject) ProtoMessage() {}

func (x *CancelOrderReject) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderReject.ProtoReflect.Descriptor instead.
func (*CancelOrderReject) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{13}
}

func (x *CancelOrderReject) GetMsgSeqNum() uint64 {
	if x != nil {
		return x.MsgSeqNum
	}
	return 0
}

func (x *CancelOrderReject) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *CancelOrderReject) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *CancelOrderReject) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *CancelOrderReject) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *CancelOrderReject) GetReason() CancelOrderReject_Reason {
	if x != nil {
		return x.Reason
	}
	return CancelOrderReject_UNCLASSIFIED
}

func (x *CancelOrderReject) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

// Modify-order-reject indicates that a modify-order request was not applied.
type ModifyOrderReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeqNum uint64 `protobuf:"varint,1,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	// The client order ID specified in the modify-order request.
	ClientOrderId uint64 `protobuf:"varint,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// The request ID specified in the modify-order request.
	RequestId uint64 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [Transact time](#transact-time)
	TransactTime uint64                   `protobuf:"varint,4,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	SubaccountId uint64                   `protobuf:"varint,5,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Reason       ModifyOrderReject_Reason `protobuf:"varint,6,opt,name=reason,proto3,enum=trade.ModifyOrderReject_Reason" json:"reason,omitempty"`
	MarketId     uint64                   `protobuf:"varint,7,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *ModifyOrderReject) Reset() {
	*x = ModifyOrderReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyOrderReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOrderReject) ProtoMessage() {}

func (x *ModifyOrderReject) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOrderReject.ProtoReflect.Descriptor instead.
func (*ModifyOrderReject) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyOrderReject) GetMsgSeqNum() uint64 {
	if x != nil {
		return x.MsgSeqNum
	}
	return 0
}

func (x *ModifyOrderReject) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *ModifyOrderReject) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ModifyOrderReject) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *ModifyOrderReject) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *ModifyOrderReject) GetReason() ModifyOrderReject_Reason {
	if x != nil {
		return x.Reason
	}
	return ModifyOrderReject_UNCLASSIFIED
}

func (x *ModifyOrderReject) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

// A fill for an order.
type Fill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeqNum uint64 `protobuf:"varint,1,opt,name=msg_seq_num,json=msgSeqNum,proto3" json:"msg_seq_num,omitempty"`
	MarketId  uint64 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The client order ID specified in the new-order request.
	ClientOrderId uint64 `protobuf:"varint,3,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// [Exchange order ID](#exchange-order-id)
	ExchangeOrderId uint64 `protobuf:"varint,4,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`
	// The price that this trade occured at.
	FillPrice uint64 `protobuf:"varint,5,opt,name=fill_price,json=fillPrice,proto3" json:"fill_price,omitempty"`
	// The quantity that was traded in this fill.
	FillQuantity uint64 `protobuf:"varint,6,opt,name=fill_quantity,json=fillQuantity,proto3" json:"fill_quantity,omitempty"`
	// The remaining quantity for this order after the fill is applied.
	LeavesQuantity uint64 `protobuf:"varint,7,opt,name=leaves_quantity,json=leavesQuantity,proto3" json:"leaves_quantity,omitempty"`
	// [Transact time](#transact-time)
	TransactTime uint64 `protobuf:"varint,8,opt,name=transact_time,json=transactTime,proto3" json:"transact_time,omitempty"`
	SubaccountId uint64 `protobuf:"varint,9,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// The cumulative filled quantity for this order after the fill is applied.
	CumulativeQuantity uint64 `protobuf:"varint,10,opt,name=cumulative_quantity,json=cumulativeQuantity,proto3" json:"cumulative_quantity,omitempty"`
}

func (x *Fill) Reset() {
	*x = Fill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fill) ProtoMessage() {}

func (x *Fill) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fill.ProtoReflect.Descriptor instead.
func (*Fill) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{15}
}

func (x *Fill) GetMsgSeqNum() uint64 {
	if x != nil {
		return x.MsgSeqNum
	}
	return 0
}

func (x *Fill) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *Fill) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *Fill) GetExchangeOrderId() uint64 {
	if x != nil {
		return x.ExchangeOrderId
	}
	return 0
}

func (x *Fill) GetFillPrice() uint64 {
	if x != nil {
		return x.FillPrice
	}
	return 0
}

func (x *Fill) GetFillQuantity() uint64 {
	if x != nil {
		return x.FillQuantity
	}
	return 0
}

func (x *Fill) GetLeavesQuantity() uint64 {
	if x != nil {
		return x.LeavesQuantity
	}
	return 0
}

func (x *Fill) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *Fill) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *Fill) GetCumulativeQuantity() uint64 {
	if x != nil {
		return x.CumulativeQuantity
	}
	return 0
}

// The user's underlying asset position. These are sent asynchronously as
// positions are updated and broadcast through internal position channels. They
// can also be tracked by applying other OrderResponse messages individually.
type AssetPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubaccountId uint64    `protobuf:"varint,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	AssetId      uint64    `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Total        *RawUnits `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	// The available amount after open orders are subtracted.
	Available *RawUnits `protobuf:"bytes,4,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *AssetPosition) Reset() {
	*x = AssetPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetPosition) ProtoMessage() {}

func (x *AssetPosition) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetPosition.ProtoReflect.Descriptor instead.
func (*AssetPosition) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{16}
}

func (x *AssetPosition) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *AssetPosition) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *AssetPosition) GetTotal() *RawUnits {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *AssetPosition) GetAvailable() *RawUnits {
	if x != nil {
		return x.Available
	}
	return nil
}

// Raw-units is a 256-bit number for the amount of an asset. The precision is
// based on the underlying asset. For example, ETH is specified as if in
// fixed-point 10^18, while BTC is specified as if in fixed-point 10^8.
//
// The number is interpreted in 'little-endian' as `[word0, word1, word2,
// word3]`.
type RawUnits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word0 uint64 `protobuf:"varint,1,opt,name=word0,proto3" json:"word0,omitempty"`
	Word1 uint64 `protobuf:"varint,2,opt,name=word1,proto3" json:"word1,omitempty"`
	Word2 uint64 `protobuf:"varint,3,opt,name=word2,proto3" json:"word2,omitempty"`
	Word3 uint64 `protobuf:"varint,4,opt,name=word3,proto3" json:"word3,omitempty"`
}

func (x *RawUnits) Reset() {
	*x = RawUnits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawUnits) ProtoMessage() {}

func (x *RawUnits) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawUnits.ProtoReflect.Descriptor instead.
func (*RawUnits) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{17}
}

func (x *RawUnits) GetWord0() uint64 {
	if x != nil {
		return x.Word0
	}
	return 0
}

func (x *RawUnits) GetWord1() uint64 {
	if x != nil {
		return x.Word1
	}
	return 0
}

func (x *RawUnits) GetWord2() uint64 {
	if x != nil {
		return x.Word2
	}
	return 0
}

func (x *RawUnits) GetWord3() uint64 {
	if x != nil {
		return x.Word3
	}
	return 0
}

// A bootstrap message sent after Credentials authentication.
// Client resting and pending orders used to bootstrap state. Sent as the first
// message(s) after initialization. Bootstrap is complete after a message tagged
// `Done` is received and every message after that will be an `OrderResponse`.
// Multiple messages may be received for `RestingOrders` and `AssetPositions`
// and these should be concatenated.
type Bootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//
	//	*Bootstrap_Done
	//	*Bootstrap_Resting
	//	*Bootstrap_Position
	Inner isBootstrap_Inner `protobuf_oneof:"inner"`
}

func (x *Bootstrap) Reset() {
	*x = Bootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrap) ProtoMessage() {}

func (x *Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrap.ProtoReflect.Descriptor instead.
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{18}
}

func (m *Bootstrap) GetInner() isBootstrap_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *Bootstrap) GetDone() *Done {
	if x, ok := x.GetInner().(*Bootstrap_Done); ok {
		return x.Done
	}
	return nil
}

func (x *Bootstrap) GetResting() *RestingOrders {
	if x, ok := x.GetInner().(*Bootstrap_Resting); ok {
		return x.Resting
	}
	return nil
}

func (x *Bootstrap) GetPosition() *AssetPositions {
	if x, ok := x.GetInner().(*Bootstrap_Position); ok {
		return x.Position
	}
	return nil
}

type isBootstrap_Inner interface {
	isBootstrap_Inner()
}

type Bootstrap_Done struct {
	Done *Done `protobuf:"bytes,1,opt,name=done,proto3,oneof"`
}

type Bootstrap_Resting struct {
	Resting *RestingOrders `protobuf:"bytes,2,opt,name=resting,proto3,oneof"`
}

type Bootstrap_Position struct {
	Position *AssetPositions `protobuf:"bytes,3,opt,name=position,proto3,oneof"`
}

func (*Bootstrap_Done) isBootstrap_Inner() {}

func (*Bootstrap_Resting) isBootstrap_Inner() {}

func (*Bootstrap_Position) isBootstrap_Inner() {}

// A chunk of resting orders. Sent on bootstrap.
type RestingOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*RestingOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *RestingOrders) Reset() {
	*x = RestingOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestingOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestingOrders) ProtoMessage() {}

func (x *RestingOrders) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestingOrders.ProtoReflect.Descriptor instead.
func (*RestingOrders) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{19}
}

func (x *RestingOrders) GetOrders() []*RestingOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

// A chunk of asset positions. Sent on bootstrap.
type AssetPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*AssetPosition `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *AssetPositions) Reset() {
	*x = AssetPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetPositions) ProtoMessage() {}

func (x *AssetPositions) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetPositions.ProtoReflect.Descriptor instead.
func (*AssetPositions) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{20}
}

func (x *AssetPositions) GetPositions() []*AssetPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

// An indication that bootstrap is complete.
type Done struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Transact time](#transact-time)
	LatestTransactTime uint64 `protobuf:"varint,1,opt,name=latest_transact_time,json=latestTransactTime,proto3" json:"latest_transact_time,omitempty"`
}

func (x *Done) Reset() {
	*x = Done{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Done) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Done) ProtoMessage() {}

func (x *Done) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Done.ProtoReflect.Descriptor instead.
func (*Done) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{21}
}

func (x *Done) GetLatestTransactTime() uint64 {
	if x != nil {
		return x.LatestTransactTime
	}
	return 0
}

// A resting order. Sent on bootstrap in `RestingOrders`.
type RestingOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client order ID specified in the new-order request.
	ClientOrderId uint64 `protobuf:"varint,1,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// [Exchange order ID](#exchange-order-id)
	ExchangeOrderId uint64 `protobuf:"varint,2,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`
	MarketId        uint64 `protobuf:"varint,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Price           uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	// The quantity submitted in the latest quantity-modifying request. If the
	// order has not been modified, then it is the quantity on the new-order-ack.
	// If it has been modified, then it is the quantity of the latest
	// modify-order-ack.
	OrderQuantity uint64      `protobuf:"varint,5,opt,name=order_quantity,json=orderQuantity,proto3" json:"order_quantity,omitempty"`
	Side          Side        `protobuf:"varint,6,opt,name=side,proto3,enum=trade.Side" json:"side,omitempty"`
	TimeInForce   TimeInForce `protobuf:"varint,7,opt,name=time_in_force,json=timeInForce,proto3,enum=trade.TimeInForce" json:"time_in_force,omitempty"`
	OrderType     OrderType   `protobuf:"varint,8,opt,name=order_type,json=orderType,proto3,enum=trade.OrderType" json:"order_type,omitempty"`
	// The current remaining quantity on the book.
	RemainingQuantity uint64 `protobuf:"varint,9,opt,name=remaining_quantity,json=remainingQuantity,proto3" json:"remaining_quantity,omitempty"`
	// [Transact time](#transact-time) of the NewOrderAck
	RestTime     uint64 `protobuf:"varint,10,opt,name=rest_time,json=restTime,proto3" json:"rest_time,omitempty"`
	SubaccountId uint64 `protobuf:"varint,11,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// The cumulative filled quantity for this order.
	CumulativeQuantity uint64 `protobuf:"varint,12,opt,name=cumulative_quantity,json=cumulativeQuantity,proto3" json:"cumulative_quantity,omitempty"`
}

func (x *RestingOrder) Reset() {
	*x = RestingOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestingOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestingOrder) ProtoMessage() {}

func (x *RestingOrder) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestingOrder.ProtoReflect.Descriptor instead.
func (*RestingOrder) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{22}
}

func (x *RestingOrder) GetClientOrderId() uint64 {
	if x != nil {
		return x.ClientOrderId
	}
	return 0
}

func (x *RestingOrder) GetExchangeOrderId() uint64 {
	if x != nil {
		return x.ExchangeOrderId
	}
	return 0
}

func (x *RestingOrder) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *RestingOrder) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RestingOrder) GetOrderQuantity() uint64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

func (x *RestingOrder) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

func (x *RestingOrder) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_IMMEDIATE_OR_CANCEL
}

func (x *RestingOrder) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_LIMIT
}

func (x *RestingOrder) GetRemainingQuantity() uint64 {
	if x != nil {
		return x.RemainingQuantity
	}
	return 0
}

func (x *RestingOrder) GetRestTime() uint64 {
	if x != nil {
		return x.RestTime
	}
	return 0
}

func (x *RestingOrder) GetSubaccountId() uint64 {
	if x != nil {
		return x.SubaccountId
	}
	return 0
}

func (x *RestingOrder) GetCumulativeQuantity() uint64 {
	if x != nil {
		return x.CumulativeQuantity
	}
	return 0
}

var File_trade_proto protoreflect.FileDescriptor

var file_trade_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xef, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x02, 0x6d, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x73,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x6d, 0x63, 0x42, 0x07, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xad, 0x04, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x15,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x66, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf3,
	0x02, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53,
	0x65, 0x6c, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x73, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x53, 0x69, 0x64, 0x65, 0x48, 0x01, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0xba, 0x04, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x41, 0x63,
	0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x6e, 0x65, 0x77, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x30,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x84, 0x04,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x1e, 0x0a,
	0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x6e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x73,
	0x67, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x2e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x43, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x10, 0x06, 0x22, 0xf0, 0x02, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x73, 0x67, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xd6, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x73,
	0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73,
	0x67, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x73,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x43, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x9e, 0x07, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x03, 0x0a, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x46, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x4f,
	0x50, 0x50, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x5f, 0x57, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x0f,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x10, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x73, 0x67, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x46, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x8f, 0x04, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49,
	0x46, 0x4d, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52,
	0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x53,
	0x50, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x57, 0x4f, 0x55, 0x4c,
	0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x09, 0x22, 0xff, 0x02, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa5, 0x01, 0x0a, 0x0d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x52, 0x61, 0x77, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x52, 0x61, 0x77, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x77, 0x6f, 0x72, 0x64, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x6f, 0x72, 0x64, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x33, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x44, 0x6f, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x04,
	0x44, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe8, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2a, 0x18, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x2a, 0x4e, 0x0a, 0x0b, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x2a, 0x56, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02, 0x2a, 0x25, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x42, 0x12, 0x5a, 0x03, 0x67, 0x6f, 0x2f, 0xaa, 0x02, 0x0a, 0x43, 0x75, 0x62, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_proto_rawDescOnce sync.Once
	file_trade_proto_rawDescData = file_trade_proto_rawDesc
)

func file_trade_proto_rawDescGZIP() []byte {
	file_trade_proto_rawDescOnce.Do(func() {
		file_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_proto_rawDescData)
	})
	return file_trade_proto_rawDescData
}

var file_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_trade_proto_goTypes = []interface{}{
	(Side)(0),                     // 0: trade.Side
	(TimeInForce)(0),              // 1: trade.TimeInForce
	(OrderType)(0),                // 2: trade.OrderType
	(SelfTradePrevention)(0),      // 3: trade.SelfTradePrevention
	(PostOnly)(0),                 // 4: trade.PostOnly
	(CancelOrderAck_Reason)(0),    // 5: trade.CancelOrderAck.Reason
	(MassCancelAck_Reason)(0),     // 6: trade.MassCancelAck.Reason
	(NewOrderReject_Reason)(0),    // 7: trade.NewOrderReject.Reason
	(CancelOrderReject_Reason)(0), // 8: trade.CancelOrderReject.Reason
	(ModifyOrderReject_Reason)(0), // 9: trade.ModifyOrderReject.Reason
	(*Credentials)(nil),           // 10: trade.Credentials
	(*OrderRequest)(nil),          // 11: trade.OrderRequest
	(*NewOrder)(nil),              // 12: trade.NewOrder
	(*CancelOrder)(nil),           // 13: trade.CancelOrder
	(*ModifyOrder)(nil),           // 14: trade.ModifyOrder
	(*MassCancel)(nil),            // 15: trade.MassCancel
	(*Heartbeat)(nil),             // 16: trade.Heartbeat
	(*OrderResponse)(nil),         // 17: trade.OrderResponse
	(*NewOrderAck)(nil),           // 18: trade.NewOrderAck
	(*CancelOrderAck)(nil),        // 19: trade.CancelOrderAck
	(*ModifyOrderAck)(nil),        // 20: trade.ModifyOrderAck
	(*MassCancelAck)(nil),         // 21: trade.MassCancelAck
	(*NewOrderReject)(nil),        // 22: trade.NewOrderReject
	(*CancelOrderReject)(nil),     // 23: trade.CancelOrderReject
	(*ModifyOrderReject)(nil),     // 24: trade.ModifyOrderReject
	(*Fill)(nil),                  // 25: trade.Fill
	(*AssetPosition)(nil),         // 26: trade.AssetPosition
	(*RawUnits)(nil),              // 27: trade.RawUnits
	(*Bootstrap)(nil),             // 28: trade.Bootstrap
	(*RestingOrders)(nil),         // 29: trade.RestingOrders
	(*AssetPositions)(nil),        // 30: trade.AssetPositions
	(*Done)(nil),                  // 31: trade.Done
	(*RestingOrder)(nil),          // 32: trade.RestingOrder
}
var file_trade_proto_depIdxs = []int32{
	12, // 0: trade.OrderRequest.new:type_name -> trade.NewOrder
	13, // 1: trade.OrderRequest.cancel:type_name -> trade.CancelOrder
	14, // 2: trade.OrderRequest.modify:type_name -> trade.ModifyOrder
	16, // 3: trade.OrderRequest.heartbeat:type_name -> trade.Heartbeat
	15, // 4: trade.OrderRequest.mc:type_name -> trade.MassCancel
	0,  // 5: trade.NewOrder.side:type_name -> trade.Side
	1,  // 6: trade.NewOrder.time_in_force:type_name -> trade.TimeInForce
	2,  // 7: trade.NewOrder.order_type:type_name -> trade.OrderType
	3,  // 8: trade.NewOrder.self_trade_prevention:type_name -> trade.SelfTradePrevention
	4,  // 9: trade.NewOrder.post_only:type_name -> trade.PostOnly
	3,  // 10: trade.ModifyOrder.self_trade_prevention:type_name -> trade.SelfTradePrevention
	4,  // 11: trade.ModifyOrder.post_only:type_name -> trade.PostOnly
	0,  // 12: trade.MassCancel.side:type_name -> trade.Side
	18, // 13: trade.OrderResponse.new_ack:type_name -> trade.NewOrderAck
	19, // 14: trade.OrderResponse.cancel_ack:type_name -> trade.CancelOrderAck
	20, // 15: trade.OrderResponse.modify_ack:type_name -> trade.ModifyOrderAck
	22, // 16: trade.OrderResponse.new_reject:type_name -> trade.NewOrderReject
	23, // 17: trade.OrderResponse.cancel_reject:type_name -> trade.CancelOrderReject
	24, // 18: trade.OrderResponse.modify_reject:type_name -> trade.ModifyOrderReject
	25, // 19: trade.OrderResponse.fill:type_name -> trade.Fill
	16, // 20: trade.OrderResponse.heartbeat:type_name -> trade.Heartbeat
	26, // 21: trade.OrderResponse.position:type_name -> trade.AssetPosition
	21, // 22: trade.OrderResponse.mass_cancel_ack:type_name -> trade.MassCancelAck
	0,  // 23: trade.NewOrderAck.side:type_name -> trade.Side
	1,  // 24: trade.NewOrderAck.time_in_force:type_name -> trade.TimeInForce
	2,  // 25: trade.NewOrderAck.order_type:type_name -> trade.OrderType
	5,  // 26: trade.CancelOrderAck.reason:type_name -> trade.CancelOrderAck.Reason
	6,  // 27: trade.MassCancelAck.reason:type_name -> trade.MassCancelAck.Reason
	7,  // 28: trade.NewOrderReject.reason:type_name -> trade.NewOrderReject.Reason
	0,  // 29: trade.NewOrderReject.side:type_name -> trade.Side
	1,  // 30: trade.NewOrderReject.time_in_force:type_name -> trade.TimeInForce
	2,  // 31: trade.NewOrderReject.order_type:type_name -> trade.OrderType
	8,  // 32: trade.CancelOrderReject.reason:type_name -> trade.CancelOrderReject.Reason
	9,  // 33: trade.ModifyOrderReject.reason:type_name -> trade.ModifyOrderReject.Reason
	27, // 34: trade.AssetPosition.total:type_name -> trade.RawUnits
	27, // 35: trade.AssetPosition.available:type_name -> trade.RawUnits
	31, // 36: trade.Bootstrap.done:type_name -> trade.Done
	29, // 37: trade.Bootstrap.resting:type_name -> trade.RestingOrders
	30, // 38: trade.Bootstrap.position:type_name -> trade.AssetPositions
	32, // 39: trade.RestingOrders.orders:type_name -> trade.RestingOrder
	26, // 40: trade.AssetPositions.positions:type_name -> trade.AssetPosition
	0,  // 41: trade.RestingOrder.side:type_name -> trade.Side
	1,  // 42: trade.RestingOrder.time_in_force:type_name -> trade.TimeInForce
	2,  // 43: trade.RestingOrder.order_type:type_name -> trade.OrderType
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_trade_proto_init() }
func file_trade_proto_init() {
	if File_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOrderAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassCancelAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyOrderReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawUnits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestingOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Done); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestingOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trade_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*OrderRequest_New)(nil),
		(*OrderRequest_Cancel)(nil),
		(*OrderRequest_Modify)(nil),
		(*OrderRequest_Heartbeat)(nil),
		(*OrderRequest_Mc)(nil),
	}
	file_trade_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_trade_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_trade_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_trade_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*OrderResponse_NewAck)(nil),
		(*OrderResponse_CancelAck)(nil),
		(*OrderResponse_ModifyAck)(nil),
		(*OrderResponse_NewReject)(nil),
		(*OrderResponse_CancelReject)(nil),
		(*OrderResponse_ModifyReject)(nil),
		(*OrderResponse_Fill)(nil),
		(*OrderResponse_Heartbeat)(nil),
		(*OrderResponse_Position)(nil),
		(*OrderResponse_MassCancelAck)(nil),
	}
	file_trade_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_trade_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_trade_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_trade_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Bootstrap_Done)(nil),
		(*Bootstrap_Resting)(nil),
		(*Bootstrap_Position)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_proto_goTypes,
		DependencyIndexes: file_trade_proto_depIdxs,
		EnumInfos:         file_trade_proto_enumTypes,
		MessageInfos:      file_trade_proto_msgTypes,
	}.Build()
	File_trade_proto = out.File
	file_trade_proto_rawDesc = nil
	file_trade_proto_goTypes = nil
	file_trade_proto_depIdxs = nil
}
